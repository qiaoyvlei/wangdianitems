/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../tmp/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../tmp/index.js":
/*!***********************!*\
  !*** ../tmp/index.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tmp_jsw_0001ca1c5a87171dc522fa8d28d6a9e5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../tmp/jsw.0001ca1c5a87171dc522fa8d28d6a9e5.js */ \"../tmp/jsw.0001ca1c5a87171dc522fa8d28d6a9e5.js\");\n/* harmony import */ var _tmp_jsw_0001ca1c5a87171dc522fa8d28d6a9e5_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tmp_jsw_0001ca1c5a87171dc522fa8d28d6a9e5_js__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\n_tmp_jsw_0001ca1c5a87171dc522fa8d28d6a9e5_js__WEBPACK_IMPORTED_MODULE_0___default.a[\"version\"] = Object({\"SdkVer\":'2019-05-20 11:48:07',\"ReqOcxVer\":'2019-05-20 11:43:14',\"WebSerMidVer\":'2019-05-16 14:53:52'});\r\n\r\nconsole.log(\"\");\r\nconsole.log(\"JSW Version Info, You Can Find That Here: jSW['version']\");\r\nconsole.log(\"                  Sdk \" + '2019-05-20 11:48:07');\r\nconsole.log(\"          Require Ocx \" + '2019-05-20 11:43:14');\r\nconsole.log(\"Web Server Middleware \" + '2019-05-16 14:53:52');\r\nconsole.log(\"\");\r\n\r\nwindow['jSW'] = _tmp_jsw_0001ca1c5a87171dc522fa8d28d6a9e5_js__WEBPACK_IMPORTED_MODULE_0___default.a;\n\n//# sourceURL=webpack:///../tmp/index.js?");

/***/ }),

/***/ "../tmp/jsw.0001ca1c5a87171dc522fa8d28d6a9e5.js":
/*!******************************************************!*\
  !*** ../tmp/jsw.0001ca1c5a87171dc522fa8d28d6a9e5.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("﻿(function () {\r\n    var jSW = jSW || {};\r\n    function jSWInit() {\r\n        var jSWProtocol = jSW.DependencyMgr.CreateModule(\"jSWProtocol\"); /**通信协议*/\r\n        var jSWUtils = jSW.DependencyMgr.CreateModule(\"jSWUtils\"); /**工具*/\r\n        var jSWOptions = jSWOptions || { /**全局配置*/\r\n            http: 'http://127.0.0.1',\r\n            ip: '192.168.6.32',\r\n            port: 8181,\r\n            url: '/jswapi',\r\n            appkey: 'FE04553E-B6D8-4CCB-AAAB-FF7F6B64E006',\r\n            version: '1.0.1',\r\n            calltype: 0, //jSW.CallProtoType.AUTO\r\n            ocxWebsocketPort: 0,\r\n            session_list: [], // Array(jSW.SWSession)\r\n            init_options: null,\r\n            CheckOcx: function () {\r\n                return jSW.CallProtoType.CheckOcx(this.calltype);\r\n            },\r\n            CheckNotOcx: function () {\r\n                return !this.CheckOcx();\r\n            },\r\n            CheckHttp: function () {\r\n                return jSW.CallProtoType.HTTP == this.calltype;\r\n            }\r\n        };\r\n        \r\n        jSW.DependencyMgr.RegModule(\"jSWOptions\", jSWOptions, true);\r\n\r\n        jSW.CallProtoType = {\r\n            AUTO: 0,\r\n            OCX: 1,\r\n            HTTP: 2,\r\n            CheckOcx: function (protoType) {\r\n                return protoType == this.OCX;\r\n            }\r\n        };\r\n\r\n        jSW.SW_CHANEL_STATUS = {\r\n            OPENED: 0,      //打开成功\r\n            OPENING: 1,     //正在打开\r\n            CLOSED: 2,      //关闭\r\n            HLS_OPEN: 3,    //打开HLS\r\n            HLS_M3U8: 4     //产生m3u8文件\r\n        };\r\n\r\n        jSW.MessageType = null;\r\n\r\n        jSW.RotateType = null;\r\n\r\n        jSW.EventActions = null;\r\n\r\n        jSW.StorageRecordType = {\r\n            NONE: 0,\r\n            MANUAL: (1 << 0),\r\n            ONTIME: (1 << 1),\r\n            ONALARM: (1 << 2)\r\n        };\r\n\r\n        jSW.OpenDebug = function (isOpen) {\r\n            jSWUtils._IsDebug = isOpen;\r\n        }\r\n\r\n        jSW.StorageFileType = {\r\n            ALL: 0,      // 不限定文件类型\r\n            RECORD: 1 << 0,   // 录像文件\r\n            CAPTURE: 1 << 1,  // 图片文件\r\n            GPS: 1 << 2, // 固件文件\r\n            AUDIO: 1 << 3,// 音频文件\r\n            FIRMWARE: 1 << 8      // GPS文件\r\n        };\r\n\r\n        /**ocx事件回调函数*/\r\n        jSW._swOcxOnEvent = function (rc, data) {\r\n            console.log('ocx on event rc:' + rc + ' websocket port: ' + data);\r\n            var port = parseInt(data);\r\n            if (rc != jSW.RcCode.RC_CODE_S_OK || port <= 0) {\r\n                console.error('ocx init fail ' + rc + ' ' + port);\r\n            }\r\n\r\n            if (port <= 0) {\r\n                rc = jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n            }\r\n\r\n            jSWOptions.ocxWebsocketPort = port;\r\n\r\n            if (jSWOptions.init_options.oninit && (typeof jSWOptions.init_options.oninit) === 'function') {\r\n                if (jSW._mMgr.bUseOcx()) {\r\n                    setTimeout(jSWOptions.init_options.oninit, 50, rc);\r\n                } else {\r\n                    jSWOptions.init_options.oninit(rc);\r\n                }\r\n\r\n            }\r\n        };\r\n\r\n        function OcxPlayWndDispatchUiEvent(divid, type) {\r\n            var divParent = document.getElementById(divid);\r\n            if (divParent) {\r\n                divParent = divParent.parentNode;\r\n                var params = params || { bubbles: false, cancelable: false };\r\n                var mouseEvent = document.createEvent('MouseEvent');\r\n                mouseEvent.initMouseEvent(type, params.bubbles, params.cancelable, window, 0, params.screenX || 0, params.screenY || 0, params.clientX || 0, params.clientY || 0, false, false, false, false, 0, null);\r\n                divParent.dispatchEvent(mouseEvent);\r\n            }\r\n        }\r\n\r\n        jSW._swOcxPlayerOnEvent = function (iEvent, chanel) {\r\n            try {\r\n                if (iEvent == 0 && chanel) {\r\n                    chanel._swOnDivSizeChange(-1);\r\n                }\r\n            } catch (e) {\r\n                // console.log(e);\r\n            }\r\n        }\r\n\r\n        jSW._lastOptions = null;\r\n        /**options: {\r\n            url: 'http://192.168.6.100:8080',\r\n            calltype: 0,//jSW.CallProtoType.AUTO,\r\n            oninit: function(rc) { },\r\n            config: {\r\n                    bocxws: false,\r\n                    bNEGP: false\r\n                }\r\n            }*/\r\n\r\n        jSW.GetHttpVersion = function (options) {\r\n            var rc = jSW._InnerGetJswDependVersion(function (data) {\r\n                options.callback(options, {}, {\r\n                    szversionid: data.SdkVer\r\n                });\r\n            });\r\n            return rc;\r\n        }\r\n\r\n        jSW.swInit = function (options) {\r\n            // 初始化，交换密钥等\r\n            SetInitConfigParams(options);\r\n            jSW.DependencyMgr.LoadProDepends(function (options) {\r\n                console.log(\"Start Jsw Init\");\r\n                var dft_options = {\r\n                    url: null,\r\n                    calltype: jSW.CallProtoType.AUTO,\r\n                    oninit: null,\r\n                    home: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                if (jSW.MessageType == null) {\r\n                    jSW.MessageType = jSWProtocol.RequestHeader.notifys;\r\n                }\r\n                if (jSW.RotateType == null) {\r\n                    jSW.RotateType = jSWProtocol.RotateType;\r\n                }\r\n                if (jSW.EventActions == null) {\r\n                    jSW.EventActions = jSWProtocol.EVENTACTIONS;\r\n                }\r\n\r\n\r\n                // 检测浏览器是否支持websocket\r\n                if (false == (\"WebSocket\" in window)) {\r\n                    alert('not support websocket');\r\n                    if (options.oninit && (typeof options.oninit) === 'function') {\r\n                        options.oninit(jSW.RcCode.RC_CODE_E_INVALIDARG);\r\n                    }\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                jSWOptions.init_options = options;\r\n\r\n                var curWWWPath = window.document.location.href;\r\n                var pathName = window.document.location.pathname;\r\n                var pos = curWWWPath.lastIndexOf(pathName);\r\n                var url = curWWWPath.substring(0, pos);\r\n\r\n                if (options.url != null && options.url.length > 0) {\r\n                    url = options.url;\r\n                }\r\n\r\n                if (options.home == null) {\r\n                    options.home = url;\r\n                }\r\n\r\n                var httpsProto = (url.indexOf(\"https\") == 0) ? \"https://\" : \"http://\";\r\n\r\n                jSWOptions.http = url;\r\n                jSWOptions.url = url.replace(httpsProto, \"\") + '/jswapi';\r\n\r\n                var szInfo = url.replace(httpsProto, \"\").replace('/', \"\").split(':');\r\n\r\n                jSWOptions.ip = szInfo[0];\r\n                jSWOptions.port = szInfo[1];\r\n\r\n                jSWOptions.calltype = options.calltype;\r\n                if (jSW.CallProtoType.AUTO == jSWOptions.calltype) {\r\n                    if (jSWUtils.isIE()) {\r\n                        jSWOptions.calltype = jSW.CallProtoType.OCX;\r\n                    } else {\r\n                        jSWOptions.calltype = jSW.CallProtoType.HTTP;\r\n                    }\r\n                }\r\n\r\n                if (false == jSWUtils.isIE()) {\r\n                    if (jSW.CallProtoType.OCX == jSWOptions.calltype) {\r\n                        console.error('only ie support ocx!');\r\n                        if (options.oninit && (typeof options.oninit) === 'function') {\r\n                            options.oninit(jSW.RcCode.RC_CODE_E_INVALIDARG);\r\n                        }\r\n                        return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                    }\r\n                }\r\n\r\n                if (jSW.CallProtoType.OCX == jSWOptions.calltype) {\r\n                    var jsw_ocx = document.getElementById('jsw_ocx');\r\n                    if (jsw_ocx == null) {\r\n                        try {\r\n                            jsw_ocx = document.createElement('object');\r\n                            jsw_ocx.id = 'jsw_ocx';\r\n                            jsw_ocx.classid = \"clsid:51DF1D91-DA4E-47DA-A5BE-84A96ADD2425\";\r\n                            jsw_ocx.width = 1;\r\n                            jsw_ocx.height = 1;\r\n                            jsw_ocx.style.position = \"absolute\";\r\n                            jsw_ocx.style.top = \"0px\";\r\n                            jsw_ocx.style.left = \"0px\";\r\n                            document.body.appendChild(jsw_ocx);\r\n                        } catch (e) {\r\n                            console.error('ocx attach exception ' + e);\r\n                            var temp = document.getElementById('jsw_ocx')\r\n                            if (temp) {\r\n                                document.body.removeChild(temp);\r\n                            }\r\n                            if (jSW.CallProtoType.OCX == jSWOptions.calltype) {\r\n                                if (options.oninit && (typeof options.oninit) === 'function') {\r\n                                    options.oninit(jSW.RcCode.RC_CODE_E_INVALIDARG);\r\n                                }\r\n                                return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                            }\r\n                            jSWOptions.calltype = jSW.CallProtoType.HTTP;\r\n                        }\r\n\r\n                        if (null != jsw_ocx) {\r\n                            try {\r\n                                // 注册事件\r\n                                var iintervaltimes = 0;\r\n                                var ihandle = setInterval(function () {\r\n                                    document.innerHTML -= \"0\";\r\n                                    var idesPort = jsw_ocx.oxGetWebSocketPort();\r\n                                    if (idesPort > 0 || iintervaltimes > 10) {\r\n                                        clearInterval(ihandle);\r\n                                        jSW._swOcxOnEvent(0, idesPort);\r\n                                    } else {\r\n                                        iintervaltimes++;\r\n                                    }\r\n                                }, 200);\r\n                            } catch (e) {\r\n\r\n                                var temp = document.getElementById('jsw_ocx')\r\n                                if (temp) {\r\n                                    document.body.removeChild(temp);\r\n                                }\r\n                                document.body.removeChild(oScript);\r\n                                console.error('ocx add event exception ' + e);\r\n                                if (jSW.CallProtoType.OCX == jSWOptions.calltype) {\r\n                                    if (options.oninit && (typeof options.oninit) === 'function') {\r\n                                        options.oninit(jSW.RcCode.RC_CODE_E_INVALIDARG);\r\n                                    }\r\n                                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                                }\r\n                                jSWOptions.calltype = jSW.CallProtoType.HTTP;\r\n                            }\r\n\r\n                            jSW._mMgr.RegOcxHandle(jsw_ocx);\r\n                        }\r\n                    } else {\r\n                        if (options.oninit && (typeof options.oninit) === 'function') {\r\n                            options.oninit(jSW.RcCode.RC_CODE_S_OK);\r\n                        }\r\n                    }\r\n\r\n                    jSW.DependencyMgr.LoadOcxDepends();\r\n                }\r\n                else if (jSWOptions.calltype == jSW.CallProtoType.HTTP) {\r\n                    jSW.DependencyMgr.LoadHttpDepends(function (options) {\r\n                        if (options.oninit && (typeof options.oninit) === 'function') {\r\n                            options.oninit(jSW.RcCode.RC_CODE_S_OK);\r\n                            jSWUtils.debugLogInfo(\"load video.js ok!\");\r\n                        }\r\n                    }, options);\r\n                }\r\n            }, options);\r\n            return 0;//jSW.RcCode.RC_CODE_S_OK;定义jSW.RcCode的库还没加载\r\n        };\r\n\r\n        /**\r\n         * options : { config: {}}\r\n         */\r\n        function SetInitConfigParams(options) {\r\n            var config = {\r\n                bocxws: false,\r\n                bNEGP: false\r\n            };\r\n            if (options && options.config) {\r\n                config.bocxws = options.config.bocxws ? true : false;\r\n                config.bNEGP = options.config.bNEGP ? true : false;\r\n            }\r\n            jSW._mMgr.setBUseOcxWs(config.bocxws);\r\n            PulistLoadMgr.Config.SetMultiNotifyDft(config.bNEGP);\r\n        }\r\n\r\n        jSW.swDeInit = function () {\r\n            if (jSWOptions.session_list.length > 0) {\r\n                for (var i = 0; i < jSWOptions.session_list.length; i++) {\r\n                    jSWOptions.session_list[i].swDispose();\r\n                    delete jSWOptions.session_list[i];\r\n                }\r\n                jSWOptions.session_list = [];\r\n            }\r\n            if (jSW.RcCode) {\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            }\r\n        };\r\n\r\n        jSW.swGetOption = function () {\r\n            var opt = {\r\n                http: jSWOptions.http,\r\n                version: jSWOptions.version,\r\n                calltype: jSWOptions.calltype,\r\n            };\r\n\r\n            return opt;\r\n        }\r\n\r\n        // ---- SWSession ----\r\n        /**options: {\r\n            server: '127.0.0.1',\r\n            port: 9701,\r\n            onopen: null, // function(sess) { }\r\n            onclose: null, // function(sess, evt) { }\r\n           } */\r\n        jSW.SWSession = function (options) {\r\n\r\n            jSW.swDeInit();\r\n\r\n            var dft_options = {\r\n                server: '127.0.0.1',\r\n                port: 9701,\r\n                onopen: null,\r\n                onclose: null\r\n            };\r\n\r\n            options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n            jSW.SWSession._init(this, options);\r\n\r\n            jSW.SWSession._CreateWs(this, options);\r\n\r\n            this._pulistLoadMgr = new PulistLoadMgr(this);\r\n        };\r\n\r\n        jSW.SWSession._init = function (session, options) {\r\n            session._server = jSWUtils.isIE() ? options.server : \"127.0.0.1\";\r\n            session._port = Number(options.port);\r\n\r\n            session._arr_pu = [];\r\n            session._arr_pu_index = [];\r\n            session._arr_pu_offline = [],\r\n            session._arr_pu_online = [],\r\n            session._arr_dialog = [];\r\n            session._arr_record_play = [];\r\n            session._p_emms = new proto.WEBBVCU.EmmsHeader();\r\n            session._p_emms.setKey(jSWOptions.appkey);\r\n            session._p_emms.setVer(jSWOptions.version);\r\n            session._emms = new jSWProtocol.EmmsHeader(jSWOptions.appkey, jSWOptions.version);\r\n            session._bLogout = false;\r\n\r\n            session._callbackManager = new jSW.SWCallbackManager(session, [\r\n                jSWProtocol.RequestHeader.notifys.notify.cmd,\r\n                jSWProtocol.RequestHeader.login.cmd,\r\n                jSWProtocol.RequestHeader.keeplive.cmd,\r\n                jSWProtocol.RequestHeader.logout.cmd,\r\n                jSWProtocol.RequestHeader.pulist.cmd,\r\n                jSWProtocol.RequestHeader.openchanle.cmd,\r\n                jSWProtocol.RequestHeader.keeplivechanle.cmd,\r\n                jSWProtocol.RequestHeader.closechanle.cmd,\r\n                jSWProtocol.RequestHeader.pugpsdata.cmd,\r\n            ]);\r\n\r\n            session._confManager = null;\r\n            session._immodule = null;\r\n            session._pusModule = null;\r\n            if (jSWOptions.calltype == jSW.CallProtoType.OCX) {\r\n                session._pusModule = new jSW.SWSession._SwPuModule(session);\r\n            }\r\n\r\n            session._confManager = new jSW.SwConfManager(session);\r\n            session._immodule = new jSW.SWSession.SwImModule(session, session._confManager, session._pusModule);\r\n\r\n            session._userManager = new jSW.SwUserManager(session);\r\n            session._commDlgMgr = new jSW.CommonDlgMgr(session);\r\n        }\r\n\r\n        jSW.SWSession._CreateWs = function (session, options) {\r\n            try {\r\n                jSW._mMgr.loadWebSocket(function (session, options, MyWs) {\r\n                    try {\r\n                        var url = session._getWsDesUrl(options);\r\n                        session._ws = new MyWs(url);\r\n                        session._checkWsCreateResult(options);\r\n\r\n                        var audio = jSW.DependencyMgr.GetModule(\"Audio\");\r\n                        audio.CreateWs(MyWs, url);\r\n                    }\r\n                    catch (e) {\r\n                        session._onWsError(options, e);\r\n                    }\r\n                }, session, options);\r\n\r\n            } catch (e) {\r\n                this._onWsError(options, e);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // --pu list load multi pages\r\n        function PulistLoadMgr(session) {\r\n            //Current Middleware Pulist Info\r\n            this._lastCPI = {\r\n                bCanGet: false,\r\n                iAlready: -1,\r\n                iTotal: -1\r\n            };\r\n            this._session = session;\r\n            this._bLoading = false;\r\n            this._iAlreadLoadCount = 0;\r\n            this.bMutilNotify = PulistLoadMgr.Config.bMutilNotifyDft;\r\n        }\r\n\r\n        PulistLoadMgr.Config = {\r\n            bMutilNotifyDft: false,\r\n            SetMultiNotifyDft: function (bNEGP) {\r\n                this.bMutilNotifyDft = bNEGP ? true : false;\r\n            }\r\n        }\r\n\r\n        PulistLoadMgr.prototype = {\r\n            LOAD_PU_COUNT_PER_REQ: 100,\r\n            onGetCPI: function (bCanGet, iTotal, iAlready) {\r\n                this._lastCPI.bCanGet = bCanGet;\r\n                this._lastCPI.iAlready = iAlready;\r\n                this._lastCPI.iTotal = iTotal;\r\n                if (bCanGet) {\r\n                    this._checkDispatch();\r\n                }\r\n            },\r\n            _checkDispatch: function () {\r\n                if (!this._bLoading) {\r\n                    if (this._iAlreadLoadCount < this._lastCPI.iAlready) {\r\n                        this._bLoading = true;\r\n                        this._GetPulist();\r\n                    }\r\n                }\r\n            },\r\n            _GetPulist: function () {\r\n                var loadIndex = this._iAlreadLoadCount;\r\n                var loadCount = this._lastCPI.iAlready - this._iAlreadLoadCount;\r\n                if (loadCount > this.LOAD_PU_COUNT_PER_REQ) {\r\n                    loadCount = this.LOAD_PU_COUNT_PER_REQ;\r\n                }\r\n\r\n                var tag = {\r\n                    reqParams: null,\r\n                    pLM: this\r\n                };\r\n\r\n                var reqParams = {\r\n                    sIndex: loadIndex,\r\n                    iCount: loadCount,\r\n                    callback: this._onGetHasResult,\r\n                    tag: tag\r\n                }\r\n                reqParams.tag.reqParams = reqParams;\r\n\r\n                this._session._onShouldGetPulist(reqParams);\r\n            },\r\n            _onGetPulistHasResult: function (bResult, reqParam) {\r\n                if (bResult) {\r\n                    this._iAlreadLoadCount = reqParam.sIndex + reqParam.iCount;\r\n                    if (this._bLoading) {\r\n                        this._bLoading = false;\r\n                        this._checkDispatch();\r\n                    }\r\n                }\r\n            },\r\n            _onGetHasResult: function (options, response) {\r\n                var pLM = options.tag.pLM;\r\n                pLM._onGetPulistHasResult(response.emms.code == 0, options.tag.reqParams);\r\n            },\r\n            _checkBNotiCaller: function () {\r\n                if (this.bMutilNotify || this._iAlreadLoadCount == this._lastCPI.iTotal) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n\r\n        jSW.SWSession._SwPuModule = function (session) {\r\n            this._session = session;\r\n        }\r\n\r\n        jSW.SWSession._SwPuModule.prototype = {\r\n            _onNotifyImMsg: function (imInfo, response) {\r\n                var cmd = jSWProtocol.RequestHeader.confnotify.notifyimmsg.cmd;\r\n                var sender = { \"szSourceId\": imInfo.szSourceId, \"iSourceId\": imInfo.iSourceId };\r\n                data = {\r\n                    sender: sender,\r\n                    szmsgs: imInfo.szmsg\r\n                }\r\n                this._notifytouser(response, cmd, data);\r\n            },\r\n            _notifytouser: function (response, cmd, data) {\r\n                this._session._callbackManager.dispatchCallback(\"notify\", {\r\n                    code: response.getCode(),\r\n                    response: response,\r\n                    msg: cmd,\r\n                    content: data\r\n                });\r\n            }\r\n        };\r\n\r\n        jSW.SWSession.prototype = {\r\n            _getWsDesUrl: function (options) {\r\n                var protocolWs = window.location.protocol == \"https:\" ? \"wss\" : \"ws\";\r\n                var desurl = \"\";\r\n                if (jSWOptions.CheckHttp()) {\r\n                    desurl = protocolWs + \"://\" + jSWOptions.ip + \":\" + jSWOptions.port + \"/jswapi\";\r\n                } else if (jSWOptions.CheckOcx()) {\r\n                    if (jSWOptions.ocxWebsocketPort <= 0) {\r\n                        // 尝试使用ocx获取websocket端口号(有可能注册的ocx事件未被调用)\r\n                        try {\r\n                            var jsw_ocx = document.getElementById('jsw_ocx');\r\n                            if (jsw_ocx != null) {\r\n                                jSWOptions.ocxWebsocketPort = jsw_ocx.oxGetWebSocketPort();\r\n                            } else {\r\n                                console.error('not found jsw_ocx');\r\n                            }\r\n                        } catch (e) {\r\n                            console.error('oxGetWebSocketPort fail ' + e);\r\n                        }\r\n                    }\r\n\r\n                    if (jSWOptions.ocxWebsocketPort <= 0) {\r\n                        this._onWsError(options, 'ocx not init or init fail');\r\n                        return;\r\n                    }\r\n\r\n                    desurl = 'ws://127.0.0.1:' + jSWOptions.ocxWebsocketPort;\r\n                    if (jSW._mMgr.bWsTest()) {\r\n                        desurl = 'ws://127.0.0.1:8888';\r\n                    }\r\n                }\r\n\r\n                console.log('ws url: ' + desurl);\r\n                return desurl;\r\n            },\r\n\r\n            _checkWsCreateResult: function (options) {\r\n                if (null == this._ws) {\r\n                    console.error('http websoket error null');\r\n                    this._onWsError(options, e);\r\n                    return;\r\n                } else {\r\n                    this._onWsCreateOk(options);\r\n                    jSW._mMgr.oWsOpen(this._ws);\r\n                }\r\n            },\r\n\r\n            _onWsCreateOk: function (options) {\r\n                jSWOptions.session_list.push(this);\r\n                var __session = this;\r\n                var __options = options;\r\n                console.log('websoket connect ...');\r\n                this._ws.onopen = function () {\r\n                    console.log('http websoket connect success!');\r\n                    if (__options.onopen && (typeof __options.onopen) === 'function') {\r\n                        __options.onopen(__session);\r\n                    }\r\n                };\r\n                this._ws.onerror = function (e) {\r\n                    __session._ws = null;\r\n                    __session._onWsError(__options, e);\r\n                };\r\n\r\n                this._ws.onmessage = function (msg) {\r\n                    jSWProtocol.txOnResponse(-1, msg.data);\r\n                };\r\n\r\n                this._ws.onclose = function (e) {\r\n                    __session._ws = null;\r\n                    console.log(\"http websoket connect closed:\" + e.code + ' reason: ' + e.reason);\r\n\r\n                    __session.swLogout();\r\n                    if (__options.onclose && (typeof __options.onclose) === 'function') {\r\n                        __options.onclose(__session, e);\r\n                    }\r\n                };\r\n            },\r\n\r\n            _onWsError: function (options, e) {\r\n                console.error('http websoket error' + e);\r\n                if (options.onclose && (typeof options.onclose) === 'function') {\r\n                    options.onclose(this, e);\r\n                }\r\n            },\r\n\r\n            swSetGlobalControlParam: function (options) {\r\n                var rc = jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                if (jSWOptions.CheckOcx()) {\r\n                    if (typeof options[\"Idelayvssmooth\"] == undefined) {\r\n                        return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                    }\r\n                    var payload = new proto.WEBBVCU.ParamsDialogControl();\r\n                    payload.setIdelayvssmooth(options[\"Idelayvssmooth\"]);\r\n                    \r\n                    var rc = jSWProtocol.SendRequest({\r\n                        session: this,\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_GLOBAL_DIALOG_PARAM,\r\n                        payload: payload,\r\n                        callback: options.callback,\r\n                        tag: options.tag\r\n                    });\r\n\r\n                    return rc;\r\n                }\r\n                return rc;\r\n            },\r\n\r\n            swImSend: function (options) {\r\n                if (options.msgitems) {\r\n\r\n                }\r\n                else if (options.filepath) {\r\n                    if (!options.targetid || options.targetid.indexOf(\"PU\") == -1) {\r\n                        console.log(\"target id invalidarg\");\r\n                        return jSW.RcCode.RC_CODE_E_BVCU_INVALIDARG;\r\n                    }\r\n\r\n                    options.msgitems = [{\r\n                        nruid: \"NRU_\",\r\n                        iType: jSWProtocol.IMMSGTypes.FILE,\r\n                        data: options.filepath\r\n                    }];\r\n                } else {\r\n                    return jSW.RcCode.RC_CODE_E_BVCU_INVALIDARG;\r\n                }\r\n\r\n                var rc = this._immodule._swIMSend(options);\r\n                return rc;\r\n            },\r\n\r\n            swImRecv: function (options) {\r\n                if (!options.targetid || options.targetid.indexOf(\"PU\") == -1) {\r\n                    console.log(\"target id invalidarg\");\r\n                    return jSW.RcCode.RC_CODE_E_BVCU_INVALIDARG;\r\n                }\r\n                options.msgitems = [{\r\n                    nruid: options.nruid,\r\n                    iType: jSWProtocol.IMMSGTypes.FILE,\r\n                    data: options.remotepath\r\n                }];\r\n                var rc = this._immodule._SwConfFileRecv(options);\r\n                return rc;\r\n            },\r\n\r\n            /**\r\n             * options: {\r\n             *  szFilePath: 文件路径\r\n             * }\r\n             */\r\n            swOpenFileInDir: function (options) {\r\n                if (jSWOptions.calltype != jSW.CallProtoType.OCX) {\r\n                    return jSW.RcCode.RC_CODE_E_BVCU_UNSUPPORTED;\r\n                }\r\n\r\n                if (jSW.CallProtoType.OCX != jSWOptions.calltype) {\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n                var payload = options.szFilePath;\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_UTILS_OPEN_FILE_IN_DIR,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _send: function (data) {\r\n                var ws = this._ws;\r\n\r\n                if (ws == null) {\r\n                    console.error('websocket is null, current calltype ' + ((jSWOptions.CheckOcx()) ? 'ocx' : 'http'));\r\n                    return jSW.RcCode.RC_CODE_E_DISCONNECTED;\r\n                }\r\n\r\n                if (!this._ws.OPEN) {\r\n                    this._ws.OPEN = 1;\r\n                }\r\n                if (ws.readyState != this._ws.OPEN) {\r\n                    console.warn('websocket not connection');\r\n                    return jSW.RcCode.RC_CODE_E_DISCONNECTED;\r\n                }\r\n\r\n                if (this._bLogout) {\r\n                    return jSW.RcCode.RC_CODE_E_BVCU_DISCONNECTED;\r\n                }\r\n\r\n                try {\r\n                    ws.send(data);\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                } catch (e) {\r\n                    return jSW.RcCode.RC_CODE_E_DISCONNECTED;\r\n                }\r\n            },\r\n\r\n            /** 注册回调\r\n            swAddCallBack('login', function (sender, event, json) {\r\n                json.code、 json.request、json.response、json.msg\r\n            })*/\r\n            swAddCallBack: function (event, callback) {\r\n                this._callbackManager.addCallback(event, callback);\r\n\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            /*\r\n            options = {\r\n                callback: function(option, response, data){\r\n                },\r\n                tag: {\r\n                }\r\n            }\r\n            */\r\n            swGetVersion: function (options) {\r\n                if (jSWOptions.CheckHttp()) {\r\n                    var rc = jSW._InnerGetJswDependVersion(function (data) {\r\n                        if (options.callback) {\r\n                            options.callback(options, {}, {\r\n                                szversionid: data.SdkVer\r\n                            });\r\n                        } else {\r\n                            console.error(\"please check args, no callback found\");\r\n                        }\r\n                    });\r\n                    return rc;\r\n                } else {\r\n                    var request = new proto.WEBBVCU.Request();\r\n                    request.setMsgtype(proto.WEBBVCU.MSGType.WEB_GET_VERSION_INFO);\r\n                    request.setEmms(this._p_emms);\r\n\r\n                    var rc = jSWProtocol._internalSend({\r\n                        session: this,\r\n                        request: request,\r\n                        callback: options.callback,\r\n                        enforce: true\r\n                    });\r\n                    return rc;\r\n                }\r\n            },\r\n\r\n            /**登录*/\r\n            /**options: {\r\n                user: 'admin',\r\n                password: '123456'\r\n               } */\r\n            swLogin: function (poptions) {\r\n                var dft_poptions = {\r\n                    user: 'admin',\r\n                    password: '123456'\r\n                };\r\n\r\n                poptions = jSWUtils.extend({}, dft_poptions, poptions || {});\r\n                this._user = poptions.user;\r\n\r\n                var pubkeyCallback = function (options, response) {\r\n                    var tag = options.tag;\r\n                    var url = response.url;\r\n                    var request = options.request;\r\n                    {\r\n                        var session = options.session;\r\n                        session.p_options = options;\r\n                        session.p_response = response;\r\n                    }\r\n                    if (response.getCode() == jSW.RcCode.RC_CODE_S_OK) {\r\n                        var payload = response.getPayload();\r\n                        var pubkey = proto.WEBBVCU.PublicKey.deserializeBinary(payload);\r\n\r\n                        this.pubkey_d = pubkey.getD();\r\n                        this.pubkey_n = pubkey.getN();\r\n\r\n                        var session = options.session;\r\n\r\n                        // 登录\r\n                        var request = new proto.WEBBVCU.Request();\r\n                        request.setMsgtype(proto.WEBBVCU.MSGType.WEB_BVCU_LOGIN);\r\n                        request.setEmms(session._p_emms);\r\n\r\n                        var loginParam = new proto.WEBBVCU.BVCU_LOGIN();\r\n                        loginParam.setServer(session._server);\r\n                        loginParam.setPort(Number(session._port));\r\n                        loginParam.setUser(session._user);\r\n                        loginParam.setPassword(poptions.password);\r\n                        request.setPayload(loginParam.serializeBinary());\r\n\r\n                        jSWProtocol._internalSend({\r\n                            cmd: jSWProtocol.RequestHeader.login.cmd,\r\n                            session: session,\r\n                            request: request\r\n                        });\r\n\r\n                        console.log(\"login info:\" + session._server + \":\" + (session._port) + \"user\" + session._user);\r\n                    }\r\n                };\r\n\r\n                // 公钥\r\n\r\n                var request = new proto.WEBBVCU.Request();\r\n                request.setMsgtype(proto.WEBBVCU.MSGType.WEB_BVCU_GET_PUBKEY);\r\n                request.setEmms(this._p_emms);\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.pubkey.cmd,\r\n                    session: this,\r\n                    request: request,\r\n                    callback: pubkeyCallback\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /**退出*/\r\n            swLogout: function () {\r\n                // 关闭已经打开的视频通道\r\n                for (var i = 0; i < this._arr_dialog.length; i++) {\r\n                    this._arr_dialog[i].swClose();\r\n                }\r\n                // 关闭PU需要关闭的资源\r\n                for (var i = 0; i < this._arr_pu.length; i++) {\r\n                    //this._arr_pu[i]._clear();\r\n                }\r\n\r\n                this._arr_pu_index = [];\r\n                this._arr_pu.splice(0, this._arr_pu.length);\r\n                this._arr_dialog.splice(0, this._arr_dialog.length);\r\n\r\n                // 取消session、dialog保活\r\n                if (this._timer_keeplive) {\r\n                    clearInterval(this._timer_keeplive);\r\n                    this._timer_keeplive = null;\r\n                }\r\n\r\n                var param = new jSWProtocol.JsonParamNoAttach(this._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_LOGOUT);\r\n\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.logout.cmd,\r\n                    session: this,\r\n                    request: param\r\n                });\r\n\r\n                var sessionList = jSWOptions.session_list;\r\n                var session = null;\r\n                var i = 0;\r\n                for (i = 0; i < sessionList.length; i++) {\r\n                    session = sessionList[i];\r\n                    if (session == this) {\r\n                        jSWOptions.session_list.splice(i, 1);\r\n                        this._bLogout = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (this._confManager != null) {\r\n                    this._confManager._clear();\r\n                }\r\n                clearInterval(this._timer_keeplive);\r\n                this._timer_keeplive = 0;\r\n                return rc;\r\n            },\r\n\r\n            /**保活*/\r\n            swKeepLive: function () {\r\n                var keepliveCmd = jSWProtocol.RequestHeader.keeplive;\r\n\r\n                var param = new jSWProtocol.JsonParamNoAttach(this._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_KEEPALIVE);\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.keeplive.cmd,\r\n                    session: this,\r\n                    request: param\r\n                });\r\n\r\n                console.log('keeplive session: ' + this._server + ' ' + this._port);\r\n                return rc;\r\n            },\r\n\r\n            _SendRegDataWs: function () {\r\n                if (jSWOptions.CheckNotOcx()) {\r\n                    var request = new jSWProtocol.JsonParamNoAttach(this._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_REG_WEBSOCKET_DATA);\r\n                    var data = request.serializeBinary();\r\n                    var audio = jSW.DependencyMgr.GetModule(\"Audio\");\r\n                    audio.SendRegDataWs(data.buffer);\r\n                }\r\n            },\r\n\r\n            /**获取设备列表*/\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'pulist',\r\n                        request: param,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        pulist: BVCU_PUCFG_PUChannelInfo[]\r\n                    }\r\n                },\r\n                tag: userdata,\r\n                status: 1, // 1: 在线; 2:离线; 3:全部\r\n                pagesize: 0, //每页的数量(0表示全部)\r\n                page: 0 //获取第几页, 从0开始\r\n            };*/\r\n            swGetPuList: function (options) {\r\n                var dft_options = {\r\n                    status: 3,\r\n                    pagesize: 0,\r\n                    page: 0\r\n                };\r\n\r\n                var rc = this._AutoReqSendProxy(options, dft_options, function (opts) {\r\n                    var payload = jSWProtocol.ParamPuList(opts.status, opts.pagesize, opts.page);\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_PULIST,\r\n                        target: 'CMS_',\r\n                        payload: payload,\r\n                        cmd: jSWProtocol.RequestHeader.pulist.cmd\r\n                    };\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _onShouldGetPulist: function (options) {\r\n                var dft_options = {\r\n                    status: 3,\r\n                    pagesize: 0,\r\n                    page: 0,\r\n                    sIndex: -1,\r\n                    iCount: -1\r\n                };\r\n\r\n                var rc = this._AutoReqSendProxy(options, dft_options, function (opts) {\r\n                    var payload = jSWProtocol.ParamPuList(opts.status, opts.pagesize, opts.page, options.sIndex, options.iCount);\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_PULIST,\r\n                        target: 'CMS_',\r\n                        payload: payload,\r\n                        cmd: jSWProtocol.RequestHeader.pulist.cmd\r\n                    };\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _innerNotifyIGotLoginInfo: function () {\r\n                var rc = this._AutoReqSendProxy({}, {}, function (opts) {\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_SESSION_GETPULIST\r\n                    };\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _innerOnGetCPI: function (notifycpi, bFirstLogin) {\r\n                var pulistStatus = {\r\n                    bCanGet: notifycpi.getBcanget(),\r\n                    iAlready: notifycpi.getIalreadycount(),\r\n                    iTotal: notifycpi.getItotalcount()\r\n                };\r\n                this._pulistLoadMgr.onGetCPI(pulistStatus.bCanGet, pulistStatus.iTotal, pulistStatus.iAlready);\r\n                if (bFirstLogin) {\r\n                    this._innerNotifyIGotLoginInfo();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * szpuid: String 设备ID\r\n             */\r\n            _swAsyncGetPu: function (options) {\r\n                if (!options.szpuid || options.szpuid.length == 0) {\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n                var rc = this._AutoReqSendProxy(options, dft_options, function (opts) {\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_PUINFO_BY_PUID,\r\n                        target: opts.szpuid\r\n                    };\r\n                });\r\n                console.log('async get pu list');\r\n                return rc;\r\n            },\r\n\r\n            /**\r\n             * pGA promise get args\r\n             */\r\n            _AutoReqSendProxy: function (options, dft_opts, pGA) {\r\n                if (!dft_opts) { dft_opts = {}; }\r\n                var rc = jSW.RcCode.RC_CODE_E_FAIL;\r\n                options = jSWUtils.extend({}, dft_opts, options || {});\r\n                var dft_args = {\r\n                    session: this,\r\n                    msgtype: -1,\r\n                    target: \"\",\r\n                    targetIndex: -1,\r\n                    payload: null,\r\n                    cmd: \"\",\r\n                    callback: options.callback ? options.callback : null,\r\n                    tag: options.tag ? options.tag : null\r\n                };\r\n                var des_args = pGA.bind(this)(options);\r\n                des_args = jSWUtils.extend({}, dft_args, des_args || {});\r\n                rc = jSWProtocol.SendRequest(des_args);\r\n                return rc;\r\n            },\r\n\r\n            /**查询NRU上的文件*/\r\n            swSearch: function (options) {\r\n                return this._searchFile(options, \"NRU_\");\r\n            },\r\n\r\n            /*\r\n             *   options = {\r\n                    szNRUID: NRUID,\r\n                    remoteFilePath: 远程文件路径,\r\n                    localFilePath: 本地路径,\r\n                    callback: function(options, response){\r\n                    },\r\n                    tag: Object\r\n                }\r\n             */\r\n            swDownFileFromNru: function (options) {\r\n                if (jSWOptions.calltype != jSW.CallProtoType.OCX) {\r\n                    alert('Just OCX support!!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var dft_options = {\r\n                    pcallback: null\r\n                }\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var rc = this._swDownFileSearch({\r\n                    szRFP: options.remoteFilePath,\r\n                    szLFD: options.localFileDir,\r\n                    szTargetId: options.szNRUID,\r\n                    msgType: proto.WEBBVCU.MSGType.WEB_BVCU_DOWN_FILE_ONNRU,\r\n                    callback: options.callback,\r\n                    callbackrelay: options.pcallback,\r\n                    tag: options.tag\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /**\r\n            var options = {\r\n                stSearchInfo: {\r\n                    iType: 1(BVCU_SEARCH_TYPE_FILE),\r\n                    iPostition: 0,\r\n                    iCount: 50\r\n                },\r\n                stFilter: {\r\n                    szPUID: 'PU_00002710',\r\n                    iChannelIndex: -1,\r\n                    iFileSizeMin: 0,\r\n                    iFileSizeMax: 0,\r\n                    iRecordType: 0,\r\n                    iFileType: 0,   BVCU_STORAGE_FILE_TYPE_ALL = 0(不限定文件类型),\r\n                                    BVCU_STORAGE_FILE_TYPE_RECORD = 1 << 0(录像文件)\r\n                                    BVCU_STORAGE_FILE_TYPE_CAPTURE = 1 << 1(图片文件)\r\n                                    BVCU_STORAGE_FILE_TYPE_GPS = 1 << 2(固件文件)\r\n                                    BVCU_STORAGE_FILE_TYPE_AUDIO = 1 << 3(音频文件)\r\n                                    BVCU_STORAGE_FILE_TYPE_FIRMWARE = 1 << 8(GPS文件, 暂时不支持)\r\n                    iTimeBegin: 0,\r\n                    iTimeEnd: 0\r\n                },\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'login',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        pulist: BVCU_PUCFG_PUChannelInfo[]\r\n                    }\r\n                },\r\n                tag: userdata,\r\n            };*/\r\n            _searchFile: function (options, szTarget) {\r\n                var dft_options = {\r\n                    stSearchInfo: {\r\n                        iType: 1,\r\n                        iPostition: 0,\r\n                        iCount: 50\r\n                    },\r\n                    stFilter: {\r\n                        szPUID: '',\r\n                        iChannelIndex: -1,\r\n                        iFileType: 0,\r\n                        iTimeCondition: 0,\r\n                        iTimeBegin: 0,\r\n                        iTimeEnd: 0,\r\n                        iFileSizeMin: 0,\r\n                        iFileSizeMax: 0,\r\n                        iRecordType: 0,\r\n                        szDesc1: \"\",\r\n                        szDesc2: \"\"\r\n                    },\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n                options.stSearchInfo = jSWUtils.extend({}, dft_options.stSearchInfo, options.stSearchInfo || {});\r\n                options.stFilter = jSWUtils.extend({}, dft_options.stFilter, options.stFilter || {});\r\n\r\n                var payload = jSWProtocol.ParamSearchList(options.stSearchInfo, options.stFilter);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    cmd: jSWProtocol.RequestHeader.searchlist.cmd,\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_SEARCH_LIST,\r\n                    target: szTarget,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n\r\n            swDelRecordFileFilter: function (options) {\r\n                var dft_options = {\r\n                    stFilter: {\r\n                        szPUID: '',\r\n                        iChannelIndex: -1,\r\n                        iFileType: 0,\r\n                        iTimeCondition: 0,\r\n                        iTimeBegin: 0,\r\n                        iTimeEnd: 0,\r\n                        iFileSizeMin: 0,\r\n                        iFileSizeMax: 0,\r\n                        iRecordType: 0,\r\n                        szDesc1: \"\",\r\n                        szDesc2: \"\"\r\n                    },\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n                options.stFilter = jSWUtils.extend({}, dft_options.stFilter, options.stFilter || {});\r\n\r\n                var fun = function (pstFilter) {\r\n                    var search = new proto.BVCU.NRUConfig.DeleteFileReq();\r\n                    var filefilter = new proto.BVCU.Search.Search_FileFilter();\r\n\r\n                    filefilter.setSzpuid(pstFilter.szPUID);\r\n                    filefilter.setIchannelindex(pstFilter.iChannelindex);\r\n                    filefilter.setIfiletype(pstFilter.iFileType);\r\n                    filefilter.setItimebegin(pstFilter.iTimeBegin);\r\n                    filefilter.setItimeend(pstFilter.iTimeEnd);\r\n                    filefilter.setIfilesizemin(pstFilter.iFileSizeMin);\r\n                    filefilter.setIfilesizemax(pstFilter.iFileSizeMax);\r\n                    filefilter.setIrecordtype(pstFilter.iRecordType);\r\n                    filefilter.setSzdesc1(pstFilter.szDesc1);\r\n                    filefilter.setSzdesc2(pstFilter.szDesc2);\r\n                    filefilter.setItimecondition(pstFilter.iTimeCondition);\r\n\r\n                    search.setItype(1); /** 1: BVCU_NRU_DELFILE_TYPE_FILES 2: BVCU_NRU_DELFILE_TYPE_FILEIDS */\r\n                    search.setIcount(1)\r\n                    search.addStfilefilters(filefilter);\r\n                    return search;\r\n                }\r\n\r\n                var payload = fun(options.stFilter);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    cmd: jSWProtocol.RequestHeader.recordfile_del.cmd,\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_RECORDFILE_DELETE,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swDelRecordFileFilterId: function (options) {\r\n                var dft_options = {\r\n                    stFileIds: [], /** [{'nruid': 'xxx', 'recordid': 123}, {'nruid': 'xxx', 'recordid': 124}] */\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n                if (!options.stFileIds) {\r\n                    options.stFileIds = [];\r\n                }\r\n\r\n                var fun = function (fileIds) {\r\n                    var search = new proto.BVCU.NRUConfig.DeleteFileReq();\r\n                    search.setItype(2); /** 1: BVCU_NRU_DELFILE_TYPE_FILES 2: BVCU_NRU_DELFILE_TYPE_FILEIDS */\r\n\r\n                    for (var i = 0; i < fileIds.length; i++) {\r\n                        var fileid = new proto.BVCU.NRUConfig.FileID();\r\n                        fileid.setSzsourceid(fileIds[i].nruid)\r\n                        fileid.addIrecordid(fileIds[i].recordid);\r\n\r\n                        search.addStfileidfilters(fileid);\r\n                    }\r\n\r\n                    return search;\r\n                };\r\n\r\n                var payload = fun(options.stFileIds);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    cmd: jSWProtocol.RequestHeader.recordfile_del.cmd,\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_RECORDFILE_DELETE,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n\r\n            /** 检索设备上的文件*/\r\n            swSearchFileOnPu: function (options) {\r\n                if (options == null || options.stFilter == null || options.stFilter.szPUID == null || options.stFilter.szPUID.length == 0) {\r\n                    console.warn('bad args, please check!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n                var rc = this._searchFile(options, options.stFilter.szPUID);\r\n                return rc;\r\n            },\r\n\r\n            /** 从设备上下载文件\r\n                options = {\r\n                    szPUID: 设备ID,\r\n                    remoteFilePath: 远程文件路径,\r\n                    localFilePath: 本地路径,\r\n                    callback: function(){},\r\n                    pcallback: function(){}\r\n                    tag: Object\r\n                }\r\n            */\r\n            swDownFileFromPu: function (options) {\r\n                if (jSWOptions.calltype != jSW.CallProtoType.OCX) {\r\n                    alert('Just OCX support!!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var dft_options = {\r\n                    pcallback: null\r\n                }\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var rc = this._swDownFileSearch({\r\n                    szRFP: options.remoteFilePath,\r\n                    szLFD: options.localFileDir,\r\n                    szTargetId: options.szPUID,\r\n                    msgType: proto.WEBBVCU.MSGType.WEB_BVCU_DOWN_FILE_ONPU,\r\n                    callback: options.callback,\r\n                    callbackrelay: options.pcallback,\r\n                    tag: options.tag\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /**\r\n             * ocx下载文件 \r\n             * options: {\r\n             *      szRFP, \r\n             *      szLFD, \r\n             *      szTargetId, \r\n             *      callback,\r\n             *      msgType, \r\n             *      tag\r\n             * }\r\n             */\r\n            _swDownFileSearch: function (options) {\r\n                if (jSWOptions.calltype != jSW.CallProtoType.OCX) {\r\n                    alert('Just OCX support!!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                if (options == null || options.szTargetId == null || options.szTargetId.length == 0\r\n                    || options.szRFP == null || options.szRFP.length == 0 || options.szLFD == null || options.szLFD.length == 0) {\r\n                    console.warn('bad args, please check!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var payload = new proto.WEBBVCU.DownFileFromPu();\r\n\r\n                var rfp = options.szRFP;\r\n                if (options.szTargetId.indexOf(\"NRU\") == 0) {\r\n                    rfp = options.szRFP.replace(/\\//g, \"\\\\\");\r\n                }\r\n                payload.setSzremotefilepathname(rfp);\r\n                payload.setSzlocalfilepathname(options.szLFD);\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: options.msgType,\r\n                    target: options.szTargetId,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    callbackrelay: options.callbackrelay,\r\n                    tag: options.tag\r\n                });\r\n                return rc;\r\n            },\r\n\r\n\r\n            /**\r\n             * options: {\r\n             *  stSearchInfo: BVCU_SearchInfo,\r\n             *  iTimeBegin: 录像文件开始时刻，从1970-01-01 00:00:00 +0000 (UTC)开始的秒数,\r\n             *  iTimeEnd:   录像文件结束时刻，从1970-01-01 00:00:00 +0000 (utc)开始的秒数,\r\n             *  szPuid: 设备名称,\r\n             *  callback: functions(options, response, data){\r\n             *      data: OptionsSearchResult\r\n             *  }\r\n             *  tag: Object\r\n             * }\r\n             */\r\n            swSearchGpsV2: function (options) {\r\n                var stFilter = new jSWProtocol.BVCU_Search_FileFilter(options.szPuid, -1, options.iTimeBegin, options.iTimeEnd, 4, 0, 0, 0);\r\n                var rc = this.swSearch({\r\n                    stSearchInfo: options.stSearchInfo,\r\n                    stFilter: stFilter,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options=\r\n                {\r\n                    szNruId: nruid,\r\n                    szFilePath: swSearchGps2获取的Gps文件路径,\r\n                    callback: function(options, response, data){\r\n                        data:{\r\n                            fileinfo:{\r\n                                szFilePath: String,\r\n                                szFileName: String,\r\n                                iTime: Number,\r\n                                iFileSize: Number \r\n                            },\r\n                            data: String GPS文件\r\n                        }\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swGetGpsRecordDataV2: function (options) {\r\n                var rc = this._swGetGpsRecordData(options, proto.WEBBVCU.MSGType.WEB_BVCU_DOWNLOAD_GPS_RECORD_SERVERC);\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options=\r\n                {\r\n                    szNruId: nruid,\r\n                    iTimeBegin: 录像文件开始时刻，从1970-01-01 00:00:00 +0000 (UTC)开始的微秒数,\r\n                    iTimeEnd:   录像文件结束时刻，从1970-01-01 00:00:00 +0000 (utc)开始的微秒数\r\n                    szPuid: 设备名称,\r\n                    callback: function(options, response, data)\r\n                    {\r\n                        data:[\r\n                            {\r\n                                szFilePath: String,\r\n                                szFileName: String,\r\n                                iTime: Number,\r\n                                iFileSize: Number \r\n                            },.....\r\n                        ]\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swSearchGps: function (options) {\r\n\r\n                if (jSWOptions.calltype != jSW.CallProtoType.OCX) {\r\n                    alert('Just OCX support!!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                if (options.szNruId == null || options.szNruId.length == 0) {\r\n                    console.warn('nruid should be invalid!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                if (options.iTimeBegin == null || options.iTimeEnd == null) {\r\n                    console.warn('time slice should be invalid!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var _pu = this._swGetPu(options.szPuid);\r\n                if (_pu == null || options.szPuid == null || options.szPuid.length == 0) {\r\n                    console.warn('puid should be invalid!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                options.iTimeBegin = (Number)(options.iTimeBegin);\r\n                options.iTimeEnd = (Number)(options.iTimeEnd);\r\n\r\n                if (options.iTimeBegin >= options.iTimeEnd) {\r\n                    console.warn('time slice should be invalid!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var payload = new proto.WEBBVCU.RecordFileFilter();\r\n                payload.setSzpuid(options.szPuid);\r\n                payload.setItimebegin(options.iTimeBegin);\r\n                payload.setItimeend(options.iTimeEnd);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_GPS_RECORD,\r\n                    target: options.szNruId,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options=\r\n                {\r\n                    szNruId: nruid,\r\n                    szFilePath: swSearchGps获取的Gps文件路径,\r\n                    callback: function(options, response, data){\r\n                        data:{\r\n                            fileinfo:{\r\n                                szFilePath: String,\r\n                                szFileName: String,\r\n                                iTime: Number,\r\n                                iFileSize: Number \r\n                            },\r\n                            data: String GPS文件\r\n                        }\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swGetGpsRecordData: function (options) {\r\n                var rc = this._swGetGpsRecordData(options, proto.WEBBVCU.MSGType.WEB_BVCU_DOWNLOAD_GPS_RECORD);\r\n                return rc;\r\n            },\r\n\r\n            _swGetGpsRecordData: function (options, iMsgType) {\r\n                if (jSWOptions.CheckNotOcx()) {\r\n                    alert('Just OCX support!!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n\r\n                if (options.szNruId == null || options.szNruId.length == 0) {\r\n                    console.warn('nruid should be invalid!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                if (options.szFilePath == null || options.szFilePath.length == 0) {\r\n                    console.warn('file path should be invalid!');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var payload = new proto.WEBBVCU.FTPFileInfo();\r\n                var rgpsPath = options.szFilePath.replace(/\\//g, \"\\\\\");\r\n                payload.setSzfilepath(jSWUtils.string2Uint8Array(rgpsPath));\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: iMsgType,\r\n                    target: options.szNruId,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    callback: function(sender, response, data){\r\n                        data:{\r\n                            szid: nString,\r\n                            szname: String,\r\n                            istoragemedia: Number,\r\n                            ionlinestatus: Number\r\n                        }\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swGetNruList: function (options) {\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_NRU_LIST,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /** 查询录像回放 */\r\n            swGetRecordPlayer: function (dialogId) {\r\n\r\n                for (var i = 0; i < this._arr_record_play.length; i++) {\r\n                    player = this._arr_record_play[i];\r\n                    if (player && player._dialog_id == dialogId) {\r\n                        return player;\r\n                    }\r\n                }\r\n\r\n                console.log('swGetRecordPlayer not found, dialogId: ' + dialogId)\r\n                return null;\r\n            },\r\n\r\n            /** 查询录像回放 */\r\n            _swGetRecordPlayer: function (playerId) {\r\n\r\n                for (var i = 0; i < this._arr_record_play.length; i++) {\r\n                    player = this._arr_record_play[i];\r\n                    if (player && player._player_id == playerId) {\r\n                        return player;\r\n                    }\r\n                }\r\n\r\n                console.log('_swGetRecordPlayer not found, playerId: ' + playerId)\r\n                return null;\r\n            },\r\n\r\n            /** 删除 */\r\n            _swDelRecordPlayer: function (dialogId) {\r\n                for (var i = 0; i < this._arr_record_play.length; i++) {\r\n                    player = this._arr_record_play[i];\r\n                    if (player && player._dialog_id == dialogId) {\r\n                        this._arr_record_play[i] = null;\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * 录像回放控制*/\r\n            swRecordPlayCtrl: function (options) {\r\n                var dft_options = {\r\n                    cmdtype: 'PLAY', // \"PLAY\"、\"PAUSE\"、\"TEARDOWN\"、\"STEP\"\r\n                    dialogId: 0,\r\n                    ntp_begin: -1,\r\n                    ntp_end: -1,\r\n                    scale: -1,\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var payload = new proto.WEBBVCU.MSG_WEB_BVCU_RECORD_PLAY_CRTL();\r\n                {\r\n                    payload.setCmdtype(options.cmdtype);\r\n                    payload.setDialogid(options.dialogId);\r\n                    payload.setNtpBegin(options.ntp_begin);\r\n                    payload.setNtpEnd(options.ntp_end);\r\n                    payload.setScale(options.scale);\r\n                }\r\n\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_RECORD_PLAY_CRTL,\r\n                    cmd: jSWProtocol.RequestHeader.recordplay.play.cmd,\r\n                    target: options.dialogId,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n\r\n            },\r\n\r\n            /* 录像回放\r\n                options = {\r\n                    url: null,\r\n                    nru: null,\r\n                    video: true, // 是否播放video\r\n                    audio: true, // 是否播放audio\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n            */\r\n            swRecordPlay: function (options) {\r\n                var dft_options = {\r\n                    url: null,\r\n                    nru: null,\r\n                    video: true,\r\n                    audio: true,\r\n                    callback: null,\r\n                    div: null,\r\n                    time_begin: -1,\r\n                    time_end: -1,\r\n                    bWindowless: false\r\n                };\r\n\r\n                if (jSWOptions.calltype != jSW.CallProtoType.OCX) {\r\n                    alert('Just support ocx Video!!');\r\n                    return jSW.RcCode.RC_CODE_E_BVCU_BADSTATE;\r\n                }\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n                if (options.url == null || options.url.length == 0) {\r\n                    console.error('url error: ' + options.url);\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var player_bar = null;\r\n                if (typeof options.div === \"string\") {\r\n                    options.div = document.getElementById(options.div);\r\n                }\r\n                var div = options.div;\r\n                if (null == div) {\r\n                    console.error('no have div');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                if (typeof (div.bv_uuid) == \"undefined\") {\r\n                    div.bv_uuid = jSWUtils.generateUUID();\r\n                }\r\n\r\n                // 创建 ocx播放 实例\r\n                var playObject = null;\r\n                {\r\n                    var playObjectId = div.bv_uuid + '_0077554';\r\n                    /**ID附属*/\r\n                    var myTempDivId = playObjectId + \"tempdiv\";\r\n                    playObject = document.getElementById(playObjectId);\r\n                    if (playObject == null) {\r\n                        var mydiv = document.getElementById(myTempDivId);\r\n                        var bardiv = null;\r\n                        if (mydiv == null) {\r\n                            mydiv = document.createElement(\"div\");\r\n                            mydiv.id = playObjectId + \"tempdiv\";\r\n                            mydiv.style.width = '100%';\r\n                            mydiv.style.height = 'calc(100% - 20px)';\r\n\r\n                            bardiv = document.createElement('div');\r\n                            bardiv.id = playObjectId + \"tempdiv_playbar\";\r\n                            bardiv.style.width = '100%';\r\n                            bardiv.style.height = '20px'\r\n                            bardiv.style.backgroundColor = '#555';\r\n                            mydiv.databardiv = bardiv;\r\n                        }\r\n                        mydiv.style.display = 'block';\r\n                        bardiv = mydiv.databardiv;\r\n                        div.appendChild(mydiv);\r\n                        div.appendChild(bardiv);\r\n                        {\r\n                            player_bar = new jQuery.TigerPlayer();\r\n                            player_bar.addBar($('#' + bardiv.id), 1000 * 60, function (player) {\r\n                                player.swPlay();\r\n                            }, function (player) {\r\n                                player.swPause();\r\n                            }, function (player) {\r\n                                player.swClose();\r\n                            }, function (player, offset_ms) {\r\n                                player.swJump({\r\n                                    ntp_begin: offset_ms\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        playObject = document.createElement('object');\r\n                        playObject.id = playObjectId;\r\n                        //playObject.classid = \"clsid:51DF1D91-DA4E-47DA-A5BE-84A96ADD2425\";\r\n                        if (options.bWindowless) {\r\n                            playObject.classid = 'clsid:0c85b239-904a-4adf-8424-f1928b38f12f';\r\n                        } else {\r\n                            playObject.classid = \"clsid:CDE6C639-4BA8-4A09-81EB-DCE76A61FE98\";\r\n                        }\r\n                        playObject.style.width = '100%';\r\n                        playObject.style.height = '100%';\r\n                        playObject.style.display = 'block';\r\n                        playObject.tag = this;\r\n                        mydiv.appendChild(playObject);\r\n                        isNeedDelay = true;\r\n\r\n                        var oScript = document.createElement(\"script\");\r\n                        oScript.type = \"text/javascript\";\r\n                        oScript.setAttribute('for', playObjectId);\r\n                        oScript.setAttribute('event', 'OnHwndEvent(hwnd, ieventtype, pParam)');\r\n                        oScript.text = 'jSW._swOcxPlayerOnEvent(ieventtype, this.tag);';\r\n                        document.body.appendChild(oScript);\r\n                        playObject.data_player_bar = player_bar;\r\n                    } else {\r\n                        player_bar = playObject.data_player_bar;\r\n                        console.warn('have element : ' + playObjectId)\r\n                    }\r\n                }\r\n\r\n                function sendCmd(p_session, p_options, p_playObject, parentDiv, p_player_bar) {\r\n                    var player_id = jSWUtils.generateUUID();\r\n\r\n                    var payload = new proto.WEBBVCU.MSG_WEB_BVCU_RECORD_PLAY();\r\n                    payload.setFilepath(p_options.url);\r\n                    payload.setNruid(p_options.nru);\r\n                    payload.setVideo(p_options.video ? 1 : 0);\r\n                    payload.setAudio(p_options.audio ? 1 : 0);\r\n                    payload.setBwindowless(p_options.bWindowless);\r\n                    payload.setStarttime(0);\r\n                    payload.setEndtime(-1);\r\n                    payload.setHwnd(0);\r\n                    payload.setAutoplay(0);\r\n                    payload.setPlayerId(player_id);\r\n\r\n                    if (p_playObject != null) {\r\n                        payload.setHwnd(p_playObject.GetWMHwnd());\r\n                        p_playObject.style.display = 'block';\r\n                    } else {\r\n                        console.error('p_playObject is null')\r\n                    }\r\n\r\n                    var rc = jSWProtocol.SendRequest({\r\n                        session: p_session,\r\n                        payload: payload,\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_RECORD_PLAY,\r\n                        callback: p_options.callback,\r\n                        tag: p_options.tag\r\n                    });\r\n\r\n                    if (rc == jSW.RcCode.RC_CODE_S_OK) {\r\n                        var player = new jSW.SWPlayer(p_session, {\r\n                            playerId: player_id,\r\n                            nruId: p_options.nru,\r\n                            file: p_options.url,\r\n                            dialogId: -1,\r\n                            parentDiv: parentDiv,\r\n                            time_begin: p_options.time_begin,\r\n                            time_end: p_options.time_end,\r\n                            bar: p_player_bar,\r\n                            callback: p_options.closecallback,\r\n                            tag: p_options.closetag\r\n                        });\r\n\r\n                        p_session._arr_record_play.push(player)\r\n                    }\r\n                }\r\n\r\n                var session = this;\r\n                // ocx创建实例后，要稍等，不然没有句柄\r\n                setTimeout(function () { sendCmd(session, options, playObject, div, player_bar); }, 500);\r\n\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            /**点播视频*/\r\n            /**\r\n            var options = {\r\n                url: 'video url',\r\n                tag: userdata,\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'login',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        pulist: BVCU_PUCFG_PUChannelInfo[]\r\n                    }\r\n                },\r\n            };*/\r\n            swVodVideo: function (options) {\r\n                var dft_options = {\r\n                    url: null,\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n\r\n                if (jSWOptions.calltype == jSW.CallProtoType.OCX) {\r\n                    alert('Just Http support Vod Video!!');\r\n                    return jSW.RcCode.RC_CODE_E_BVCU_BADSTATE;\r\n                }\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n                if (options.url == null || options.url.length == 0) {\r\n                    console.error('url error: ' + options.url);\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var div = options.tag;\r\n                if (null == div) {\r\n                    console.error('no have div');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                if (typeof (div.bv_uuid) == \"undefined\") { div.bv_uuid = jSWUtils.generateUUID(); }\r\n\r\n                var playObjectId = div.bv_uuid + '_0077553'; /**ID附属*/\r\n                playObject = document.getElementById(playObjectId);\r\n                if (playObject == null) {\r\n                    playObject = document.createElement('VIDEO');\r\n                    playObject.setAttribute('id', playObjectId);\r\n                    playObject.setAttribute('class', 'video-js vjs-default-skin vjs-big-play-centered');\r\n                    // playObject.setAttribute('poster', '/js/my_video_poster.png');\r\n                    playObject.style.width = '100%';\r\n                    playObject.style.height = '100%';\r\n                    playObject.style.display = 'block';\r\n\r\n                    div.appendChild(playObject);\r\n                }\r\n\r\n                var index = options.url.indexOf(jSWOptions.http);\r\n                if (-1 != index) {\r\n                    options.url = options.url.substr(jSWOptions.http.length + 1); /** +1 是去除'/' */\r\n                }\r\n\r\n                var vodCmd = jSWProtocol.RequestHeader.vod;\r\n\r\n                var param = new jSWProtocol.JsonParamCommand(this._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_SET_VOD,\r\n                    new jSWProtocol.BVCU_Command('', -1, null));\r\n\r\n                param.setPayload(jSWUtils.string2Uint8Array(options.url));\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    session: this,\r\n                    cmd: vodCmd.cmd,\r\n                    request: param,\r\n                    callback: options.callback,\r\n                    opt: options,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /**var options = {\r\n                div: 'div_id', // div or div id\r\n                url: 'video url',\r\n                callback: function(options, response) {\r\n                    options = options;\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request\r\n                    }\r\n                }\r\n            };*/\r\n            swVodVideoEx: function (options) {\r\n\r\n                var dft_options = {\r\n                    callback: null,\r\n                    div: '',\r\n                    url: null\r\n                };\r\n\r\n                var uoptions = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                if (uoptions.url == null || uoptions.url.length == 0) {\r\n                    console.error('url error: ' + uoptions.url);\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                if (typeof uoptions.div === \"string\") {\r\n                    uoptions.div = document.getElementById(uoptions.div);\r\n                    if (uoptions.div == null) {\r\n                        console.error('no have div');\r\n                        return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                    }\r\n                }\r\n\r\n                var rc = this.swVodVideo({\r\n                    url: uoptions.url,\r\n                    tag: uoptions.div,\r\n                    useoptions: uoptions,\r\n                    callback: function (options, response) {\r\n                        var tag = options.tag;\r\n                        var url = response.url;\r\n                        var request = options.request;\r\n\r\n                        if (jSW.RcCode.RC_CODE_S_OK == response.getCode()) {\r\n\r\n                            var div = tag;\r\n                            var playObjectId = div.bv_uuid + '_0077553'; /**ID附属*/\r\n                            if (document.getElementById(playObjectId) == null) {\r\n                                console.error('not have player');\r\n                                return;\r\n                            }\r\n\r\n                            var player = videojs(playObjectId, { controlBar: true, controls: true }, function () {\r\n                                strArr = url.split('.')\r\n                                if (strArr.length == 2) {\r\n                                    strUrlFileType = strArr[1];\r\n                                    if (strUrlFileType == 'mp4') {\r\n                                        this.src({ type: 'video/mp4', src: jSWOptions.http + \"/\" + url });\r\n                                    } else if (strUrlFileType == 'm3u8') {\r\n                                        this.src({ type: 'application/vnd.apple.mpegurl', src: jSWOptions.http + \"/\" + url });\r\n                                    }\r\n                                }\r\n\r\n                                this.play();\r\n                            });\r\n                        }\r\n\r\n                        var orgopt = options.opt;\r\n                        if (orgopt && orgopt.useoptions) {\r\n                            if (typeof orgopt.useoptions.callback === 'function') {\r\n                                orgopt.useoptions.callback(orgopt.useoptions, response);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swGetConfManager: function () {\r\n                return this._confManager;\r\n            },\r\n\r\n            swGetUserManager: function () {\r\n                return this._userManager;\r\n            },\r\n\r\n            /**查询PU*/\r\n            swGetPu: function (puid) {\r\n                var despu = this._swGetPu(puid);\r\n                if (!despu) {\r\n                    this._swAsyncGetPu({ szpuid: puid });\r\n                }\r\n                return despu;\r\n            },\r\n\r\n            _swGetPu: function (puid) {\r\n                var index = this._swGetPuFromArr(puid, this._arr_pu);\r\n                if (index == -1) {\r\n                    return null;\r\n                }\r\n                return this._arr_pu[index];\r\n            },\r\n\r\n            _swGetPuFromArr: function (puid, arr) {\r\n                var i = 0;\r\n                for (; i < arr.length; i++) {\r\n                    if (arr[i]._id_pu == puid) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            },\r\n            _swCheckPuArr: function (pu) {\r\n                var ioffline = this._swGetPuFromArr(pu._info_pu.id, this._arr_pu_offline);\r\n                var ionline = this._swGetPuFromArr(pu._info_pu.id, this._arr_pu_online);\r\n                if (0 == pu._info_pu.onlinestatus) {\r\n                    if (-1 == ioffline && -1 != ionline) {\r\n                        this._arr_pu_online.splice(ionline, 1);\r\n                        this._arr_pu_offline.push(pu);\r\n                    }\r\n                } else if (1 == pu._info_pu.onlinestatus) {\r\n                    if (-1 != ioffline && -1 == ionline) {\r\n                        this._arr_pu_offline.splice(ionline, 1);\r\n                        this._arr_pu_online.push(pu);\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**查询通道*/\r\n            swGetPuChanel: function (puid, chanelid) {\r\n                var pu = this._swGetPu(puid);\r\n                if (pu) {\r\n                    return pu.swGetChanel(chanelid);\r\n                }\r\n\r\n                return null;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    puid: puid,\r\n                    callback: function(sender, response, data){\r\n                        data = {\r\n                            szID: 设备ID,\r\n                            szManufacturer: 制造商名字,\r\n                            szProductName: 产品名,\r\n                            szSoftwareVersion: 软件版本,\r\n                            szHardwareVersion: 硬件版本,\r\n                            iPUType: BVCU_PUTYPE_*,\r\n                            languages: 支持的语言列表,\r\n                            languageSelected: 当前使用的语言索引,\r\n                            Ilanguageindex: deviceinfo.getIlanguageindex(),\r\n                            szName: 名字。可写,\r\n                            iWIFICount: WIFI数目,\r\n                            iRadioCount: 无线模块数目,\r\n                            iChannelCount: 音视频通道数,\r\n                            iVideoInCount: 视频输入数,\r\n                            iAudioInCount: 音频输入数,\r\n                            iAudioOutCount: 音频输出数,\r\n                            iPTZCount: PTZ数,\r\n                            iSerialPortCount: 串口数,\r\n                            iAlertInCount:   报警输入数,\r\n                            iAlertOutCount:  报警输出数,\r\n                            iStorageCount:   存储设备数,\r\n                            iGPSCount:       GPS设备数,\r\n                            bSupportSMS:     是否支持手机短信功能。0-不支持，1-支持,\r\n                            iPresetCount: 支持的PTZ预置点数目,\r\n                            iCruiseCount: 支持的PTZ巡航点数目,\r\n                            iAlarmLinkActionCount: 支持的报警联动数目,\r\n                            iLongitude: 经度,东经是正值，西经负值，单位1/10000000度。大于180度或小于-180度表示无效值\r\n                            iLatitude: 纬度,纬度，北纬是正值，南纬是负值，单位1/10000000度。大于180度或小于-180度表示无效值\r\n                            szBluetoothAddr: 设备蓝牙地址，空字符表示设备没有蓝牙模块（不支持蓝牙），格式：ff:ff:ff:ff:ff:ff\r\n                        };\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swGetPuDeviceInfo: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_DEVICEINFO,\r\n                    jSWProtocol.RequestHeader.pucfg.getpudeviceinfo.cmd, this, null);\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    puid: puid,\r\n                    ilanguage: language index,\r\n                    name: pu name,\r\n                    callback: function(sender, response, data){\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swSetPuDeviceInfo: function (option) {\r\n\r\n                dft_poptions = {\r\n                    ilanguage: 1,\r\n                    name: \"default name\"\r\n                };\r\n\r\n                option = jSWUtils.extend({}, dft_poptions, option || {});\r\n\r\n                var payload = new proto.BVCU.PUConfig.DeviceInfo();\r\n\r\n                payload.setSzid(option.puid);\r\n                payload.setIlanguageindex(option.ilanguage);\r\n                payload.setSzname(option.name);\r\n                payload.setIputype(0);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_DEVICEINFO,\r\n                    cmd: jSWProtocol.RequestHeader.pucfg.getpudeviceinfo.cmd,\r\n                    target: option.puid,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swGetPuDeviceTime: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_DEVICETIME,\r\n                                jSWProtocol.RequestHeader.pucfg.getpudevicetime.cmd, this, null);\r\n            },\r\n\r\n            swGetPuEthernet: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_ETHERNET,\r\n                                jSWProtocol.RequestHeader.pucfg.getpuethernet.cmd, this, null);\r\n            },\r\n\r\n            swGetPuRadioNetwork: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_RADIONETWORK,\r\n                    jSWProtocol.RequestHeader.pucfg.getpuradionetwork.cmd, this, null);\r\n            },\r\n\r\n            swGetPuWifi: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_WIFI,\r\n                    jSWProtocol.RequestHeader.pucfg.getpuwifi.cmd, this, null);\r\n            },\r\n\r\n            swGetPuPower: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_POWER,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuPower.cmd, this, null);\r\n            },\r\n\r\n            swGetPuOnlineControl: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_ONLINECONTROL,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuOnlineControl.cmd, this, null);\r\n            },\r\n\r\n            swGetPuUpdateStatus: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_UPDATESTATUS,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuUpdateStatus.cmd, this, null);\r\n            },\r\n\r\n            swGetPuLinkactionList: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_LINKACTION_LIST,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuLinkactionList.cmd, this, null);\r\n            },\r\n\r\n            swGetLinkActionInfo: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_LINKACTION_LIST,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuLinkactionList.cmd, this, options.linkactionbaseinfo);\r\n            },\r\n\r\n            swGetPuCarInfo: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_CARINFO,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuCarInfo.cmd, this, null);\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    puid: pu.puid,\r\n                    callback: function(sender, response, data){\r\n                        data = {\r\n                            szDevModel: 设备型号.  只读,\r\n                            szIMEI_MEID: 设备IMEI/MEID号.  只读,\r\n                            szSerial: 产品序号，不可为空. 可写,\r\n                            szUserNo: 使用者警号，不可为空。可写,\r\n                            szUserName: 使用者姓名。可写,\r\n                            szUserDescribe: 使用者描述（可用于备注职位）。 可写,\r\n                            szUnitNo: 使用者单位编号。 可写,\r\n                            szUnitName: 使用者单位名称。 可写,\r\n                            szDefaultConference: 默认发言会议ID。注意可以通过会议管理对象命令获取会议名称，并显示选择会议列表。 可写,\r\n                            szCurrentConference: 当前发言会议ID。 只读\r\n                        };\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swGetPuZfyInfo: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_ZFYINFO,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuZfyInfo.cmd, this, null);\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    puid:                 pu.puid,\r\n                    serial:              \"default\",\r\n                    userno:             \"default\",\r\n                    userame:             \"default\",\r\n                    description:           \"default\",\r\n                    unitno:             \"default\",\r\n                    unitname:            \"default\",\r\n                    defaultconference: \"\",\r\n                    callback: function(sender, response, data){\r\n                        response.emms.code == jSW.Rc\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swSetPuZfyInfo: function (options) {\r\n\r\n                dft_poptions = {\r\n                    serial: \"default\",\r\n                    userno: \"default\",\r\n                    userame: \"default\",\r\n                    description: \"default\",\r\n                    unitno: \"default\",\r\n                    unitname: \"default\",\r\n                    defaultconference: \"\"\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_poptions, options || {});\r\n\r\n                var payload = new proto.BVCU.PUConfig.ZFYInfo();\r\n\r\n                payload.setSzserial(options.serial);\r\n                payload.setSzuserno(options.userno);\r\n                payload.setSzusername(options.userame);\r\n                payload.setSzuserdescribe(options.description);\r\n                payload.setSzunitno(options.unitno);\r\n                payload.setSzunitname(options.unitname);\r\n                payload.setSzdefaultconference(options.defaultconference);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_ZFYINFO,\r\n                    cmd: jSWProtocol.RequestHeader.pucfg.setPuZfyInfo.cmd,\r\n                    target: options.puid,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swGetPuServers: function (options) {\r\n                return this._swGetPuOperation(options, proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_SERVERS,\r\n                    jSWProtocol.RequestHeader.pucfg.getPuServers.cmd, this, null);\r\n            },\r\n\r\n            _swGetPuOperation: function (options, msgType, cmd, session, data) {\r\n                var param = jSWProtocol.JsonParamCommand(this._p_emms,\r\n                   msgType,\r\n                   jSWProtocol.BVCU_Command(options.puid, -1, data));\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: cmd,\r\n                    session: session,\r\n                    request: param,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swLogQuery: function (options) {\r\n                var rc = jSW.DependencyMgr.cmdParseInJect(function () {\r\n                    this._swLogQuery(options);\r\n                }, this);\r\n                return rc;\r\n            },\r\n            /*\r\n                options={\r\n                    ipostition: Number,\r\n                    icount: Number,\r\n                    itimebegin: Number(UTC秒数),\r\n                    itimeend: Number(UTC秒数),\r\n                    username: String,\r\n                    targetid: String,\r\n                    itargetindex: Number,\r\n                    callback: function(sender, response, data){\r\n                        \r\n                    },\r\n                    tag: tag\r\n                }\r\n            */\r\n            _swLogQuery: function (options) {\r\n                var dft_poptions = {\r\n                    ipostition: 0,\r\n                    icount: 120,\r\n                    itimebegin: 0,\r\n                    itimeend: 0,\r\n                    username: '',\r\n                    targetid: '',\r\n                    itargetindex: -1,\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_poptions, options || {});\r\n\r\n                var payload = new proto.BVCU.Search.Search_Request();\r\n                var searchinfo = new proto.BVCU.Search.SearchInfo();\r\n                payload.setStsearchinfo(searchinfo);\r\n                searchinfo.setItype(jSWProtocol.SearchType.OPERATE);\r\n                searchinfo.setIcount(Number(options.icount));\r\n                searchinfo.setIpostition(Number(options.ipostition));\r\n\r\n                var operatelog = new proto.BVCU.Search.Search_OperateLog();\r\n                payload.setStoperatefilter(operatelog);\r\n                operatelog.setSzusername(options.username);\r\n                operatelog.setSztargetid(options.targetid);\r\n\r\n                if (options.itimebegin != 0 && options.itimeend != 0 && options.itimeend < options.itimebegin) {\r\n                    console.error(\"get operate log utc time error please check!\");\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                operatelog.setIoperatetime(options.itimebegin);\r\n                operatelog.setItimeend(options.itimeend);\r\n\r\n                var targetindex = Number(options.itargetindex);\r\n                if (targetindex != null && targetindex >= 0) {\r\n                    operatelog.setItargetindex(targetindex);\r\n                }\r\n                operatelog.serializeBinary();\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this,\r\n                    targetIndex: targetindex,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_SEARCH_OPERATE,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swDispose: function () {\r\n                if (this._arr_pu_online.length > 0) {\r\n                    this._arr_pu_online.every(function (puitem, index, array) {\r\n                        puitem._clear();\r\n                    });\r\n                    this._arr_pu_online = [];\r\n                }\r\n                if (this._timer_keeplive) {\r\n                    clearInterval(this._timer_keeplive);\r\n                    this._timer_keeplive = 0;\r\n                }\r\n                if (this._ws) {\r\n                    this._ws.onclose = null;\r\n                    this._ws.close();\r\n                    console.log(\"close ws\");\r\n                }\r\n            },\r\n\r\n            compare: function (objSession) {\r\n                return (this._server == objSession._server &&\r\n                    this._port == objSession._port &&\r\n                    this._user == objSession._user);\r\n            },\r\n\r\n            /**内部函数， OnResponse Fail*/\r\n            _internalOnResponseFail: function (options, responseText, errMsg) {\r\n                var cmd = options.cmd;\r\n                var param = options.param;\r\n\r\n                console.error('internal error: ' + cmd + (errMsg));\r\n                if (cmd == jSWProtocol.RequestHeader.pubkey.cmd) {\r\n                    cmd = jSWProtocol.RequestHeader.login.cmd;\r\n                }\r\n\r\n                /**调用命令的回调函数\r\n                if (options && ((typeof options.callback) == 'function')) {\r\n                    options.callback(options, response);\r\n                }*/\r\n\r\n                /**通知调用者*/\r\n                //this._callbackManager.dispatchCallback(cmd, {\r\n                //    code: jSW.RcCode.RC_CODE_E_FAIL,\r\n                //    request: param,\r\n                //    response: responseText,\r\n                //    msg: errMsg\r\n                //});\r\n            },\r\n\r\n            /**内部函数， OnResponse Success*/\r\n            _internalOnResponseSuccess: function (options, response, status) {\r\n                jSW.DependencyMgr.HandleResponseInJect(function (handleResponse) {\r\n                    handleResponse.internalOnResponseSuccess(this, options, response, status);\r\n                }, this);\r\n            },\r\n\r\n            _internalNotify: function (options, response) {\r\n                jSW.DependencyMgr.HandleResponseInJect(function (handleResponse) {\r\n                    handleResponse.handleNotify(this, options, response);\r\n                }, this);\r\n            },\r\n\r\n            /**OnResponse 设备列表*/\r\n            _internalOnResponsePulist: function (response) {\r\n                var payload = response.getPayload();\r\n                var getPulistResponse = proto.WEBBVCU.BVCU_GetPulist_Response.deserializeBinary(payload);\r\n                var pulist = getPulistResponse.getPulistList();\r\n                var pulistNotify = [];\r\n                var i = 0;\r\n                for (; i < pulist.length; i++) {\r\n\r\n                    var puid = pulist[i].getPubaseinfo().getSzid();\r\n                    var pu = this._arr_pu_index[puid];\r\n\r\n                    //console.log(puid + ' ' + pulist[i].getPubaseinfo().getIonlinestatus());\r\n                    if (null == pu) {\r\n                        // 添加\r\n                        pu = new jSW.SWPu(this, pulist[i])\r\n                        if (pu._info_pu.onlinestatus == 1) {\r\n                            this._arr_pu_online.push(pu);\r\n                        } else if (0 == pu._info_pu.onlinestatus) {\r\n                            this._arr_pu_offline.push(pu);\r\n                        }\r\n                        this._arr_pu.push(pu);\r\n                        this._arr_pu_index[puid] = pu;\r\n                    }\r\n                    else {\r\n                        // 更新\r\n                        pu._internalUpdate(pulist[i]);\r\n                        this._swCheckPuArr(pu);\r\n                    }\r\n\r\n                    pulistNotify.push(pu);\r\n                }\r\n                return pulistNotify;\r\n            },\r\n\r\n            _internalOnResponseConfList: function (conflist) {\r\n                if (this._confManager != null && this._confManager._swFreshConflist) {\r\n                    this._confManager._swFreshConflist(conflist);\r\n                }\r\n            },\r\n\r\n            _internalOnConfResponse: function (msgType, data) {\r\n                //console.log(jSWUtils.getJsonString(data));\r\n                switch (msgType) {\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_GET_CONF_LIST:\r\n                        if (this._confManager != null && this._confManager._swFreshConflist) {\r\n                            this._confManager._swFreshConflist(data);\r\n                        }\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_GET_CONF_INFO:\r\n                        return this._confManager._swFreshConfInfo(data);\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_SET_CONF_CREATE:\r\n                        var desconf = this._confManager._swFreshConfInfo(data);\r\n                        this._confManager._dispatchCallback(desconf, jSWProtocol.RequestHeader.confnotify.notifyconfcreate.cmd, desconf.swGetConfInfo().id);\r\n                        return desconf;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_ONLINE:\r\n                        this._confManager._swFreshUserOnlielist(data);\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_SET_CONF_DELETE:\r\n                        this._confManager._onConfDeletedOk(data);\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_PARTICIPATOR_ADD:\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_PARTICIPATOR_REMOVE:\r\n                        this._confManager._onParticularAddResult(data);\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_START:\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_STOP:\r\n                        this._confManager._onConfOpertaion(data);\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_PARTICIPATOR_APPLYFOR_STARTSPEAK:\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_PARTICIPATOR_APPLYFOR_ENDSPEAK:\r\n                        this._confManager._onApplyForSpeak(data);\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n\r\n        jSW.SwUserManager = function (session) {\r\n            this._session = session;\r\n        }\r\n\r\n        jSW.SwUserManager.SYSADMIN = {\r\n            NONE: 0,  // 没有系统管理权\r\n            GROUP: 1, // 对用户组拥有管理权\r\n            USER: 4, // 对用户拥有管理权\r\n            DEV: 16, // 对设备拥有管理权\r\n            DEVASS: 64, // 对设备拥有分配权\r\n            ALL: 85\r\n        };\r\n\r\n        jSW.SwUserManager.PERMISSIONS = {\r\n            OFF: 0,\r\n            ON: 1\r\n        }\r\n\r\n        jSW.SwUserManager.DEFAULT = {\r\n            GROUP_GOD: \"Admin\",\r\n            USER: \"admin\"\r\n        }\r\n\r\n        jSW.SwUserManager.Buffer = function () {\r\n            this._Buffer_Strack = [];\r\n        };\r\n        jSW.SwUserManager.Buffer.prototype = {\r\n            _Buffer_Size: 1024,\r\n            _push: function (item) {\r\n                var isExist = this._is_id_exist(item.id);\r\n                if (!isExist) {\r\n                    while (this._Buffer_Strack.length > this._Buffer_Size) {\r\n                        var item = this._Buffer_Strack.pop();\r\n                        item.tag._clearinfo(item.tag);\r\n                    }\r\n\r\n                    this._Buffer_Strack.unshift(item);\r\n                }\r\n            },\r\n            _is_id_exist: function (id) {\r\n                var item = null;\r\n                for (itemIndex in this._Buffer_Strack) {\r\n                    item = this._Buffer_Strack[itemIndex];\r\n                    if (item.id == id) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n\r\n        jSW.SwUserManager.SwUser = function (session, user, group) {\r\n            this._session = session;\r\n            this._user = user;\r\n            this._group = group;\r\n            this._userinfo = null;\r\n        }\r\n\r\n        jSW.SwUserManager.SwUser.prototype = {\r\n            _static_buffer: new jSW.SwUserManager.Buffer(),\r\n\r\n            _clearinfo: function (user) {\r\n                user._userinfo = null;\r\n            },\r\n\r\n            swGetUserInfo: function (options) {\r\n                if (this._static_buffer._is_id_exist(this._user.id)) {\r\n                    setTimeout(options.callback, 5, { tag: options.tag }, { emms: { code: 0 } }, this._userinfo);\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                }\r\n                return this._innerGetUserInfo(options);\r\n            },\r\n\r\n            swGetGroup: function () {\r\n                return this._group;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    info:{\r\n                        isGroupManager: Boolean,\r\n                        isUserManager: Boolean,\r\n                        isDevManager: Boolean,\r\n                        isDevAssManager: Boolean,\r\n                        name: String,\r\n                        email: String,\r\n                        phone: String,\r\n                        groupid: String,\r\n                        description: String,\r\n                        resources: [\r\n                            {\r\n                                puid: String,\r\n                                permission: {\r\n                                    config: false,\r\n                                    channels: [\r\n                                        {channelindex: channel._id_chanel,\r\n                                        iscansee: false}\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    callback: funciton,\r\n                    tag: Object\r\n                }\r\n            */\r\n            swModUser: function (options) {\r\n                var dft_poptions = {\r\n                    info: {\r\n                        name: this._user.name,\r\n                        email: this._userinfo.email,\r\n                        phone: this._userinfo.phone,\r\n                        description: this._userinfo.description,\r\n                        groupid: this._group._group.id,\r\n                        sysadmin: {\r\n                            isGroup: this._userinfo.isGroup,\r\n                            isUser: this._userinfo.isUser,\r\n                            isDev: this._userinfo.isDev,\r\n                            isDevAss: this._userinfo.isDevAss\r\n                        },\r\n                        resources: this._userinfo.resources,\r\n                        iptz: this._userinfo.iptz\r\n                    },\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_poptions, options || {});\r\n                options.info.sysadmin = jSWUtils.extend({}, dft_poptions.info.sysadmin, options.info.sysadmin || {});\r\n                var rc = this._mod_user(options);\r\n                return rc;\r\n            },\r\n\r\n            _mod_user: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserInfo();\r\n\r\n                var systemvalue = 0;\r\n\r\n                systemvalue += (option.info.sysadmin.isGroup ? jSW.SwUserManager.SYSADMIN.GROUP : jSW.SwUserManager.SYSADMIN.NONE);\r\n                systemvalue += (option.info.sysadmin.isUser ? jSW.SwUserManager.SYSADMIN.USER : jSW.SwUserManager.SYSADMIN.NONE);\r\n                systemvalue += (option.info.sysadmin.isDev ? jSW.SwUserManager.SYSADMIN.DEV : jSW.SwUserManager.SYSADMIN.NONE);\r\n                systemvalue += (option.info.sysadmin.isDevAss ? jSW.SwUserManager.SYSADMIN.DEVASS : jSW.SwUserManager.SYSADMIN.NONE);\r\n\r\n                payload.setSname(option.info.name);\r\n                payload.setSemail(option.info.email);\r\n                payload.setSphone(option.info.phone);\r\n                payload.setSdescription(option.info.description);\r\n                payload.setIsysadmin(systemvalue);\r\n                payload.setIptz(option.info.iptz);\r\n\r\n                payload.setSid(this._userinfo.id);\r\n                payload.setSallocateid(this._userinfo.allocateId);\r\n                payload.setSgroupid(option.info.groupid);\r\n                jSWProtocol._LocalResource_2Pb(option.info.resources, payload);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_MODUSER,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n\r\n            /*\r\n                options={\r\n                    data:{\r\n                        password:  用户的原密码,修改他人密码时不用填充此值，但需要管理权限 \r\n                        newpassword: 用户的新密码\r\n                    },\r\n                    callback: function(sender, response, data){\r\n                    },\r\n                    tag: \r\n                }\r\n            */\r\n            swModPwd: function (options) {\r\n                var dft_poptions = {\r\n                    data: {\r\n                        password: '',\r\n                        newpassword: ''\r\n                    },\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_poptions, options || {});\r\n\r\n                var rc = this._mod_pwd(options);\r\n                return rc;\r\n            },\r\n\r\n            _mod_pwd: function (options) {\r\n                var payload = new proto.BVCU.UserConfig.ModPassword();\r\n\r\n                payload.setSid(this._user.id);\r\n                payload.setSpassword(jSWUtils.string2Uint8Array(options.data.password));\r\n                payload.setSnewpassword(jSWUtils.string2Uint8Array(options.data.newpassword));\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_MODPASSWD,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    callback:function(sender, options, data){\r\n                        \r\n                    }\r\n                },\r\n                tag: Object\r\n            */\r\n            swDelUser: function (options) {\r\n                return this._del_user(options);\r\n            },\r\n\r\n            _del_user: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.User();\r\n\r\n                payload.setSid(this._user.id);\r\n                payload.setSgroupid(this._user.groupid);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_DELUSER,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _fresh_user_info: function (userinfo) {\r\n                this._userinfo = {\r\n                    id: userinfo.sId,\r\n                    passwd: userinfo.sPasswd,\r\n                    bsetpasswd: userinfo.bSetPasswd,\r\n                    sysadmin: {\r\n                        isGroup: userinfo.sysadmin.isGroup,\r\n                        isUser: userinfo.sysadmin.isUser,\r\n                        isDev: userinfo.sysadmin.isDev,\r\n                        isDevAss: userinfo.sysadmin.isDevAss\r\n                    },\r\n                    iptz: userinfo.iPtz,\r\n                    serverid: userinfo.sServerId,\r\n                    groupid: userinfo.sGroupId,\r\n                    imaxsession: userinfo.iMaxSession,\r\n                    allocateId: userinfo.sAllocateId,\r\n                    name: userinfo.sName,\r\n                    phone: userinfo.sPhone,\r\n                    email: userinfo.sEmail,\r\n                    description: userinfo.sDescription,\r\n                    resources: userinfo.Resource.concat()\r\n                }\r\n\r\n                //if (this._group._group.id != jSW.SwUserManager.DEFAULT.GROUP_GOD) {\r\n                //    this._userinfo.allresources = jSWProtocol._GetAllRescources(this._session, this._userinfo.resources);\r\n                //}\r\n\r\n            },\r\n\r\n            _getUserInfo: function (option) {\r\n                var payload = new proto.BVCU.UserConfig.User();\r\n                payload.setSid(option.userid);\r\n                payload.setSgroupid(option.groupid);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_USERINFO,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _innerGetUserInfo: function (options) {\r\n                var rc = this._getUserInfo({\r\n                    userid: this._user.id,\r\n                    groupid: this._user.groupid,\r\n                    callback: this._innerOnGetUserInfo,\r\n                    tag: {\r\n                        user: this,\r\n                        option: options\r\n                    }\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _innerOnGetUserInfo: function (sender, response, data) {\r\n                var tag = sender.tag;\r\n                var user = tag.user;\r\n                var options = tag.option;\r\n\r\n                var rc = user._getGroupInfo({\r\n                    callback: user._innerhelpOnGetUserInfo,\r\n                    tag: {\r\n                        option: options,\r\n                        data: data,\r\n                        user: user\r\n                    }\r\n                });\r\n            },\r\n\r\n            _innerhelpOnGetUserInfo: function (sender, response, data) {\r\n                var tag = sender.tag;\r\n                var user = tag.user;\r\n                var options = tag.option;\r\n                var userdata = tag.data;\r\n\r\n                user._fresh_user_info(userdata);\r\n\r\n                jSW.SwUserManager._InitIUserHelp.iCount -= 1;\r\n\r\n                if (jSW.SwUserManager._InitIUserHelp.iCount <= 0) {\r\n                    var userManager = user._session.swGetUserManager();\r\n                    userManager._onInitOver();\r\n                }\r\n\r\n                if (options.callback != null && (typeof options.callback === \"function\")) {\r\n                    options.callback({ tag: options.tag }, { emms: { code: 0 } }, user._userinfo);\r\n                }\r\n                user._static_buffer._push({ id: user._userinfo.id, tag: user });\r\n            },\r\n\r\n            _getGroupInfo: function (options) {\r\n                this._group.swGetGroupInfo(options);\r\n            }\r\n        };\r\n\r\n        jSW.SwUserManager._InitIUserHelp = {\r\n            iCount: 0\r\n        };\r\n\r\n        jSW.SwUserManager.SwGroup = function (session, group, groupinfo) {\r\n            this._session = session;\r\n            this._group = group;\r\n            this._userlist = [];\r\n            this.groupinfo = null;\r\n            this._groupinfo = null;\r\n            if (groupinfo != null) {\r\n                this._groupinfo = groupinfo;\r\n                this.groupinfo = groupinfo;\r\n            }\r\n        }\r\n\r\n        jSW.SwUserManager.SwGroup.prototype = {\r\n            _static_groupinfo_buffer: new jSW.SwUserManager.Buffer(),\r\n\r\n            _clearinfo: function (group) {\r\n                group._groupinfo = null;\r\n                group.groupinfo = null;\r\n            },\r\n\r\n            _getGroupInfo: function (options) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserGroup();\r\n                payload.setSid(this._group.id);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_GROUPINFO,\r\n                    payload: payload,\r\n                    callback: this._onGetGroupInfo,\r\n                    tag: { group: this, option: options }\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _resolve: function () {\r\n                this.groupinfo = {\r\n                    id: this._group.id,\r\n                    name: this._groupinfo.name,\r\n                    parentid: this._groupinfo.parentid,\r\n                    description: this._groupinfo.description,\r\n                    resources: this._groupinfo.resources.concat(),\r\n                    allresources: []\r\n                }\r\n\r\n                if (this.groupinfo.id != jSW.SwUserManager.DEFAULT.GROUP_GOD) {\r\n                    this.groupinfo.allresources = jSWProtocol._GetAllRescources(this._session, this.groupinfo.resources);\r\n                }\r\n            },\r\n\r\n            _onGetGroupInfo: function (sender, response, data) {\r\n                var tag = sender.tag;\r\n                var group = tag.group;\r\n                group._groupinfo = data;\r\n                group._resolve();\r\n\r\n                var option = tag.option;\r\n                if (option.callback != null && (typeof option.callback === \"function\")) {\r\n                    option.callback({ tag: option.tag }, { emms: { code: 0 } }, data);\r\n                }\r\n\r\n                group._static_groupinfo_buffer._push({ id: group._group.id, tag: group });\r\n            },\r\n\r\n            _groupSetFilter: function () {\r\n                this.groupinfo.id = this._group.id;\r\n                this.groupinfo.parentid = this._group.parentid;\r\n            },\r\n\r\n            _mod_group: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserGroupInfo();\r\n\r\n                payload.setSid(this._group.id);\r\n                payload.setSname(option.info.name);\r\n                payload.setSdescription(option.info.description);\r\n                payload.setSparentid(option.info.parentid);\r\n                jSWProtocol._LocalResource_2Pb(option.info.resources, payload);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_MODGROUP,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _del_group: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserGroup();\r\n\r\n                if (this._userlist == null) {\r\n                    console.warn(\"please get group info before delete it!\");\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                if (this._userlist != null && this._userlist.length > 0) {\r\n                    console.warn(\"we can't delete the group because it contains more than 1 user!\");\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                payload.setSid(this._group.id);\r\n                payload.setSparentid(this._group.parentid);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_DELGROUP,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _add_user: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserInfo();\r\n\r\n                var systemvalue = 0;\r\n\r\n                systemvalue += (option.info.sysadmin.isGroup ? jSW.SwUserManager.SYSADMIN.GROUP : jSW.SwUserManager.SYSADMIN.NONE);\r\n                systemvalue += (option.info.sysadmin.isUser ? jSW.SwUserManager.SYSADMIN.USER : jSW.SwUserManager.SYSADMIN.NONE);\r\n                systemvalue += (option.info.sysadmin.isDev ? jSW.SwUserManager.SYSADMIN.DEV : jSW.SwUserManager.SYSADMIN.NONE);\r\n                systemvalue += (option.info.sysadmin.isDevAss ? jSW.SwUserManager.SYSADMIN.DEVASS : jSW.SwUserManager.SYSADMIN.NONE);\r\n\r\n\r\n                payload.setSid(option.info.id);\r\n                if (option.info.passwd.length > 0 && option.info.passwd.length < 64) {\r\n                    payload.setSpasswd(jSWUtils.string2Uint8Array(option.info.passwd));\r\n                } else if (option.info.passwd.length > 64) {\r\n                    console.log(\"the passwd you seted is out of range\");\r\n                }\r\n                payload.setSname(option.info.name);\r\n                payload.setSemail(option.info.email);\r\n                payload.setSphone(option.info.phone);\r\n                payload.setSdescription(option.info.description);\r\n                payload.setIsysadmin(systemvalue);\r\n                payload.setIptz(option.info.iptz);\r\n                payload.setSallocateid(option.info.allocateId);\r\n\r\n                payload.setSgroupid(this._group.id);\r\n                jSWProtocol._LocalResource_2Pb(option.info.resources, payload);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_ADDUSER,\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _onGetUser: function (user) {\r\n                var localuser = null;\r\n                var isContains = false;\r\n                for (userIndex in this._userlist) {\r\n                    localuser = this._userlist[userIndex];\r\n                    if (localuser._user.id == user.id) {\r\n                        localuser._user = user;\r\n                        isContains = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isContains) {\r\n                    localuser = this._local_add_user(user);\r\n                }\r\n                var userManager = this._session.swGetUserManager();\r\n                return localuser;\r\n            },\r\n\r\n            _local_add_user: function (user) {\r\n                var localuser = new jSW.SwUserManager.SwUser(this._session, user, this);\r\n                this._userlist.push(localuser);\r\n                return localuser;\r\n            },\r\n\r\n            _on_notify_mod_user: function (userinfo) {\r\n                var user = null;\r\n                var isExist = false;\r\n                for (userindex in this._userlist) {\r\n                    user = this._userlist[userindex];\r\n                    if (user._user.id == userinfo.sId) {\r\n                        isExist = true;\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                if (isExist) {\r\n                    user._fresh_user_info(userinfo);\r\n                }\r\n                else {\r\n                    var userbaseinfo = {\r\n                        id: userinfo.sId,\r\n                        groupid: userinfo.sGroupId,\r\n                        name: userinfo.Sname\r\n                    };\r\n                    user = new jSW.SwUserManager.SwUser(this._session, userbaseinfo, this);\r\n                    user._fresh_user_info(userinfo);\r\n                    this._userlist.push(user);\r\n                }\r\n\r\n                return user;\r\n            },\r\n\r\n            _on_notify_del_user: function (user) {\r\n                var userlocal = null;\r\n                for (userindex in this._userlist) {\r\n                    userlocal = this._userlist[userindex];\r\n                    if (userlocal._user.id == user._user.id) {\r\n                        this._userlist.splice(userindex, 1);\r\n                        break;\r\n                    }\r\n                }\r\n                return userlocal;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    info:{\r\n                        isGroupManager: Boolean,\r\n                        isUserManager: Boolean,\r\n                        isDevManager: Boolean,\r\n                        isDevAssManager: Boolean,\r\n                        name: String,\r\n                        email: String,\r\n                        phone: String,\r\n                        groupid: String,\r\n                        description: String,\r\n                        password: String,\r\n                        resources: [\r\n                            {\r\n                                puid: String,\r\n                                permission: {\r\n                                    config: false,\r\n                                    channels: [\r\n                                        {channelindex: channel._id_chanel,\r\n                                        iscansee: false}\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    callback: function(sender, options, data){\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swAddUser: function (options) {\r\n                var dft_poptions = {\r\n                    info: {\r\n                        id: '',\r\n                        passwd: '',\r\n                        name: '',\r\n                        email: '',\r\n                        phone: '',\r\n                        description: '',\r\n                        groupid: this._group.id,\r\n                        sysadmin: {\r\n                            isGroup: false,\r\n                            isUser: false,\r\n                            isDev: false,\r\n                            isDevAss: false\r\n                        },\r\n                        resources: []\r\n                    },\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_poptions, options || {});\r\n                options.info = jSWUtils.extend({}, dft_poptions.info, options.info || {});\r\n                var rc = this._add_user(options);\r\n                return rc;\r\n            },\r\n\r\n            swGetUserList: function (options) {\r\n                setTimeout(options.callback, 5, { tag: options.tag }, { emms: { code: jSW.RcCode.RC_CODE_S_OK } }, this._userlist);\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            swGetUserById: function (id) {\r\n                var user = null;\r\n                for (userIndex in this._userlist) {\r\n                    user = this._userlist[userIndex];\r\n                    if (user._user.id == id) {\r\n                        return user;\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n\r\n            swGetGroupInfo: function (options) {\r\n                var isBufferExist = this._static_groupinfo_buffer._is_id_exist(this._group.id);\r\n                if (isBufferExist) {\r\n                    setTimeout(options.callback, 5, { tag: options.tag }, { emms: { code: 0 } }, this.groupinfo);\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                }\r\n                else {\r\n                    return this._getGroupInfo(options);\r\n                }\r\n            },\r\n\r\n            /*\r\n                option= {\r\n                    info: {\r\n                        name: String,\r\n                        descriptioin: String,\r\n                        parentid: String,\r\n                        resources: [\r\n                            {\r\n                                puid: String,\r\n                                permission: {\r\n                                    config: false,\r\n                                    channels: [\r\n                                        {channelindex: channel._id_chanel,\r\n                                        iscansee: false}\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    callback: function(sender, options, data){\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swModGroup: function (option) {\r\n                var dft_poptions = {\r\n                    info: {\r\n                        name: this._group.name,\r\n                        description: this._groupinfo.description,\r\n                        parentid: this._groupinfo.parentid,\r\n                        resources: this._groupinfo.resources\r\n                    },\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                option = jSWUtils.extend({}, dft_poptions, option || {});\r\n                option.info = jSWUtils.extend({}, dft_poptions.info, option.info || {});\r\n                var rc = this._mod_group(option);\r\n                return rc;\r\n            },\r\n\r\n            swDelGroup: function (options) {\r\n                return this._del_group(options);\r\n            }\r\n        };\r\n\r\n        jSW.SwUserManager.prototype = {\r\n            _session: null,\r\n            _grouplist: [],\r\n            _ondatachangedcallback: null,\r\n            _initCallback: null,\r\n            _usertag: null,\r\n            _isInitOver: false,\r\n            _currentUser: null,\r\n            _currentuserid: \"\",\r\n\r\n            _getUserGroupList: function (option) {\r\n                var param = jSWProtocol.JsonParamCommand(this._session._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_GROUPLIST,\r\n                    jSWProtocol.BVCU_Command('', -1, null));\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.usercfg.getgrouplist.cmd,\r\n                    session: this._session,\r\n                    request: param,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _getUserList: function (option) {\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_USERLIST,\r\n\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _innerGetUserList: function () {\r\n                this._getUserList({\r\n                    callback: this._onGetUserList,\r\n                    tag: this\r\n                });\r\n            },\r\n\r\n            _onGetUserList: function (sender, response, data) {\r\n                var userManager = sender.tag;\r\n                var user = null;\r\n                var group = null;\r\n                var localuser = null;\r\n                jSW.SwUserManager._InitIUserHelp.iCount = data.length;\r\n                for (userindex in data) {\r\n                    user = data[userindex];\r\n                    group = userManager._getGroupById(user.groupid);\r\n                    if (group != null) {\r\n                        localuser = group._onGetUser(user);\r\n                        if (localuser._user.id == userManager._currentuserid) {\r\n                            userManager._currentUser = localuser;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                userManager._onInitOver();\r\n            },\r\n\r\n            _getGroupById: function (id) {\r\n                var group = null;\r\n                for (groupindex in this._grouplist) {\r\n                    group = this._grouplist[groupindex];\r\n                    if (group._group.id == id) {\r\n                        return group;\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n\r\n            _getOnlineUsers: function (option) {\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_ONLINE,\r\n\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _getOnlineUserInfo: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserOnline();\r\n\r\n                payload.setSzdevid(option.devid);\r\n                payload.setSuserid(option.userid);\r\n                payload.setIapplierid(option.applierid);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_USER_ONLINEINFO,\r\n\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _add_group: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.UserGroupInfo();\r\n\r\n                payload.setSid(option.info.id);\r\n                payload.setSname(option.info.name);\r\n                payload.setSdescription(option.info.description);\r\n                payload.setSparentid(option.info.parentid);\r\n                jSWProtocol._LocalResource_2Pb(option.info.resources, payload);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_ADDGROUP,\r\n\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _kickout_user: function (option) {\r\n\r\n                var payload = new proto.BVCU.UserConfig.Kickout();\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._session,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_USER_KICKOUT,\r\n\r\n                    payload: payload,\r\n                    callback: option.callback,\r\n                    tag: option.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _onInitOver: function (bEnforce) {\r\n                if (!this._isInitOver || bEnforce) {\r\n                    this._isInitOver = true;\r\n                    this._initCallback({ tag: this._usertag }, {\r\n                        emms: { code: 0 }\r\n                    },\r\n                    null);\r\n                }\r\n            },\r\n\r\n            _add_group_to_local: function (session, group) {\r\n                var groupitem = new jSW.SwUserManager.SwGroup(session, group);\r\n                this._grouplist.push(groupitem);\r\n                //groupitem._getGroupInfo();\r\n            },\r\n            _on_notify_mod_group: function (groupinfo) {\r\n                var isExist = false;\r\n                var group = null;\r\n                for (groupIndex in this._grouplist) {\r\n                    group = this._grouplist[groupIndex];\r\n                    if (group._group.id == groupinfo.id) {\r\n                        isExist = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (isExist) {\r\n                    group._groupinfo = groupinfo;\r\n                    group.groupinfo = groupinfo;\r\n                }\r\n                else {\r\n                    var groupbaseinfo = {\r\n                        id: groupinfo.id,\r\n                        name: groupinfo.name,\r\n                        parentid: groupinfo.parentid\r\n                    };\r\n                    group = new jSW.SwUserManager.SwGroup(this._session, groupbaseinfo, groupinfo);\r\n                    this._grouplist.push(group);\r\n                }\r\n\r\n                return group;\r\n            },\r\n\r\n            _on_notify_del_group: function (usergroup) {\r\n                var group = null;\r\n                var isContain = false;\r\n                for (groupindex in this._grouplist) {\r\n                    group = this._grouplist[groupindex];\r\n                    if (group._group.id == usergroup.id) {\r\n                        this._grouplist.splice(groupindex, 1);\r\n                        isContain = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (isContain) {\r\n                    return group;\r\n                }\r\n\r\n                return null;\r\n            },\r\n\r\n            _on_notify_mod_user: function (userinfo) {\r\n                var group = null;\r\n                var user = null;\r\n                for (groupIndex in this._grouplist) {\r\n                    group = this._grouplist[groupIndex];\r\n                    if (group._group.id == userinfo.sGroupId) {\r\n                        user = group._on_notify_mod_user(userinfo);\r\n                        break;\r\n                    }\r\n                }\r\n                return user;\r\n            },\r\n\r\n            _on_notify_del_user: function (userinfo) {\r\n                var user = null;\r\n                user = this._getUserById(userinfo.id);\r\n                if (user != null) {\r\n                    user = user._group._on_notify_del_user(user);\r\n                }\r\n                return user;\r\n            },\r\n\r\n            onGetGroupList: function (sender, response, data) {\r\n                var tag = sender.tag;\r\n                var userManager = tag.userManager;\r\n\r\n                var groupgeted = null;\r\n                var grouplocal = null;\r\n                var isContains = false;\r\n\r\n                for (groupindex in data) {\r\n                    groupgeted = data[groupindex];\r\n                    for (localgroupindex in userManager._grouplist) {\r\n                        grouplocal = userManager._grouplist[localgroupindex];\r\n                        if (groupgeted.id == grouplocal._group.id) {\r\n                            grouplocal._group = groupgeted;\r\n                            isContains = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (!isContains) {\r\n                        userManager._add_group_to_local(this.session, groupgeted);\r\n                    }\r\n\r\n                    isContains = false;\r\n                }\r\n\r\n\r\n                userManager._innerGetUserList();\r\n            },\r\n\r\n            _onNotify: function (msgType, response, payload) {\r\n                if (!this._isInitOver) {\r\n                    return;\r\n                }\r\n\r\n                var data = null;\r\n                var cmd = \"\";\r\n                var target = null;\r\n                switch (msgType) {\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_USER_ADDGROUP:\r\n                        data = proto.BVCU.UserConfig.UserGroupInfo.deserializeBinary(payload);\r\n                        data = jSWProtocol.GroupInfoPb_2Json(data, this._session);\r\n                        target = this._on_notify_mod_group(data);\r\n                        cmd = jSWProtocol.RequestHeader.usercfg.addgroup.cmd;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_USER_MODGROUP:\r\n                        data = proto.BVCU.UserConfig.UserGroupInfo.deserializeBinary(payload);\r\n                        data = jSWProtocol.GroupInfoPb_2Json(data, this._session);\r\n                        target = this._on_notify_mod_group(data);\r\n                        cmd = jSWProtocol.RequestHeader.usercfg.modgroupinfo.cmd;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_USER_DELGROUP:\r\n                        data = proto.BVCU.UserConfig.UserGroup.deserializeBinary(payload);\r\n                        data = jSWProtocol.GroupPb_2Json(data);\r\n                        target = this._on_notify_del_group(data);\r\n                        cmd = jSWProtocol.RequestHeader.usercfg.delgroup.cmd;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_USER_ADDUSER:\r\n                        data = proto.BVCU.UserConfig.UserInfo.deserializeBinary(payload);\r\n                        data = jSWProtocol.USER_USERINFO_Pb2Json(data, this._session);\r\n                        target = this._on_notify_mod_user(data);\r\n                        cmd = jSWProtocol.RequestHeader.usercfg.adduser.cmd;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_USER_MODUSER:\r\n                        data = proto.BVCU.UserConfig.UserInfo.deserializeBinary(payload);\r\n                        data = jSWProtocol.USER_USERINFO_Pb2Json(data, this._session);\r\n                        target = this._on_notify_mod_user(data);\r\n                        cmd = jSWProtocol.RequestHeader.usercfg.moduserinfo.cmd;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_NOTIFY_USER_DELUSER:\r\n                        data = proto.BVCU.UserConfig.User.deserializeBinary(payload);\r\n                        data = jSWProtocol.USER_USERPb_2Json(data);\r\n                        target = this._on_notify_del_user(data);\r\n                        cmd = jSWProtocol.RequestHeader.usercfg.deluser.cmd;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                if (cmd != \"\") {\r\n                    this._ondatachangedcallback(this, {\r\n                    }, {\r\n                        cmd: cmd,\r\n                        target: target\r\n                    });\r\n                }\r\n            },\r\n\r\n            swGetCurrentUser: function () {\r\n                if (!this._isInitOver) {\r\n                    console.log('please call get info function after init over!!!!!');\r\n                    return null;\r\n                }\r\n\r\n                return this._currentUser;\r\n            },\r\n\r\n            /*\r\n            options:{\r\n                callback:function(sender, response, data){\r\n                    \r\n                },\r\n    \r\n                ondatachanged: function(sender, response, data){\r\n                    data:{\r\n                        cmd: string,\r\n                        target: object\r\n                    }\r\n                },\r\n                tag: \r\n            }\r\n            */\r\n            swInit: function (options) {\r\n                if (options == null || options.ondatachanged == null || options.callback == null) {\r\n                    console.log(\"options must be fill correctly! please try again\");\r\n                    return;\r\n                }\r\n\r\n                this._ondatachangedcallback = options.ondatachanged;\r\n                this._initCallback = options.callback;\r\n                if (this._isInitOver) {\r\n                    this._onInitOver(true);\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                }\r\n\r\n                this._currentuserid = this._session._user;\r\n                this._isInitOver = false;\r\n                this._usertag = options.tag;\r\n\r\n                return this._getUserGroupList({\r\n                    callback: this.onGetGroupList,\r\n                    tag: {\r\n                        userManager: this,\r\n                        isInit: true\r\n                    }\r\n                });\r\n            },\r\n\r\n            swGetCurrentUserId: function () {\r\n                return this._currentuserid;\r\n            },\r\n\r\n            swGetGroupList: function (options) {\r\n                if (!this._isInitOver) {\r\n                    console.log('please call get info function after init over!!!!!');\r\n                    return null;\r\n                }\r\n                setTimeout(options.callback, 5, { tag: options.tag }, { emms: { code: jSW.RcCode.RC_CODE_S_OK } }, this._grouplist);\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            swGetGroupById: function (id) {\r\n                var group = this._getGroupById(id);\r\n                return group;\r\n            },\r\n\r\n            swGetUserById: function (groupid, userid) {\r\n                var group = this.swGetGroupById(groupid);\r\n                if (group == null)\r\n                    return null;\r\n                var user = group.swGetUserById(userid);\r\n                return user;\r\n            },\r\n\r\n\r\n            _getUserById: function (userid) {\r\n                var user = null;\r\n                for (groupindex in this._grouplist) {\r\n                    group = this._grouplist[groupindex];\r\n                    if (group != null) {\r\n                        user = group.swGetUserById(userid);\r\n                        if (user != null) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return user;\r\n            },\r\n\r\n            /*\r\n                option= {\r\n                    info: {\r\n                        name: String,\r\n                        description: String,\r\n                        parentid: String,\r\n                        resources: [\r\n                            {\r\n                                puid: String,\r\n                                permission: {\r\n                                    config: false,\r\n                                    channels: [\r\n                                        {channelindex: channel._id_chanel,\r\n                                        iscansee: false}\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    callback: function(sender, options, data){\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swAddGroup: function (option) {\r\n                var dft_poptions = {\r\n                    info: {\r\n                        name: '',\r\n                        description: '',\r\n                        parentid: '',\r\n                        resources: []\r\n                    },\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                var poptions = jSWUtils.extend({}, dft_poptions, option || {});\r\n                var rc = this._add_group(poptions);\r\n                return rc;\r\n            }\r\n        }\r\n\r\n\r\n        // ---- SWPu ----\r\n        jSW.SWPu = function (parent, options) {\r\n            var chanellist = options.getChannellistList();\r\n            var baseInfo = options.getPubaseinfo();\r\n            this._parent = parent;\r\n            this._innerCommUpdata(options);\r\n            jSWUtils.debugLogInfo(this._info_pu.id + \"\" + \"v:\" + this._arr_channel.length + \",g\" + this._arr_gps.length);\r\n        };\r\n\r\n        jSW.SWPu.SATELLITE = {\r\n            GPS: (1 << 0), //美国GPS卫星\r\n            BDS: (1 << 1), //中国北斗卫星\r\n            GLONASS: (1 << 2), //俄罗斯格洛纳斯卫星\r\n            GALILEO: (1 << 3), //欧洲伽利略卫星\r\n            QZSS: (1 << 4) //日本准天顶卫星\r\n        };\r\n\r\n        jSW.SWPu.prototype = {\r\n            _parent: null,\r\n            _id_pu: null,\r\n            _name_pu: null,\r\n            _info_pu: null,\r\n            _arr_channel: null,\r\n            _arr_gps: null,\r\n            _arr_tsp: null,\r\n            _gps_attr: null,\r\n\r\n            swReboot: function () {\r\n                return jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    istart: Boolean,\r\n                    ilength: Number(存储时间长度，单位秒， -1表示一直录像),\r\n                    callback: function(sender, response, data){\r\n                    },\r\n                    tag: tag\r\n                }\r\n            */\r\n            swSetPuManualrecord: function (options) {\r\n                var payload = new proto.BVCU.PUConfig.ManualRecord();\r\n\r\n                var dft_options = {\r\n                    istart: 1,\r\n                    ilength: -1,\r\n                    callback: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                payload.setBstart(options.istart);\r\n                payload.setIlength(jSWProtocol.Int2Uint(options.ilength));\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._parent,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_MANUALRECORD,\r\n                    target: this._id_pu,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n\r\n            swPuControl: function (options) {\r\n                var rc = jSWProtocol.CheckOptions(proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_REBOOT_OR_SHUTDOWN, options);\r\n                if (rc != jSW.RcCode.RC_CODE_S_OK) {\r\n                    return rc;\r\n                }\r\n\r\n                var payload = new proto.WEBBVCU.PU_CONTROL();\r\n                payload.setIoption(options.ioption);\r\n\r\n                rc = jSWProtocol.SendRequest({\r\n                    session: this._parent,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_REBOOT_OR_SHUTDOWN,\r\n                    target: this._id_pu,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    istart: 1-开始抓拍，0-停止抓拍 2-按指定周期数抓拍,\r\n                    icyclecount: // 指定的抓拍周期数，当iStart==2 时有意义,\r\n                    szftpid: // 抓拍图片上传服务器ID，如果ID为空，表示不需要上传。,\r\n                    callback: function(sender, response, data){\r\n                    },\r\n                    tag: Object\r\n                };\r\n            */\r\n            swSetPuSnapshot: function (options) {\r\n                var payload = new proto.BVCU.PUConfig.Snapshot();\r\n\r\n                var dft_options = {\r\n                    istart: 0,\r\n                    icyclecount: 0,\r\n                    szftpid: null,\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                payload.setBstart(options.istart);\r\n                payload.setIcyclecount(options.icyclecount);\r\n                payload.setSzftpid(options.szftpid);\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._parent,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_SNAPSHOT,\r\n                    target: this._id_pu,\r\n                    payload: payload,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swGetChanel: function (chanelId) {\r\n                for (var i = 0; i < this._arr_channel.length; i++) {\r\n                    if (this._arr_channel[i]._id_chanel == chanelId) {\r\n                        return this._arr_channel[i];\r\n                    }\r\n                }\r\n\r\n                for (var i = 0; i < this._arr_gps.length; i++) {\r\n                    if (this._arr_gps[i]._id_chanel == chanelId) {\r\n                        return this._arr_gps[i];\r\n                    }\r\n                }\r\n\r\n                for (var i = 0; i < this._arr_tsp.length; i++) {\r\n                    if (this._arr_tsp[i]._id_chanel == chanelId) {\r\n                        return this._arr_tsp[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            },\r\n\r\n            _innerCommUpdata: function (options) {\r\n                var baseInfo = options.getPubaseinfo();\r\n                var chanellist = options.getChannellistList();\r\n                this._info_pu = {\r\n                    bootduration: baseInfo.getIbootduration(),\r\n                    boottime:\r\n                        {\r\n                            year: baseInfo.getStboottime().getIyear(),\r\n                            month: baseInfo.getStboottime().getImonth(),\r\n                            day: baseInfo.getStboottime().getIday(),\r\n                            hour: baseInfo.getStboottime().getIhour(),\r\n                            minute: baseInfo.getStboottime().getIminute(),\r\n                            second: baseInfo.getStboottime().getIsecond()\r\n                        },\r\n                    chanelcount: chanellist.length,\r\n                    chanellist: [],\r\n                    id: baseInfo.getSzid(),\r\n                    lat: baseInfo.getIlatitude(),\r\n                    long: baseInfo.getIlongitude(),\r\n                    name: baseInfo.getSzpuname(),\r\n                    onlinestatus: baseInfo.getIonlinestatus(),\r\n                    onlinethrough: baseInfo.getIonlinethrough(),\r\n                    onlinetime:\r\n                        {\r\n                            year: baseInfo.getStonlinetime().getIyear(),\r\n                            month: baseInfo.getStonlinetime().getImonth(),\r\n                            day: baseInfo.getStonlinetime().getIday(),\r\n                            hour: baseInfo.getStonlinetime().getIhour(),\r\n                            minute: baseInfo.getStonlinetime().getIminute(),\r\n                            second: baseInfo.getStonlinetime().getIsecond()\r\n                        }\r\n                };\r\n                this._id_pu = this._info_pu.id;\r\n                this._name_pu = this._info_pu.name;\r\n\r\n                this._arr_channel = [];\r\n                this._arr_gps = [];\r\n                this._arr_tsp = [];\r\n\r\n                for (var i = 0; i < chanellist.length; i++) {\r\n                    var chanelType = jSWProtocol.ChanelType.getType(chanellist[i].getIchannelindex());\r\n                    var chanelRecord = null;\r\n                    if (chanelType == jSWProtocol.ChanelType.chanel) {\r\n                        var chanel = new jSW.SWVideoChanel(this, chanellist[i]);\r\n                        this._arr_channel.push(chanel);\r\n                        chanelRecord = chanel;\r\n                    } else if (chanelType == jSWProtocol.ChanelType.gps) {\r\n                        var gps = new jSW.SWGPSChanel(this, chanellist[i]);\r\n                        this._arr_gps.push(gps);\r\n                        chanelRecord = gps;\r\n                    } else if (chanelType == jSWProtocol.ChanelType.tsp) {\r\n                        var tsp = new jSW.SWTSPChanel(this, chanellist[i]);\r\n                        this._arr_tsp.push(tsp);\r\n                        chanelRecord = tsp;\r\n                    }\r\n\r\n                    this._info_pu.chanellist.push(chanelRecord);\r\n                }\r\n\r\n                jSWUtils.debugLogInfo(this._info_pu.id + \"\" + \"v:\" + this._arr_channel.length + \",g\" + this._arr_gps.length);\r\n            },\r\n\r\n            _internalUpdate: function (options) {\r\n\r\n                this._innerCommUpdata(options);\r\n\r\n                if (this._info_pu.onlinestatus == 0) {\r\n                    this._clear();\r\n                }\r\n            },\r\n\r\n            compare: function (objPu) {\r\n                if (this._parent.compare(objPu._parent)) {\r\n                    return (this._id_pu == objPu._id_pu);\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            _clear: function () {\r\n\r\n                for (var i = 0; i < this._arr_channel.length; i++) {\r\n                    this._arr_channel[i]._clear();\r\n                }\r\n\r\n                for (var i = 0; i < this._arr_gps.length; i++) {\r\n                    if (this._arr_gps[i]._info_chanel.status == 0) {\r\n                        this._arr_gps[i].swClose();\r\n                    }\r\n                }\r\n\r\n                for (var i = 0; i < this._arr_tsp.length; i++) {\r\n                    if (this._arr_tsp[i]._info_chanel.status == 0) {\r\n                        this._arr_tsp[i].swClose();\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        jSW.CommonDlgMgr = function (session) {\r\n            this._session = session;\r\n            this._arraydlg = [];\r\n        }\r\n\r\n        jSW.CommonDlgMgr.prototype = {\r\n            push: function (commdlg) {\r\n                var deskey = this.buildKey(commdlg.getHDlg());\r\n                this._arraydlg[deskey] = commdlg;\r\n            },\r\n            createAndSave: function (chanel, hDlg) {\r\n                var aimDlg = new jSW.CommonDlg(chanel);\r\n                this.push(aimDlg, hDlg);\r\n                return aimDlg;\r\n            },\r\n            get: function (key) {\r\n                return this._arraydlg[this.buildKey(key)];\r\n            },\r\n            getSession: function () {\r\n                return this._session;\r\n            },\r\n            each: function (dlgHandle, scope, tag) {\r\n                for (iindex in this._arraydlg) {\r\n                    if (this._arraydlg[iindex]) {\r\n                        if (scope) {\r\n                            if (dlgHandle.bind(scope)(this._arraydlg[iindex], tag)) {\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            if (dlgHandle(this._arraydlg[iindex], tag)) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            free: function (hdlg) {\r\n                this._arraydlg[this.buildKey(hdlg)] = null;\r\n            },\r\n            buildKey: function (hdlg) {\r\n                return \"dlg\" + hdlg;\r\n            },\r\n            getDefault: function () {\r\n                var rcCommDlg = null;\r\n                this.each(function (commDlg) {\r\n                    if (rcCommDlg == null) {\r\n                        rcCommDlg = commDlg; return true;\r\n                    }\r\n                });\r\n                return rcCommDlg;\r\n            }\r\n        }\r\n\r\n        jSW.CommonDlg = function (channel, hDlg) {\r\n            this._channel = channel;\r\n            this._hDlg = hDlg;\r\n            this._mdiv = null;\r\n            this._dlgParams = null;\r\n            this._media = 0;\r\n            this._rotate = 0;\r\n            this._prototype = -1;\r\n            this._info = \"\";\r\n        }\r\n\r\n        jSW.CommonDlg.prototype = {\r\n            getkey: function () {\r\n                return this._hDlg;\r\n            },\r\n            compare: function (dlg) {\r\n                if (this.getkey() == dlg.getkey()) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            getHDlg: function () {\r\n                return this._hDlg;\r\n            },\r\n            getDlgParams: function () {\r\n                if (this._dlgParams == null) {\r\n                    this._dlgParams = jSWProtocol.BVCU_DialogParam(this._channel._parent._id_pu, this._channel._id_chanel, 0, this._prototype, 0, 0, this._hDlg);\r\n                }\r\n                return this._dlgParams;\r\n            },\r\n            getPlayDiv: function () {\r\n                return this._mdiv;\r\n            },\r\n            setParams: function (div, hdlg, media, prototype) {\r\n                this._mdiv = div;\r\n                this._hDlg = hdlg;\r\n                this._media = media;\r\n                this._prototype = prototype;\r\n            },\r\n            getMedia: function () {\r\n                return this._media;\r\n            },\r\n            getRotate: function () {\r\n                return this._rotate;\r\n            },\r\n            setRotate: function (val) {\r\n                this._rotate = val;\r\n            },\r\n            getProteType: function () {\r\n                return this._prototype;\r\n            },\r\n            getOpts: function (opts) {\r\n                if (!opts) {\r\n                    opts = {\r\n                        hdl: -1\r\n                    };\r\n                }\r\n                opts.hdlg = this._hDlg;\r\n                return opts;\r\n            },\r\n            getInfo: function () {\r\n                if (this._info == \"\") {\r\n                    this._info = this._channel._parent._id_pu + ' ' + this._channel._id_chanel + ' ' + this._hDlg;\r\n                }\r\n                return this._info;\r\n            },\r\n            onMediaChange: function (imedia) {\r\n                this._media = imedia;\r\n            },\r\n            _reset: function () {\r\n                this._media = 0;\r\n            },\r\n            setHdlg: function (hDlg) {\r\n                this._hDlg = hDlg;\r\n            }\r\n        }\r\n\r\n        // ---- SWVideoChanel  视频通道----\r\n        jSW.SWVideoChanel = function (parent, options) {\r\n            this._parent = parent;\r\n            this._info_chanel = {\r\n                id: options.getIchannelindex(),\r\n                name: options.getSzname(),\r\n                ptz: options.getIptz(),\r\n                media: options.getImediadir() >> 10,\r\n                status: options.getImediadir() & 0x000003ff\r\n            };\r\n            this._id_chanel = this._info_chanel.id;\r\n            this._name_chanle = this._info_chanel.name;\r\n            this._meida_chanel = this._info_chanel.media;\r\n            this._ptz_chanel = this._info_chanel.ptz;\r\n            this._url_channel = null;\r\n            this.m_live_hls = null;\r\n            this.m_live_rtmp = null;\r\n            this._session = this._parent._parent;\r\n            this._commDlgMgr = new jSW.CommonDlgMgr(this._session);\r\n            this.ismuti = false;\r\n            this._open_status = jSW.SWVideoChanel._OpenStatus.NOT_OPEND;\r\n            this._intercom = new jSW.SWVideoChanel.InterCom(this);\r\n        };\r\n\r\n        jSW.SWVideoChanel._OpenStatus = {\r\n            NOT_OPEND: 0,\r\n            OPENING: 1,\r\n            OPENED: 2\r\n        };\r\n\r\n        jSW.SWVideoChanel._OcxFullScreen = {\r\n            _lastVideoChanel: null,\r\n            _hDlg: -1,\r\n            beforeFullScreen: function (m_chanel, hdlg) {\r\n                this._lastVideoChanel = m_chanel;\r\n                this._hDlg = hdlg;\r\n            },\r\n            onClickEsc: function () {\r\n                if (jSWOptions.CheckOcx()) {\r\n                    if (document.msFullscreenElement) {\r\n                        document.msExitFullscreen();\r\n                    }\r\n                }\r\n            },\r\n            upDateDialog: function () {\r\n                if (this._lastVideoChanel) {\r\n                    this._lastVideoChanel._updateDialog(this._hDlg);\r\n                }\r\n                if (!document.msFullscreenElement) {\r\n                    this._lastVideoChanel = null;\r\n                }\r\n            },\r\n\r\n            onFullScreenChange: function () {\r\n                setTimeout(jSW.SWVideoChanel._OcxFullScreen.upDateDialog.bind(jSW.SWVideoChanel._OcxFullScreen), 200);\r\n            }\r\n        };\r\n\r\n        ///key id 27 esc\r\n        (function () {\r\n            document.addEventListener(\"keydown\", function () {\r\n                var event = window.event || arguments[0];\r\n                if (event.keyCode == 27) {\r\n                    jSW.SWVideoChanel._OcxFullScreen.onClickEsc();\r\n                }\r\n            });\r\n        })();\r\n\r\n        jSW.SWVideoChanel.prototype = {\r\n            m_prototype: 4,\r\n\r\n            /*\r\n             * options : {\r\n             *    Idelayvssmooth : Number\r\n             * }\r\n             */\r\n            swSetControlParam: function (options) {\r\n                var rc = jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                if (jSWOptions.CheckOcx()) {\r\n                    if (typeof options[\"Idelayvssmooth\"] == undefined) {\r\n                        return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                    }\r\n                    var payload = new proto.WEBBVCU.ParamsDialogControl();\r\n                    payload.setIdelayvssmooth(options[\"Idelayvssmooth\"]);\r\n                    var rc = this._autoDlgSendProxy(options, function (data) {\r\n                        return {\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_DIALOG_PARAM,\r\n                            payload: payload\r\n                        };\r\n                    });\r\n                    return rc;\r\n                }\r\n                return rc;\r\n            },\r\n\r\n            /**video source type*/\r\n            swSrcType: function () {\r\n                if (this.m_prototype == jSWProtocol.ProtoType.HLS) {\r\n                    return 'hls';\r\n                } else if (this.m_prototype == jSWProtocol.ProtoType.OCX) {\r\n                    return 'ocx';\r\n                } else if (this.m_prototype == jSWProtocol.ProtoType.RTMP) {\r\n                    return 'rtmp';\r\n                }\r\n\r\n                return 'unknown';\r\n            },\r\n\r\n            localRecords: [],\r\n\r\n            _notifyDialogEventStorage: function (msgType, eventStorage) {\r\n                var localRecord = null;\r\n                var isContains = false;\r\n                for (iIndex in this.localRecords) {\r\n                    localRecord = this.localRecords[iIndex];\r\n                    if (localRecord.szfilename == eventStorage.szfilename) {\r\n                        isContains = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!isContains) {\r\n                    localRecord = {\r\n                        iresult: jSW.RcCode.RC_CODE_S_OK,\r\n                        szfilename: eventStorage.szfilename,\r\n                        itimestampbegin: 0,\r\n                        itimestampend: 0\r\n                    };\r\n                    this.localRecords.push(localRecord);\r\n                }\r\n\r\n                switch (msgType) {\r\n                    case proto.WEBBVCU.MSGType.WEB_NOTIFY_BVCU_EVENT_STORAGE_FILE_OPEN:\r\n                        localRecord.itimestampbegin = eventStorage.itimestamp;\r\n                        localRecord.iresult = eventStorage.iresult;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_NOTIFY_BVCU_EVENT_STORAGE_FILE_CLOSE:\r\n                        localRecord.itimestampend = eventStorage.itimestamp;\r\n                        localRecord.iresult = eventStorage.iresult;\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_NOTIFY_BVCU_EVENT_STORAGE_ERROR:\r\n                        localRecord.iresult = eventStorage.iresult;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                if (msgType == proto.WEBBVCU.MSGType.WEB_NOTIFY_BVCU_EVENT_STORAGE_FILE_CLOSE ||\r\n                    msgType == proto.WEBBVCU.MSGType.WEB_NOTIFY_BVCU_EVENT_STORAGE_ERROR) {\r\n                    if (this._callbackAfterRecordHasResult != null) {\r\n                        var data = {\r\n                            channel: this,\r\n                            storage: localRecord\r\n                        };\r\n                        this._callbackAfterRecordHasResult(data)\r\n                    }\r\n                }\r\n            },\r\n\r\n            _callbackAfterRecordHasResult: null,\r\n            _videoPlayer: null,\r\n            _iVideoPlayerRotate: 0,\r\n            _OnNeedSaveVideoPlayer: function (videoplayer) {\r\n                this._videoPlayer = videoplayer;\r\n                this._iVideoPlayerRotate = 0;\r\n            },\r\n\r\n            /**fullscreen: full screen, Esc key exit*/\r\n            swFullScreen: function (opts) {\r\n                var rc = this._autoDlgProxy(opts, function (commDlg, session, targetid, targetindex, hdlg) {\r\n                    if (jSWOptions.CheckOcx()) {\r\n                        var myDivId = commDlg.getPlayDiv().bv_uuid + '_0077554' + \"tempdiv\";\r\n                        var myDiv = document.getElementById(myDivId);\r\n                        if (!document.onmsfullscreenchange) {\r\n                            document.onmsfullscreenchange = jSW.SWVideoChanel._OcxFullScreen.onFullScreenChange;\r\n                        }\r\n                        if (document.msFullscreenElement) {\r\n                            document.msExitFullscreen();\r\n                        } else {\r\n                            jSW.SWVideoChanel._OcxFullScreen.beforeFullScreen(this, hdlg);\r\n                            myDiv.msRequestFullscreen();\r\n                        }\r\n                    }\r\n                    else if (jSWOptions.calltype == jSW.CallProtoType.HTTP) {\r\n                        if (!this._videoPlayer.isFullscreen()) {\r\n                            this._videoPlayer.requestFullscreen();\r\n                        } else {\r\n                            this._videoPlayer.exitFullscreen();\r\n                        }\r\n                    }\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            swGetDialogInfo: function (options) {\r\n                var payload = new proto.BVCU.CMSConfig.CMSCFG_DialogInfo();\r\n                var pbStTarget = new proto.BVCU.CMSConfig.CMSCFG_ChannelInfo();\r\n                pbStTarget.setSzid(this._parent._id_pu);\r\n                payload.setSttarget(pbStTarget);\r\n                payload.setIchannelindex(this._id_chanel);\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._parent._parent,\r\n                    payload: payload,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_GET_CMS_DIALOGINFO,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            /*\r\n                opitons = {\r\n                    irotate: jSWProtocol.RotateType ,\r\n                    callback: function(Options, Response){\r\n                    }\r\n                    tag: Object\r\n                }\r\n            */\r\n            swVideoRotate: function (options) {\r\n                var rc = this._autoDlgProxy(options, function (commDlg, session, targetid, targetindex, hdlg) {\r\n                    var iRotate = commDlg.getRotate();\r\n                    iRotate += options.irotate;\r\n                    if (jSWOptions.CheckOcx()) {\r\n                        var rc = this._swOnDivSizeChange(iRotate, hdlg, options);\r\n                        return rc;\r\n                    }\r\n                    else if (jSWOptions.CheckHttp()) {\r\n                        if (this._videoPlayer == null) {\r\n                            jSWUtils.debugLogInfo(targetid + \" \" + targetindex + \" video rotate faild, due not playing\");\r\n                            return jSW.RcCode.RC_CODE_E_FAIL;\r\n                        }\r\n                        this._videoPlayer.zoomrotate({\r\n                            rotate: this._iVideoPlayerRotate,\r\n                            debug: false\r\n                        });\r\n                        setTimeout(options.callback, 50, { tag: options.tag }, { emms: { code: jSW.RcCode.RC_CODE_S_OK } });\r\n                        return jSW.RcCode.RC_CODE_S_OK;\r\n                    }\r\n                });\r\n                return rc;\r\n            },\r\n\r\n\r\n            /**\r\n             * options: {\r\n             *  bStretch: Boolean,\r\n             *  callback: function(){},\r\n             *  tag: object\r\n             * }\r\n             */\r\n            swVideoStretch: function (options) {\r\n                var rc = this._autoDlgSendProxy(options, function (data) {\r\n                    var payload = new proto.WEBBVCU.CommonData();\r\n                    payload.setIdata1(options.bStretch ? 1 : 0);\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_VIDEO_DIALOG_STRETCH,\r\n                        payload: payload\r\n                    };\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /**\r\n             * options: {\r\n             *  iQuality: Number Default(100),\r\n             *  szFileName: String\r\n             *  callback: function(){},\r\n             *  tag: object,\r\n             *  hdlg: Number\r\n             * }\r\n             */\r\n            swLocalSnapshot: function (options) {\r\n                if (!options.szFileName || options.szFileName.length == 0) {\r\n                    console.log(\"swLocalSnapshot SzFilePath Is Invalid\");\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n                var rc = this._autoDlgSendProxy(options, function (data) {\r\n                    var payload = new proto.WEBBVCU.CommonData();\r\n                    payload.setIdata1(options.iQuality ? options.iQuality : 100);\r\n                    payload.setSzdata(jSWUtils.string2Uint8Array(options.szFileName));\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_LOCAL_SNAPSHOT,\r\n                        payload: payload\r\n                    };\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _updateDialog: function (hDlg) {\r\n                var rc = jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                if (jSWOptions.CheckOcx()) {\r\n                    var rc = this._commSendProxy(options, function () {\r\n                        return {\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_VIDEO_DIALOG_UPDATE,\r\n                            hdlg: hDlg,\r\n                        };\r\n                    });\r\n                    return rc;\r\n                }\r\n                return rc;\r\n            },\r\n\r\n            _swOnDivSizeChange: function (irotate, hdlg, options) {\r\n                var payload = new proto.WEBBVCU.VideoDialogRotate();\r\n                payload.setSzpuid(jSWUtils.string2Uint8Array(this._parent._id_pu));\r\n                payload.setIchannelindex(this._id_chanel);\r\n                payload.setIrotate(irotate);\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._parent._parent,\r\n                    payload: payload,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_VIDEO_DIALOG_ROTATE,\r\n                    hdlg: hdlg,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            _onOcxChanelChange: function (isVideo, isOpen, iMedir) {\r\n                if (jSW.CallProtoType.OCX != jSWOptions.calltype) {\r\n                    return;\r\n                }\r\n            },\r\n\r\n            //one chanel muti open\r\n            _pushCommDlg: function (commDlg) {\r\n                this._commDlgMgr.push(commDlg);\r\n            },\r\n\r\n            _beginOpen: function () {\r\n                if (!this.ismuti) {\r\n                    this._open_status = jSW.SWVideoChanel._OpenStatus.OPENING;\r\n                }\r\n            },\r\n\r\n            _endOpenHasResult: function (bresult) {\r\n                if (!this.ismuti) {\r\n                    if (bresult) {\r\n                        this._open_status = jSW.SWVideoChanel._OpenStatus.OPENED;\r\n                    } else {\r\n                        this._open_status = jSW.SWVideoChanel._OpenStatus.NOT_OPEND;\r\n                    }\r\n                }\r\n            },\r\n\r\n            _closeHasResult: function (bresult) {\r\n                if (!this.ismuti) {\r\n                    if (bresult) {\r\n                        this._open_status = jSW.SWVideoChanel._OpenStatus.NOT_OPEND;\r\n                    }\r\n                }\r\n            },\r\n\r\n            _checkCanOpen: function (bmuti) {\r\n                this.ismuti = bmuti;\r\n                if (this.ismuti) {\r\n                    return true;\r\n                }\r\n                return this._open_status == jSW.SWVideoChanel._OpenStatus.NOT_OPEND;\r\n            },\r\n\r\n            _fillOpenParam: function (bismuti) {\r\n                this.ismuti = bismuti;\r\n            },\r\n\r\n            _autoDlgProxy: function (opts, handle, tag) {\r\n                var hdlg = this._getOptsHdlg(opts);\r\n                if (this.ismuti && (typeof hdlg == \"undefined\" || hdlg == -1)) {\r\n                    console.log(\"can't find the dialog from you hdlg\");\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n                var tCommDlg = this.ismuti ? this._commDlgMgr.get(hdlg) : this._commDlgMgr.getDefault();\r\n\r\n                if (tCommDlg == null) {\r\n                    console.log(\"can't find the dialog from you hdlg, maybe it's been closed\");\r\n                    return jSW.RcCode.RC_CODE_E_NOTFOUND;\r\n                }\r\n\r\n                hdlg = tCommDlg.getHDlg();\r\n                var rc = this._commProxy(function (session, targetId, targetIndex) {\r\n                    return handle.bind(this)(tCommDlg, session, targetId, targetIndex, hdlg, tag);\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _getOptsHdlg: function (opts) {\r\n                if (opts && typeof opts.hdlg != \"undefined\") {\r\n                    return opts.hdlg;\r\n                }\r\n                return -1;\r\n            },\r\n\r\n            _getDesDiv: function (div) {\r\n                if (typeof div == \"string\") {\r\n                    return document.getElementById(div);\r\n                }\r\n                return div;\r\n            },\r\n            //\r\n            _commProxy: function (handle) {\r\n                if (null == this._parent || null == this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n                return handle.bind(this)(this._parent._parent, this._parent._id_pu, this._id_chanel);\r\n            },\r\n\r\n            _commSendProxy: function (opts, handleGetData) {\r\n                var rc = this._commProxy(function (session, targetId, targetIndex) {\r\n                    var dftData = {\r\n                        payload: null,\r\n                        msgtype: -1,\r\n                        cmd: \"\",\r\n                        hdlg: -1,\r\n                        callback: opts ? opts.callback : null,\r\n                        tag: opts ? opts.tag : null\r\n                    };\r\n                    var desData = handleGetData.bind(this)();\r\n\r\n                    desData = jSWUtils.extend({}, dftData, desData || {});\r\n\r\n                    var rc = jSWProtocol.SendRequest({\r\n                        session: session,\r\n                        target: targetId,\r\n                        targetIndex: targetIndex,\r\n                        msgtype: desData.msgtype,\r\n                        callback: desData.callback,\r\n                        payload: desData.payload,\r\n                        hdlg: desData.hdlg,\r\n                        tag: desData.tag,\r\n                        cmd: desData.cmd\r\n                    });\r\n\r\n                    return rc;\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            _autoDlgSendProxy: function (opts, handleGetData, afterhandle) {\r\n                var rc = this._autoDlgProxy(opts, function (commDlg, session, targetId, targetIndex, hdlg) {\r\n                    var dftData = {\r\n                        payload: null,\r\n                        msgtype: -1,\r\n                        cmd: \"\",\r\n                        hdlg: -1,\r\n                        callback: null,\r\n                        tag: null\r\n                    };\r\n                    var desData = handleGetData.bind(this)(commDlg);\r\n\r\n                    desData = jSWUtils.extend({}, dftData, desData || {});\r\n\r\n                    var rc = jSWProtocol.SendRequest({\r\n                        session: session,\r\n                        target: targetId,\r\n                        targetIndex: targetIndex,\r\n                        msgtype: desData.msgtype,\r\n                        callback: opts.callback,\r\n                        payload: desData.payload,\r\n                        hdlg: hdlg,\r\n                        tag: opts.tag,\r\n                        cmd: desData.cmd\r\n                    });\r\n                    if (afterhandle) {\r\n                        afterhandle.bind(this)(commDlg);\r\n                    }\r\n                    return rc;\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        bovertcp: ,\r\n                        cmd: 'login',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        url: url\r\n                    }\r\n                },\r\n                tag: userdata\r\n            };*/\r\n            swOpen: function (options) {\r\n                var rc = this._commProxy(function (session, targetId, targetIndex) {\r\n                    var dft_options = {\r\n                        callback: null,\r\n                        tag: null,\r\n                        prototype: 'auto',\r\n                        media: jSW.MEDIADIR.VIDEORECV\r\n                    };\r\n                    options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                    var ptRet = this._eventHandle.getProtoType(options.prototype, options.useoptions.bHttpFlv);\r\n                    if (jSW.RcCode.bFaild(ptRet.rc)) {\r\n                        return ptRet.rc;\r\n                    }\r\n                    var prototype = ptRet.prototype;\r\n                    var div = options.tag.div;\r\n                    var playObj = null;\r\n                    var isNeedDelay = false;\r\n\r\n                    var bWindowless = options.useoptions.bwindowless;\r\n                    var bHttpFlv = options.useoptions.bHttpFlv;\r\n\r\n                    if (null == div) {\r\n                        console.warn('no have div ,we will not display the video stream, just throw stream url');\r\n                    } else {\r\n\r\n\r\n                        var opendivparam = this._eventHandle.beforeOpenPreparePlayDiv(prototype, div, bWindowless, bHttpFlv);\r\n                        playObj = opendivparam.playObj;\r\n                        isNeedDelay = opendivparam.isNeedDelay;\r\n                    }\r\n\r\n                    var boverTcp = options.useoptions.bovertcp ? true : false;\r\n                    var sendCmd = this._eventHandle.sendOpenChanel;\r\n\r\n                    var dialog_param = jSWProtocol.BVCU_DialogParam(targetId, targetIndex, 0, prototype, options.media, 0, 0, boverTcp);\r\n                    var bstretch = options.useoptions.bstretch ? true : false;\r\n                    if (bstretch) {\r\n                        dialog_param.setBstretch(true);\r\n                    }\r\n                    if (bWindowless) {\r\n                        dialog_param.setBwindowless(true);\r\n                    }\r\n\r\n                    if (isNeedDelay) {\r\n                        setTimeout(function () { sendCmd(session, options, playObj, dialog_param); }, 500);\r\n                    } else {\r\n                        return sendCmd(session, options, playObj, dialog_param);\r\n                    }\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                });\r\n                return rc;\r\n            },\r\n            /**var options = {\r\n                div: 'div_id', // div or div id\r\n                prototype: 'auto', //rtmp > hls\r\n                callback: function(options, response) {\r\n                    options = options;\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request\r\n                    }\r\n                },\r\n                tag: Object,\r\n                ismuti: false,\r\n                bstretch: false,\r\n                bwindowless: false\r\n            };*/\r\n            swOpenEx: function (options) {\r\n                var dft_options = {\r\n                    callback: null,\r\n                    div: '',\r\n                    prototype: 'auto',\r\n                    media: jSW.MEDIADIR.VIDEORECV,\r\n                    bovertcp: false,\r\n                    tag: null,\r\n                    ismuti: false,\r\n                    bstretch: false,\r\n                    bwindowless: false,\r\n                    bHttpFlv: false\r\n                };\r\n\r\n                var uoptions = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                if (uoptions.prototype == \"httpflv\") {\r\n                    uoptions.prototype = \"rtmp\";\r\n                    uoptions.bHttpFlv = true;\r\n                }\r\n\r\n                if (!this._eventHandle.checkMedia(uoptions.media)) {\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                if (!this._checkCanOpen(uoptions.ismuti)) {\r\n                    if (!options.ismuti) {\r\n                        console.log(\"current open chanel model is mutil open!\");\r\n                    }\r\n                    var rc = jSW.RcCode.RC_CODE_E_ALREADYEXIST;\r\n                    console.log(jSW.RcCode.trans(rc));\r\n                    return jSW.RcCode.RC_CODE_E_ALREADYEXIST;\r\n                }\r\n\r\n                this._beginOpen();\r\n\r\n                uoptions.div = this._getDesDiv(uoptions.div);\r\n                if (uoptions.div == null) {\r\n                    console.warn('no have div ,we will not display the video stream, just throw stream url');\r\n                }\r\n\r\n                var result = this.swOpen({\r\n                    prototype: uoptions.prototype,\r\n                    tag: { div: uoptions.div, channel: this, userdata: uoptions.tag },\r\n                    useoptions: uoptions,\r\n                    media: uoptions.media,\r\n                    callback: this._eventHandle.onSwOpenExHasResult\r\n                });\r\n\r\n                if (jSW.RcCode.bFaild(result)) {\r\n                    this._endOpenHasResult(false);\r\n                }\r\n                return result;\r\n            },\r\n\r\n            _eventHandle: {\r\n                getProtoType: function (optionsPT, bHttpFlv) {\r\n                    var ret = {\r\n                        rc: jSW.RcCode.RC_CODE_S_OK,\r\n                        prototype: -1\r\n                    };\r\n                    var prototype = -1;\r\n                    if (jSWOptions.calltype == jSW.CallProtoType.OCX) {\r\n                        prototype = jSWProtocol.ProtoType.OCX;\r\n                    }\r\n                    else {\r\n                        if ('hls' == optionsPT) {\r\n                            prototype = jSWProtocol.ProtoType.HLS;\r\n                        }\r\n                        else if ('rtmp' == optionsPT) {\r\n                            if (bHttpFlv || jSWUtils.supportFlash()) {\r\n                                prototype = jSWProtocol.ProtoType.RTMP;\r\n                            } else {\r\n                                console.error('not supported flash (rtmp)');\r\n                                ret.rc = jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (bHttpFlv || jSWUtils.supportFlash()) {\r\n                                prototype = jSWProtocol.ProtoType.RTMP;\r\n                            } else {\r\n                                prototype = jSWProtocol.ProtoType.HLS;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    ret.prototype = prototype;\r\n                    return ret;\r\n                },\r\n                sendOpenChanel: function (p_session, p_options, p_playObject, p_dialog_param) {\r\n                    if (p_playObject != null) {\r\n                        if (jSWProtocol.ProtoType.OCX == p_dialog_param.getProto()) {\r\n                            p_dialog_param.setHwnd(p_playObject.GetWMHwnd());\r\n                        }\r\n                        p_playObject.style.display = 'block';\r\n                        if (p_dialog_param.getBwindowless()) {\r\n                            p_dialog_param.setHplayhandle(p_playObject.GetWMHwnd());\r\n                        }\r\n                    }\r\n\r\n                    var open_param = jSWProtocol.JsonParamDialog(p_session._p_emms,\r\n                        proto.WEBBVCU.MSGType.WEB_BVCU_OPEN_CHANLE,\r\n                        p_dialog_param);\r\n\r\n                    var rc = jSWProtocol._internalSend({\r\n                        cmd: jSWProtocol.RequestHeader.openchanle.cmd,\r\n                        session: p_session,\r\n                        request: open_param,\r\n                        callback: p_options.callback,\r\n                        opt: p_options,\r\n                        tag: p_options.tag\r\n                    });\r\n                    return rc;\r\n                },\r\n                beforeOpenPreparePlayDiv: function (prototype, parentdiv, bWindowless, bHttpFlv) {\r\n                    var playObject = null;\r\n                    var isNeedDelay = false;\r\n\r\n                    /**隐藏播放器div, 防止重叠*/\r\n                    {\r\n                        if (typeof (parentdiv.bv_uuid) == \"undefined\") {\r\n                            parentdiv.bv_uuid = jSWUtils.generateUUID();\r\n                        }\r\n\r\n                        var objDivId = parentdiv.bv_uuid + '_0077553'; /**ID附属*/\r\n                        var objDiv = document.getElementById(objDivId);\r\n                        if (objDiv != null) {\r\n                            objDiv.style.display = 'none';\r\n                        }\r\n\r\n                        objDivId = parentdiv.bv_uuid + '_0077554'; /**ID附属*/\r\n                        objDiv = document.getElementById(objDivId);\r\n                        if (objDiv != null) {\r\n                            objDiv.style.display = 'none';\r\n                        }\r\n                    }\r\n\r\n                    if (jSWProtocol.ProtoType.HLS == prototype || jSWProtocol.ProtoType.RTMP == prototype) {\r\n                        var playObjectId = parentdiv.bv_uuid + '_0077553'; /**ID附属*/\r\n                        playObject = document.getElementById(playObjectId);\r\n                        if (playObject == null) {\r\n                            playObject = document.createElement('VIDEO');\r\n                            playObject.setAttribute('id', playObjectId);\r\n                            playObject.setAttribute('class', 'video-js vjs-default-skin vjs-big-play-centered');\r\n                            // playObject.setAttribute('poster', '/js/my_video_poster.png');\r\n                            playObject.style.width = '100%';\r\n                            playObject.style.height = '100%';\r\n                            playObject.style.display = 'block';\r\n                            parentdiv.appendChild(playObject);\r\n                        }\r\n                    }\r\n                    else if (jSWProtocol.ProtoType.OCX == prototype) {\r\n                        var playObjectId = parentdiv.bv_uuid + '_0077554'; /**ID附属*/\r\n                        var myTempDivId = playObjectId + \"tempdiv\";\r\n                        playObject = document.getElementById(playObjectId);\r\n                        if (playObject == null) {\r\n                            var mydiv = document.getElementById(myTempDivId);\r\n                            if (mydiv == null) {\r\n                                mydiv = document.createElement(\"div\");\r\n                                mydiv.id = playObjectId + \"tempdiv\";\r\n                                mydiv.style.width = '100%';\r\n                                mydiv.style.height = '100%';\r\n                            }\r\n                            mydiv.style.display = 'block';\r\n                            parentdiv.appendChild(mydiv);\r\n                            playObject = document.createElement('object');\r\n                            playObject.id = playObjectId;\r\n                            if (bWindowless) {\r\n                                playObject.classid = 'clsid:0c85b239-904a-4adf-8424-f1928b38f12f';\r\n                            } else {\r\n                                playObject.classid = \"clsid:CDE6C639-4BA8-4A09-81EB-DCE76A61FE98\";\r\n                            }\r\n\r\n                            playObject.style.width = '100%';\r\n                            playObject.style.height = '100%';\r\n                            playObject.style.display = 'block';\r\n                            playObject.tag = this;\r\n                            mydiv.appendChild(playObject);\r\n                            isNeedDelay = true;\r\n\r\n                            var playeventid = playObjectId + \"ocxeventid\"\r\n                            var oScript = document.getElementById(playeventid);\r\n                            if (oScript == null) {\r\n                                oScript = document.createElement(\"script\");\r\n                                oScript.id = playObjectId + \"ocxeventid\";\r\n                                oScript.type = \"text/javascript\";\r\n                                oScript.setAttribute('for', playObjectId);\r\n                                oScript.setAttribute('event', 'OnHwndEvent(hwnd, ieventtype, pParam)');\r\n                                oScript.text = 'jSW._swOcxPlayerOnEvent(ieventtype, this.tag);';\r\n                                document.body.appendChild(oScript);\r\n                            }\r\n                        }\r\n                    }\r\n                    return {\r\n                        playObj: playObject,\r\n                        isNeedDelay: isNeedDelay\r\n                    };\r\n                },\r\n                onSwOpenExHasResult: function (options, response, dlgparam) {\r\n                    var payload = response.getPayload();\r\n                    var openDialogResponse = proto.WEBBVCU.Open_Dialog_Response.deserializeBinary(payload);\r\n\r\n                    var videoChannel = options.tag.channel;\r\n                    var userdata = options.tag.userdata;\r\n                    var url = '';\r\n                    var payloadRequest = options.request.getPayload();\r\n                    var requestParam = proto.WEBBVCU.BVCU_DialogParam.deserializeBinary(payloadRequest);\r\n                    var hdlg = -1;\r\n                    var bSuccess = jSW.RcCode.bSuccess(response.getCode());\r\n                    var tprototype = requestParam.getProto();\r\n                    var bHttpFlv = options.opt.useoptions.bHttpFlv;\r\n                    if (bHttpFlv) {\r\n                        var httpFlvHandle = jSW.DependencyMgr.GetModule(\"HttpFlv\");\r\n                    }\r\n\r\n                    if (openDialogResponse.hasUrl()) {\r\n                        url = openDialogResponse.getUrl();\r\n                    }\r\n\r\n                    var dialogparams = null;\r\n\r\n                    if (bSuccess) {\r\n                        if (openDialogResponse.hasHdlg()) {\r\n                            hdlg = openDialogResponse.getHdlg();\r\n                            dlgparam.setParams(options.tag.div, hdlg, requestParam.getMedia(), tprototype);\r\n                            videoChannel._pushCommDlg(dlgparam);\r\n                        }\r\n\r\n                        if (options.session != null) {\r\n                            var puid = requestParam.getId();\r\n                            var major = requestParam.getMajor();\r\n                            var chanel = videoChannel;\r\n                            if (chanel != null) {\r\n                                var urlCurrent;\r\n                                if (tprototype == jSWProtocol.ProtoType.HLS) {\r\n                                    urlCurrent = jSWOptions.http + url;\r\n                                } else if (tprototype == jSWProtocol.ProtoType.RTMP) {\r\n                                    if (bHttpFlv) {\r\n                                        urlCurrent = httpFlvHandle.buildUrlFromRtmpUrl(jSWOptions.ip + \":\" + jSWOptions.port, url);\r\n                                    } else {\r\n                                        urlCurrent = \"rtmp://\" + jSWOptions.ip + url;\r\n                                    }\r\n                                }\r\n                                chanel._url_chanel = {\r\n                                    proto: chanel.swSrcType(),\r\n                                    url: urlCurrent\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (options.tag.div != null && !bHttpFlv &&\r\n                            (tprototype == jSWProtocol.ProtoType.HLS ||\r\n                           tprototype == jSWProtocol.ProtoType.RTMP)) {\r\n\r\n                            // rtmp、hls 在给定的div中添加播放器div\r\n                            var div = options.tag.div;\r\n                            var playObjectId = div.bv_uuid + '_0077553'; /**ID附属*/\r\n                            if (document.getElementById(playObjectId) == null) {\r\n                                console.error('not have player');\r\n                                return;\r\n                            }\r\n\r\n                            var live_hls = null;\r\n                            var live_rtmp = null;\r\n\r\n                            if (tprototype == jSWProtocol.ProtoType.HLS) {\r\n                                live_hls = jSWOptions.http + url;\r\n                            } else if (tprototype == jSWProtocol.ProtoType.RTMP) {\r\n                                live_rtmp = \"rtmp://\" + jSWOptions.ip + url;\r\n                            }\r\n\r\n                            var player = videojs(playObjectId, {\r\n                                controlBar: false, controls: false\r\n                            }, function () {\r\n                                if (tprototype == jSWProtocol.ProtoType.HLS) {\r\n                                    this.src({ type: 'application/vnd.apple.mpegurl', src: live_hls });\r\n                                } else if (tprototype == jSWProtocol.ProtoType.RTMP) {\r\n                                    this.src({ type: \"rtmp/flv\", src: live_rtmp });\r\n                                }\r\n\r\n                                this.play();\r\n                            });\r\n\r\n                            if (videoChannel != null) {\r\n                                videoChannel._OnNeedSaveVideoPlayer(player);\r\n                            }\r\n                        }\r\n                        else if (bHttpFlv) {\r\n                            httpFlvHandle.CreatePlayer(options.tag.div, urlCurrent, dlgparam);\r\n                        }\r\n                        else if (tprototype == jSWProtocol.ProtoType.OCX) {\r\n                            dialogparams = {\r\n                                hdlg: dlgparam._hDlg\r\n                            };\r\n                        }\r\n                    } else {\r\n                    }\r\n\r\n                    var orgopt = options.opt;\r\n                    if (orgopt && orgopt.useoptions) {\r\n                        if (typeof orgopt.useoptions.callback === 'function') {\r\n                            orgopt.useoptions.tag = userdata;\r\n                            orgopt.useoptions.callback(orgopt.useoptions, response, dialogparams);\r\n                        }\r\n                    }\r\n\r\n                    if (orgopt && orgopt.useoptions && orgopt.useoptions.chanel) {\r\n                        orgopt.useoptions.chanel.m_live_hls = live_hls;\r\n                        orgopt.useoptions.chanel.m_live_rtmp = live_rtmp;\r\n                        orgopt.useoptions.chanel.m_live_httpflv = urlCurrent;\r\n                    }\r\n\r\n                    if (videoChannel) {\r\n                        videoChannel._endOpenHasResult(bSuccess);\r\n                    }\r\n                },\r\n                afterCloseDlgClearResource: function (parentdiv) {\r\n                    if (parentdiv) {\r\n                        var playObjectId = parentdiv.bv_uuid + '_0077553'; /**ID附属*/\r\n                        var myTempDiv = document.getElementById(playObjectId + \"tempdiv\");\r\n                        var playObject = document.getElementById(playObjectId);\r\n                        if (playObject != null) {\r\n                            playObject.parentNode.removeChild(playObject);\r\n                            if (myTempDiv != null) {\r\n                                myTempDiv.parentNode.removeChild(myTempDiv);\r\n                            }\r\n                        }\r\n\r\n                        if (typeof videojs != \"undefined\") {\r\n                            try {\r\n                                var player = videojs(playObjectId);\r\n                                if (player) {\r\n                                    player.dispose();\r\n                                    this._videoPlayer = null;\r\n                                }\r\n                            } catch (e) {\r\n                                //console.warn(e.message);\r\n                            }\r\n                        }\r\n\r\n                        playObjectId = parentdiv.bv_uuid + '_0077554'; /**ID附属*/\r\n                        playObject = document.getElementById(playObjectId);\r\n                        myTempDiv = document.getElementById(playObjectId + \"tempdiv\");\r\n                        if (playObject != null) {\r\n                            playObject.parentNode.removeChild(playObject);\r\n                        }\r\n\r\n                        if (myTempDiv != null) {\r\n                            myTempDiv.parentNode.removeChild(myTempDiv);\r\n                        }\r\n\r\n                        var ocxeventid = playObjectId + \"ocxeventid\";\r\n                        var eleocxevent = document.getElementById(ocxeventid);\r\n                        if (eleocxevent) {\r\n                            eleocxevent.parentNode.removeChild(eleocxevent);\r\n                        }\r\n                    }\r\n                },\r\n                _checkMedia: function (srcMedia, szMedia) {\r\n                    var iMaskMedia = 0;\r\n                    for (var iindex in szMedia) {\r\n                        iMaskMedia |= szMedia[iindex];\r\n                    }\r\n                    if (srcMedia | iMaskMedia == iMaskMedia) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                checkMedia: function (srcMedia) {\r\n                    var bresult = false;\r\n                    if (jSWOptions.CheckOcx()) {\r\n                        bresult = this._checkMedia(srcMedia, [jSW.MEDIADIR.VIDEORECV, jSW.MEDIADIR.AUDIORECV]);\r\n                    } else {\r\n                        bresult = this._checkMedia(srcMedia, [jSW.MEDIADIR.VIDEORECV]);\r\n                    }\r\n                    if (!bresult) {\r\n                        console.log(\"the media dir you want to view is not support\");\r\n                    }\r\n                    return bresult;\r\n                }\r\n            },\r\n\r\n            /*\r\n                var options = {\r\n                    volume: {\r\n                        icapture: ,\r\n                        iplay: \r\n                    },\r\n                    callback: function(options, response){\r\n                    },\r\n                    tag: tag\r\n                }\r\n            */\r\n            swAlterVolume: function (options) {\r\n                var rc = this._intercom._volumeProxy(function (volume, hdlg) {\r\n                    if (options.volume === undefined) {\r\n                        return jSW.RcCode.RC_CODE_E_BVCU_INVALIDARG;\r\n                    }\r\n\r\n                    if (options.volume.icapture < 0 || options.volume.icapture > 100 ||\r\n                    options.volume.iplay < 0 || options.volume.iplay > 100) {\r\n                        return jSW.RcCode.RC_CODE_E_BVCU_INVALIDARG;\r\n                    }\r\n\r\n                    var payload = new proto.WEBBVCU.BVCU_DialogControlParam_Render();\r\n                    payload.setIplackbackvolume(options.volume.iplay);\r\n                    payload.setIcapturevolume(options.volume.icapture);\r\n\r\n\r\n                    var rc = this._commSendProxy(options, function () {\r\n                        return {\r\n                            payload: payload,\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_ALTER_VIDEO_VOLUME,\r\n                            cmd: \"swAlterVolume\",\r\n                            hdlg: hdlg,\r\n                        };\r\n                    });\r\n\r\n                    return rc;\r\n                }, this);\r\n\r\n                return rc;\r\n            },\r\n\r\n\r\n            onAlterVolumeOk: function (volume) {\r\n                this._intercom.setVolume(volume);\r\n            },\r\n\r\n            /*\r\n                options: {\r\n                    callback: function(options, response, data){\r\n                        data:{\r\n                            icapture: 0,\r\n                            iplay: 0\r\n                        }\r\n                    },\r\n                    tag: tag\r\n                }\r\n            */\r\n            swGetVolume: function (options) {\r\n                var _valume = null;\r\n\r\n                var rc = this._intercom._volumeProxy(function (volume, hdlg) {\r\n                    _valume = volume;\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                }, this);\r\n\r\n                if (jSW.RcCode.bSuccess(rc)) {\r\n                    var opts = {\r\n                        tag: options.tag\r\n                    };\r\n                    var response = {\r\n                        emms: {\r\n                            code: jSW.RcCode.RC_CODE_S_OK\r\n                        }\r\n                    };\r\n                    setTimeout(options.callback, 50, opts, response, _valume);\r\n                }\r\n                console.log(\"on get volume ok\");\r\n                return rc;\r\n            },\r\n\r\n            onIntercomOpenOk: function (bresult, imedir, hDlg) {\r\n                this._intercom.onOpenHasResult(bresult, imedir, hDlg);\r\n            },\r\n            onIntercomCloseOK: function (bresult) {\r\n                this._intercom.onCloseHasResult(bresult);\r\n            },\r\n            onAlterMedirDirOk: function (isvideo, imedir, hdlg) {\r\n                if (isvideo) {\r\n                    var commDlg = this._commDlgMgr.get(hdlg);\r\n                    if (commDlg) {\r\n                        commDlg.onMediaChange(imedir);\r\n                    }\r\n                } else {\r\n                    this._intercom.onAlterHasResult(imedir);\r\n                }\r\n            },\r\n\r\n            /*\r\n                打开音频对讲\r\n                options:\r\n                {\r\n                    callback: funtion(options, response)\r\n                    {\r\n                        \r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swOpenIntercom: function (options) {\r\n                var rc = this._intercom._openProxy(function (imedia) {\r\n                    var dft_options = {\r\n                        isSendAudio: true,\r\n                        isRecvAudio: true,\r\n                        callback: null,\r\n                        tag: null\r\n                    };\r\n                    options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                    var medir = (options.isSendAudio ? jSW.MEDIADIR.AUDIOSEND : jSW.MEDIADIR.ALLNULL)\r\n                    + (options.isRecvAudio ? jSW.MEDIADIR.AUDIORECV : jSW.MEDIADIR.ALLNULL);\r\n\r\n                    var payload = new proto.WEBBVCU.CommonData();\r\n                    payload.setIdata1(medir);\r\n\r\n                    return this._commSendProxy(options, function () {\r\n                        var dftData = {\r\n                            payload: payload,\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_OPEN_INTERCOM,\r\n                            cmd: \"\",\r\n                            hdlg: -1\r\n                        };\r\n                        return dftData;\r\n                    });\r\n\r\n                    return rc;\r\n                }, this);\r\n                return rc;\r\n            },\r\n\r\n            swCloseIntercom: function (options) {\r\n                var rc = this._intercom._closeProxy(function (hdlg) {\r\n                    return this._commSendProxy(options, function () {\r\n                        var dftData = {\r\n                            payload: null,\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_CLOSE_INTERCOM,\r\n                            cmd: \"\",\r\n                            hdlg: hdlg\r\n                        };\r\n                        return dftData;\r\n                    });\r\n                }, this);\r\n                return rc;\r\n            },\r\n\r\n            //修改音媒体流方向\r\n            swAlterAudioDir: function (options) {\r\n                var rc = this._intercom._alterProxy(function (imedia, hdlg) {\r\n\r\n                    var dftRecvAudio = (imedia & jSW.MEDIADIR.AUDIORECV) == jSW.MEDIADIR.AUDIORECV;\r\n                    var dftSendAudio = (imedia & jSW.MEDIADIR.AUDIOSEND) == jSW.MEDIADIR.AUDIOSEND;\r\n\r\n                    var dft_options = {\r\n                        isSendAudio: dftSendAudio,\r\n                        isRecvAudio: dftRecvAudio,\r\n                        callback: null,\r\n                        tag: null\r\n                    };\r\n\r\n                    options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                    if (options.isRecvAudio == dftRecvAudio && options.isSendAudio == dftSendAudio) {\r\n                        console.log(\"i dont't think you should alter video dir, current status is you wished!\");\r\n                        return jSW.RcCode.RC_CODE_S_OK;\r\n                    }\r\n\r\n                    var imedir = (options.isRecvAudio ? jSW.MEDIADIR.AUDIORECV : jSW.MEDIADIR.ALLNULL)\r\n                    + (options.isSendAudio ? jSW.MEDIADIR.AUDIOSEND : jSW.MEDIADIR.ALLNULL);\r\n                    var payload = new proto.WEBBVCU.CommonData();\r\n                    payload.setIdata1(imedir);\r\n\r\n                    return this._commSendProxy(options, function () {\r\n                        var dftData = {\r\n                            payload: payload,\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_ALTER_AUDIO_DIALOG_DIR,\r\n                            cmd: \"\",\r\n                            hdlg: hdlg\r\n                        };\r\n                        return dftData;\r\n                    });\r\n\r\n                }, this);\r\n\r\n                return rc;\r\n            },\r\n\r\n            swBIsIntercomOpened: function () {\r\n                return this._intercom.bIsOpen();\r\n            },\r\n\r\n            //修改视频媒体流方向\r\n            //hdlg  \r\n            swAlterVideoDir: function (options) {\r\n                if (jSW.CallProtoType.OCX != jSWOptions.calltype) {\r\n                    console.error(\"only ocx support Alert, right now!\");\r\n                    return jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                }\r\n\r\n                var rc = this._autoDlgProxy(options, function (commDlg) {\r\n                    if (commDlg == null) {\r\n                        return jSW.RcCode.RC_CODE_E_NOTFOUND;\r\n                    }\r\n                    var curMedia = commDlg.getMedia();\r\n\r\n                    var dftRecvVideo = (curMedia & jSW.MEDIADIR.VIDEORECV) == jSW.MEDIADIR.VIDEORECV;\r\n                    var dftRecvAudio = (curMedia & jSW.MEDIADIR.AUDIORECV) == jSW.MEDIADIR.AUDIORECV;\r\n                    var dft_options = {\r\n                        isRecvAudio: dftRecvAudio,\r\n                        isRecvVideo: dftRecvVideo,\r\n                        div: null,\r\n                        callback: null,\r\n                        tag: null,\r\n                        hDlg: -1\r\n                    };\r\n\r\n                    options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                    if (options.isRecvAudio == dftRecvAudio && options.isRecvVideo == dftRecvVideo) {\r\n                        console.log(\"i dont't think you should alter video dir, current status is your wished!\");\r\n                        return jSW.RcCode.RC_CODE_S_OK;\r\n                    }\r\n\r\n                    var medir = (options.isRecvAudio ? jSW.MEDIADIR.AUDIORECV : jSW.MEDIADIR.ALLNULL)\r\n                        + (options.isRecvVideo ? jSW.MEDIADIR.VIDEORECV : jSW.MEDIADIR.ALLNULL);\r\n\r\n                    var payload = new proto.WEBBVCU.CommonData();\r\n                    payload.setIdata1(medir);\r\n\r\n                    options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                    var rc = this._autoDlgSendProxy(options, function (data) {\r\n                        return {\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_ALTER_VIDEO_DIALOG_DIR,\r\n                            payload: payload,\r\n                            cmd: jSWProtocol.RequestHeader.altervideodir.cmd\r\n                        };\r\n                    });\r\n\r\n                    return rc;\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n               options={\r\n                   hdlg: hdlg,\r\n                   callbakc: function(sender, response, data){\r\n                   },\r\n                   tag: Object\r\n               }\r\n    \r\n               data: {\r\n                    szpath:String,\r\n                    ifileleninseconds:Number(秒)\r\n               }\r\n           */\r\n            swGetLocalRecord: function (options) {\r\n                if (jSWOptions.CheckNotOcx()) {\r\n                    console.error(\"only ocx support local record\");\r\n                    return jSW.RcCode.RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var rc = this._autoDlgSendProxy(options, function () {\r\n                    var dftData = {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_LOCAL_RECORD,\r\n                    };\r\n                    return dftData;\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options={\r\n                    hdlg: hdlg\r\n                    szpath:String,\r\n                    ifileleninseconds:Number(秒),\r\n                    callbak: function(sender, response, data){\r\n                    },\r\n                    recordCallback: null,\r\n                    tag: Object\r\n                }\r\n            */\r\n            swSetLocalRecord: function (options) {\r\n                if (jSWOptions.CheckNotOcx()) {\r\n                    console.error(\"only ocx support local record\");\r\n                    return RC_CODE_E_FAIL;\r\n                }\r\n\r\n                var dft_options = {\r\n                    szpath: \"\",\r\n                    ifileleninseconds: -1,\r\n                    callbak: null,\r\n                    recordCallback: null,\r\n                    tag: null\r\n                };\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var payload = new proto.WEBBVCU.LocalStorage();\r\n                payload.setDir(jSWUtils.string2Uint8Array(options.szpath));\r\n                payload.setIfileleninseconds((Number)(options.ifileleninseconds));\r\n                this._callbackAfterRecordHasResult = options.recordCallback;\r\n\r\n                var rc = this._autoDlgSendProxy(options, function () {\r\n                    var dftData = {\r\n                        payload: payload,\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_LOCAL_RECORD,\r\n                    };\r\n                    return dftData;\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options={\r\n                    istart:Number,\r\n                    ilength:Number(秒),\r\n                    callback: function(sender, response){\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swSetNruRecord: function (options) {\r\n\r\n                var dft_options = {\r\n                    istart: 0,\r\n                    ilength: -1,\r\n                    imediadir: 0,\r\n                    callbak: null,\r\n                    recordCallback: null,\r\n                    tag: null\r\n                };\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var payload = new proto.BVCU.NRUConfig.ManualRecord();\r\n                payload.setSzid(this._parent._id_pu);\r\n                payload.setIchannelindex(this._id_chanel);\r\n                payload.setBstart(options.istart);\r\n                payload.setIlength(options.ilength);\r\n                payload.setImediadir(options.imediadir);\r\n                //this._callbackAfterRecordHasResult = options.recordCallback;\r\n\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._parent._parent,\r\n                    payload: payload,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_SUBMETHOD_NRU_MANUALRECORD,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swGetUrl: function () {\r\n                return this._url_chanel;\r\n            },\r\n\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'snapshot',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        url: url\r\n                    }\r\n                },\r\n                tag: userdata\r\n            };*/\r\n            swSnapshot: function (options) {\r\n                var dft_options = {\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var rc = this._autoDlgSendProxy(options, function () {\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_SNAPSHOT\r\n                    };\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'getptzattr',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        url: url\r\n                    }\r\n                },\r\n                tag: userdata\r\n            };*/\r\n            swGetPtzAttr: function (options) {\r\n                if (null == this._parent && this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var dft_options = {\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var bvcuCmd = new jSWProtocol.BVCU_Command(this._parent._id_pu, this._id_chanel);\r\n\r\n                var getPtzAttrCmd = jSWProtocol.RequestHeader.getptzattr;\r\n                var getptzattr_param = new jSWProtocol.JsonParamCommand(session._p_emms, getPtzAttrCmd.requestHeader, bvcuCmd);\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.getptzattr.cmd,\r\n                    session: session,\r\n                    cmd: getPtzAttrCmd.cmd,\r\n                    request: getptzattr_param,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n\r\n            swSetPtzAttr: function (options) {\r\n\r\n            },\r\n\r\n            /**var options = {\r\n                ptzCtrl:{\r\n                    iPTZCommand: 0,\r\n                    bStop: 0,\r\n                    iParam1: 0,\r\n                    iParam2: 0,\r\n                    iParam3: 0\r\n                },\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'ptzctrl',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request\r\n                    }\r\n                },\r\n                tag: userdata\r\n            };*/\r\n            swPtzCtrl: function (options) {\r\n                if (null == this._parent && this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n\r\n\r\n                var dft_options = {\r\n                    ptzCtrl: {\r\n                        iPTZCommand: 0,\r\n                        bStop: 1,\r\n                        iParam1: 0,\r\n                        iParam2: 0,\r\n                        iParam3: 0\r\n                    },\r\n                    callback: null,\r\n                    tag: null\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var ptz = new proto.BVCU.PUConfig.PTZControl();\r\n\r\n                ptz.setIptzcommand(options.ptzCtrl.iPTZCommand);\r\n                ptz.setBstop(options.ptzCtrl.bstop);\r\n                ptz.setIparam1(options.ptzCtrl.iparam1);\r\n                ptz.setIparam2(options.ptzCtrl.iparam2);\r\n                ptz.setIparam3(options.ptzCtrl.iparam3);\r\n\r\n                var bvcuCmd = new jSWProtocol.BVCU_Command(this._parent._id_pu, this._id_chanel, ptz);\r\n\r\n                var ptzCtrl_param = new jSWProtocol.JsonParamCommand(session._p_emms, proto.WEBBVCU.MSGType.WEB_BVCU_SET_PTZ, bvcuCmd);\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.ptzctrl.cmd,\r\n                    session: session,\r\n                    request: ptzCtrl_param,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            _swKeepLiveDlg: function (commDlg) {\r\n                var opts = commDlg.getOpts();\r\n                var rc = this._autoDlgSendProxy(opts, function () {\r\n                    return {\r\n                        msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_KEEPALIVE,\r\n                        payload: null,\r\n                        cmd: jSWProtocol.RequestHeader.keeplive.cmd\r\n                    };\r\n                });\r\n                console.log('keeplive chanel: ' + commDlg.getInfo());\r\n                return rc;\r\n            },\r\n\r\n            swKeepLive: function () {\r\n                this._commDlgMgr.each(this._swKeepLiveDlg, this);\r\n\r\n                this._intercom._keep_alive(function (hdlg) {\r\n                    var opts = { hdlg: hdlg };\r\n                    this._commSendProxy(opts, function () {\r\n                        return {\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_KEEPALIVE,\r\n                            payload: null,\r\n                            cmd: jSWProtocol.RequestHeader.keeplive.cmd\r\n                        };\r\n                    });\r\n                }, this);\r\n            },\r\n\r\n            swHide: function (opts) {\r\n                this._autoDlgProxy(opts, function (commDlg, session, targetid, targetindex) {\r\n                    var mdiv = commDlg.getPlayDiv();\r\n                    var playObjectId = mdiv + '_0077553'; /**ID附属*/\r\n\r\n                    try {\r\n                        if (videojs && typeof videojs != \"undefined\") {\r\n                            var player = videojs(playObjectId);\r\n                            if (player) {\r\n                                player.dispose();\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        //console.warn(e.message);\r\n                    }\r\n\r\n                    var playObject = document.getElementById(playObjectId);\r\n                    if (playObject != null) {\r\n                        playObject.style.display = 'none';\r\n                    }\r\n\r\n                    // ocx\r\n                    playObjectId = mdiv.bv_uuid + '_0077554'; /**ID附属*/\r\n                    playObject = document.getElementById(playObjectId);\r\n                    if (playObject != null) {\r\n                        playObject.style.display = 'none';\r\n                    }\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                });\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            swShow: function (opts) {\r\n                this._autoDlgProxy(opts, function (commDlg, session, targetid, targetindex, hdlg) {\r\n                    var mdiv = commDlg.getPlayDiv();\r\n                    var prototype = commDlg.getProteType();\r\n                    if (prototype == jSWProtocol.ProtoType.HLS || prototype == jSWProtocol.ProtoType.RTMP) {\r\n                        var playObjectId = mdiv.bv_uuid + '_0077553'; /**ID附属*/\r\n                        var playObject = document.getElementById(playObjectId);\r\n                        if (playObject != null) {\r\n                            playObject.style.display = 'block';\r\n                        } else {\r\n                            playObject = document.createElement('VIDEO');\r\n                            playObject.setAttribute('id', playObjectId);\r\n                            playObject.setAttribute('class', 'video-js vjs-default-skin vjs-big-play-centered');\r\n                            // playObject.setAttribute('poster', '/js/my_video_poster.png');\r\n                            playObject.style.width = '100%';\r\n                            playObject.style.height = '100%';\r\n                            playObject.style.display = 'block';\r\n\r\n                            mdiv.appendChild(playObject);\r\n                        }\r\n\r\n\r\n                        try {\r\n                            var chanel = this;\r\n                            var player = videojs(playObjectId, {\r\n                                controlBar: false, controls: false\r\n                            }, function () {\r\n                                if (prototype == jSWProtocol.ProtoType.HLS) {\r\n                                    this.src({ type: 'application/vnd.apple.mpegurl', src: chanel.m_live_hls });\r\n                                } else if (prototype == jSWProtocol.ProtoType.RTMP) {\r\n                                    this.src({ type: \"rtmp/flv\", src: chanel.m_live_rtmp });\r\n                                }\r\n                                this.play();\r\n                            });\r\n                        } catch (e) {\r\n                            console.warn(e.message);\r\n                        }\r\n                    } else if (prototype == jSWProtocol.ProtoType.OCX) {\r\n                        // ocx\r\n                        playObjectId = mdiv.bv_uuid + '_0077554'; /**ID附属*/\r\n                        playObject = document.getElementById(playObjectId);\r\n                        if (playObject != null) {\r\n                            playObject.style.display = 'block';\r\n                        }\r\n                        setTimeout(this._updateDialog.bind(this), 500, hdlg);\r\n                    }\r\n                });\r\n            },\r\n\r\n            _clear: function () {\r\n                this._commDlgMgr.each(function (commdlg, chanel) {\r\n                    chanel.swClose(commdlg.getHDlg());\r\n                }, this);\r\n            },\r\n\r\n            swClose: function (hdlg) {\r\n                var opts = { hdlg: hdlg };\r\n                var rc = this._autoDlgSendProxy(opts,\r\n                    function (commDlg) {\r\n                        var dlgparma = commDlg.getDlgParams();\r\n                        var httpflvHandle = jSW.DependencyMgr.GetModule(\"HttpFlv\");\r\n                        httpflvHandle.ClosePlayer(commDlg);\r\n                        return {\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_CLOSE_CHANLE,\r\n                            payload: dlgparma,\r\n                            cmd: jSWProtocol.RequestHeader.closechanle.cmd\r\n                        };\r\n                    },\r\n                    function (commDlg) {\r\n                        var desplaydiv = commDlg.getPlayDiv();\r\n                        this._eventHandle.afterCloseDlgClearResource(desplaydiv);\r\n                        this._commDlgMgr.free(commDlg.getHDlg());\r\n                        this._closeHasResult(true);\r\n                        console.log('close chanel: ' + commDlg.getInfo());\r\n                    }\r\n                );\r\n                return rc;\r\n            },\r\n\r\n            compare: function (objChanel) {\r\n                if (this._parent.compare(objChanel._parent)) {\r\n                    return (this._id_chanel == objChanel._id_chanel);\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n\r\n        jSW.SWVideoChanel.InterComStatus = function () {\r\n            this._status = jSW.SWVideoChanel.InterComStatus.Types.INIT;\r\n        }\r\n\r\n        jSW.SWVideoChanel.InterComStatus.Types = {\r\n            INIT: 0,\r\n            DOING: 1,\r\n            DONE: 2\r\n        };\r\n\r\n        jSW.SWVideoChanel.InterComStatus.prototype = {\r\n            reset: function () {\r\n                this._status = jSW.SWVideoChanel.InterComStatus.Types.INIT;\r\n            },\r\n            setDoing: function () {\r\n                this._status = jSW.SWVideoChanel.InterComStatus.Types.DOING;\r\n            },\r\n            setDone: function () {\r\n                this._status = jSW.SWVideoChanel.InterComStatus.Types.DONE;\r\n            },\r\n            bInit: function () {\r\n                return jSW.SWVideoChanel.InterComStatus.Types.INIT == this._status;\r\n            },\r\n            bDoing: function () {\r\n                return jSW.SWVideoChanel.InterComStatus.Types.DOING == this._status;\r\n            },\r\n            bDone: function () {\r\n                return jSW.SWVideoChanel.InterComStatus.Types.DONE == this._status;\r\n            }\r\n        }\r\n\r\n        jSW.SWVideoChanel.InterCom = function (channel) {\r\n            this.status = new jSW.SWVideoChanel.InterComStatus();\r\n            this._commDlg = new jSW.CommonDlg(channel);\r\n            this._channel = channel;\r\n            this._volume = {\r\n                icapture: 50,\r\n                iplay: 50\r\n            };\r\n        }\r\n\r\n        jSW.SWVideoChanel.InterCom.prototype = {\r\n            _getCurMedia: function () {\r\n                return this._commDlg.getMedia();\r\n            },\r\n            _getHdlg: function () {\r\n                return this._commDlg.getHDlg();\r\n            },\r\n            _openProxy: function (handle, scope) {\r\n                if (!jSWOptions.CheckOcx()) {\r\n                    console.log(\"only ocx support intercom\");\r\n                    return jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                }\r\n                var rc = jSW.RcCode.RC_CODE_E_FAIL;\r\n                if (this.status.bDone()) {\r\n                    console.log(\"intercom has opened, can not be open twice! you can call swAlterAudioDir to change medir dir or close it try again!\");\r\n                    return jSW.RcCode.RC_CODE_E_ALREADYEXIST;\r\n                } else if (this.status.bDoing()) {\r\n                    return jSW.RcCode.RC_CODE_E_BUSY;\r\n                } else {\r\n                    this.status.setDoing();\r\n                    rc = handle.bind(scope)(this._getCurMedia());\r\n                    if (jSW.RcCode.bFaild(rc)) {\r\n                        this.status.reset();\r\n                    }\r\n                    return rc;\r\n                }\r\n            },\r\n\r\n            _closeProxy: function (handle, scope) {\r\n                if (!jSWOptions.CheckOcx()) {\r\n                    console.log(\"only ocx support intercom\");\r\n                    return jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                }\r\n\r\n                var rc = jSW.RcCode.RC_CODE_E_FAIL;\r\n                if (this.status.bInit()) {\r\n                    return jSW.RcCode.RC_CODE_E_NOTFOUND;\r\n                } else if (this.status.bDoing()) {\r\n                    return jSW.RcCode.RC_CODE_E_BUSY;\r\n                } else {\r\n                    this.status.setDoing();\r\n                    rc = handle.bind(scope)(this._getHdlg());\r\n                    if (jSW.RcCode.bFaild(rc)) {\r\n                        this.status.setDone();\r\n                    }\r\n                    return rc;\r\n                }\r\n            },\r\n            _alterProxy: function (handle, scope) {\r\n                if (!jSWOptions.CheckOcx()) {\r\n                    console.log(\"only ocx support intercom\");\r\n                    return jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                }\r\n\r\n                var rc = jSW.RcCode.RC_CODE_E_FAIL;\r\n                if (this.status.bInit()) {\r\n                    return jSW.RcCode.RC_CODE_E_NOTFOUND;\r\n                } else if (this.status.bDoing()) {\r\n                    return jSW.RcCode.RC_CODE_E_BUSY;\r\n                } else {\r\n                    rc = handle.bind(scope)(this._getCurMedia(), this._getHdlg());\r\n                    if (jSW.RcCode.bFaild(rc)) {\r\n                    }\r\n                    return rc;\r\n                }\r\n            },\r\n            _volumeProxy: function (handle, scope) {\r\n                if (!jSWOptions.CheckOcx()) {\r\n                    console.log(\"only ocx support intercom\");\r\n                    return jSW.RcCode.RC_CODE_E_UNSUPPORTED;\r\n                }\r\n                var rc = jSW.RcCode.RC_CODE_E_FAIL;\r\n                if (this.status.bInit()) {\r\n                    return jSW.RcCode.RC_CODE_E_NOTFOUND;\r\n                } else if (this.status.bDoing()) {\r\n                    return jSW.RcCode.RC_CODE_E_BUSY;\r\n                } else {\r\n                    rc = handle.bind(scope)(this.__getVolume(), this._getHdlg());\r\n                    if (jSW.RcCode.bFaild(rc)) {\r\n                    }\r\n                    return rc;\r\n                }\r\n            },\r\n\r\n            __getVolume: function () {\r\n                var volume = {\r\n                    icapture: this._volume.icapture,\r\n                    iplay: this._volume.iplay\r\n                };\r\n                return volume;\r\n            },\r\n\r\n            setVolume: function (volume) {\r\n                this._volume = {\r\n                    icapture: volume.icapture,\r\n                    iplay: volume.iplay\r\n                };\r\n            },\r\n\r\n            _clear: function (handle, scope) {\r\n                if (this.status.bDone()) {\r\n                    handle.bind(scope)(this._getHdlg());\r\n                    this._reset();\r\n                }\r\n            },\r\n            _keep_alive: function (handle, scope) {\r\n                if (this.status.bDone()) {\r\n                    handle.bind(scope)(this._getHdlg());\r\n                }\r\n            },\r\n            _reset: function () {\r\n                this.status.reset();\r\n                this._commDlg._reset();\r\n            },\r\n            onAlterHasResult: function (imedia) {\r\n                this._commDlg.onMediaChange(imedia);\r\n                this.status.setDone();\r\n            },\r\n            onOpenHasResult: function (bresult, iMedia, hDlg) {\r\n                if (bresult) {\r\n                    this._commDlg.onMediaChange(iMedia);\r\n                    this._commDlg.setHdlg(hDlg);\r\n                    this.status.setDone();\r\n                } else {\r\n                    this._reset();\r\n                }\r\n            },\r\n            onCloseHasResult: function (bresult) {\r\n                this._reset();\r\n            },\r\n            bIsOpen: function () {\r\n                return this.status.bDone();\r\n            }\r\n        };\r\n\r\n\r\n\r\n        // ---- SWGPSChanel  GPS通道 ----\r\n        jSW.SWGPSChanel = function (parent, options) {\r\n            this._parent = parent;\r\n            this._info_chanel = {\r\n                id: options.getIchannelindex(),\r\n                name: options.getSzname(),\r\n                ptz: options.getIptz(),\r\n                media: options.getImediadir() >> 10,\r\n                status: options.getImediadir() & 0x000003ff\r\n            };\r\n            this._id_chanel = this._info_chanel.id;\r\n            this._name_chanle = this._info_chanel.name;\r\n        };\r\n\r\n        jSW.SWGPSChanel.prototype = {\r\n            _parent: null,\r\n            _id_chanel: null,\r\n            _name_chanel: null,\r\n            _info_chanel: null,\r\n            m_is_open: false,\r\n\r\n            swClose: function () {\r\n                this.m_is_open = false;\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'login',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        gps: BVCU_PUCFG_GPSData\r\n                    }\r\n                },\r\n                tag: userdata,\r\n                repeat: 3, // 重复次数， -1表示无限\r\n                interval: 5000 // 间隔， 单位毫秒\r\n            };*/\r\n            swOpen: function (options) {\r\n                if (null == this._parent || null == this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                this.m_is_open = true;\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var pugpsdataCmd = jSWProtocol.RequestHeader.pugpsdata;\r\n\r\n                var open_param = new jSWProtocol.JsonParamCommand(session._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_GET_PUGPSDATA,\r\n                    jSWProtocol.BVCU_Command(this._parent._id_pu, this._id_chanel, null));\r\n\r\n                var dft_options = {\r\n                    callback: null,\r\n                    tag: null,\r\n                    repeat: 1,\r\n                    interval: 5000\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var callback_send = function (pPptions, pThis) {\r\n                    var isSend = false;\r\n                    if (pPptions.repeat == -1) {\r\n                        isSend = true;\r\n                    } else {\r\n                        if (pPptions.repeat > 0) {\r\n                            pPptions.repeat = pPptions.repeat - 1;\r\n                            isSend = true;\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (isSend && pThis._parent._arr_gps[0].m_is_open) {\r\n                        jSWProtocol._internalSend({\r\n                            cmd: jSWProtocol.RequestHeader.openchanletsp.cmd,\r\n                            session: session,\r\n                            cmd: pugpsdataCmd.cmd,\r\n                            request: open_param,\r\n                            callback: pPptions.callback,\r\n                            tag: pPptions.tag\r\n                        });\r\n\r\n                        setTimeout(function () { callback_send(pPptions, pThis) }, pPptions.interval);\r\n                    }\r\n                };\r\n\r\n                callback_send(options, this);\r\n\r\n                return jSW.RcCode.RC_CODE_S_OK;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    callback: function(options, response, data){\r\n                        data = {\r\n                            \r\n                        }\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swGetGpsAttr: function (options) {\r\n                var rc = jSWProtocol.SendRequest({\r\n                    session: this._parent._parent,\r\n                    msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_GET_PU_GPS,\r\n                    target: this._parent._id_pu,\r\n                    targetIndex: this._id_chanel,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n                return rc;\r\n            },\r\n\r\n            /*\r\n                options = {\r\n                    isenable: Number(0 关闭/ 1 开启),\r\n                    callback: function(sender, response, data){\r\n                    },\r\n                    tag: Object\r\n                }\r\n            */\r\n            swSetPuGpsAttr: function (options) {\r\n                return this.swGetGpsAttr({\r\n                    chanelid: options.chanelid,\r\n                    callback: function (sender, response, data) {\r\n                        var payload = new proto.BVCU.PUConfig.GPSParam();\r\n                        var tag = sender.tag;\r\n                        var option = tag.options;\r\n                        payload.setBenable(option.isenable);\r\n                        payload.setIsetupsatellitesignal(data.isetupsatellitesignal);\r\n                        payload.setIreportinterval(data.ireportinterval);\r\n                        payload.setIreportdistance(data.ireportdistance);\r\n\r\n                        var rc = jSWProtocol.SendRequest({\r\n                            session: tag.session,\r\n                            msgtype: proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_GPS,\r\n                            target: tag.puid,\r\n                            targetIndex: this._id_chanel,\r\n                            payload: payload,\r\n                            callback: options.callback,\r\n                            tag: tag.options.tag\r\n                        });\r\n\r\n                        return rc;\r\n                    },\r\n                    tag: {\r\n                        session: this._parent._parent,\r\n                        options: options,\r\n                        puid: this._parent._id_pu\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        // ---- SWTSPChanel  串口通道----\r\n        jSW.SWTSPChanel = function (parent, options) {\r\n            this._parent = parent;\r\n            this._info_chanel = {\r\n                id: options.getIchannelindex(),\r\n                name: options.getSzname(),\r\n                ptz: options.getIptz(),\r\n                media: options.getImediadir() >> 10,\r\n                status: options.getImediadir() & 0x000003ff\r\n            };\r\n            this._id_chanel = this._info_chanel.id;\r\n            this._name_chanle = this._info_chanel.name;\r\n        };\r\n\r\n        jSW.SWTSPChanel.prototype = {\r\n            _parent: null,\r\n            _id_chanel: null,\r\n            _name_chanel: null,\r\n            _info_chanel: null,\r\n\r\n            swClose: function () {\r\n                if (null == this._parent || null == this._parent._parent) {\r\n                    console.warn('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var dialog_param = jSWProtocol.BVCU_DialogParam(this._parent._id_pu, this._id_chanel, 0, jSWProtocol.ProtoType.OTHER, 0);\r\n                var closechanle_param = jSWProtocol.JsonParamDialog(session._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_CLOSE_CHANLE,\r\n                    dialog_param);\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.closechanle.cmd,\r\n                    session: session,\r\n                    request: closechanle_param\r\n                });\r\n\r\n                console.log('close chanel: ' + this._parent._id_pu + ' ' + this._id_chanel);\r\n                return rc;\r\n            },\r\n\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'login',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        gps: BVCU_PUCFG_GPSData\r\n                    }\r\n                },\r\n                tag: userdata,\r\n            };*/\r\n            swOpen: function (options) {\r\n                if (null == this._parent || null == this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var dialog_param = jSWProtocol.BVCU_DialogParam(this._parent._id_pu, this._id_chanel, 0, jSWProtocol.ProtoType.OTHER, 0);\r\n                var open_param = jSWProtocol.JsonParamDialog(session._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_OPEN_CHANLE_TSP,\r\n                    dialog_param);\r\n\r\n                var dft_options = {\r\n                    callback: null,\r\n                    tag: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.openchanletsp.cmd,\r\n                    session: session,\r\n                    request: open_param,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            /**var options = {\r\n                callback: function(options, response) {\r\n                    options = {\r\n                        session: session,\r\n                        cmd: 'login',\r\n                        request: param,\r\n                        callback: callback,\r\n                        tag: tag\r\n                    }\r\n                    response = {\r\n                        emms: emms,\r\n                        request: request,\r\n                        gps: BVCU_PUCFG_GPSData\r\n                    }\r\n                },\r\n                data: write data,\r\n                tag: user data,\r\n            };*/\r\n            swWrite: function (options) {\r\n                if (null == this._parent || null == this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n                if (options.data == null) {\r\n                    console.error('write data is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var dialog_param = new proto.WEBBVCU.Notify_TSP_Data();\r\n                dialog_param.setTargetid(this._parent._id_pu);\r\n                dialog_param.setTargetindex(this._id_chanel);\r\n\r\n                if (options.data instanceof Uint8Array) {\r\n                }\r\n                else if (options.data instanceof Array) {\r\n                    var desszdata = new Uint8Array(options.data.length);\r\n                    var datatemp = null;\r\n                    var idatatemp = 0;\r\n                    for (iiteindex in options.data) {\r\n                        datatemp = options.data[iiteindex];\r\n                        datatemp = datatemp.replace(\"0x\", \"\");\r\n                        desszdata[iiteindex] += Number(datatemp.charAt(0)) * 16;\r\n                        desszdata[iiteindex] += Number(datatemp.charAt(1));\r\n                    }\r\n                    options.data = desszdata;\r\n                }\r\n                else {\r\n                    options.data = jSWUtils.string2Uint8Array(options.data);\r\n                }\r\n\r\n                dialog_param.setData(options.data);\r\n\r\n                var write_param = jSWProtocol.JsonParamTSPDialog(session._p_emms,\r\n                                            proto.WEBBVCU.MSGType.WEB_BVCU_WRITE_CHANLE_TSP,\r\n                                            dialog_param);\r\n\r\n                var dft_options = {\r\n                    callback: null,\r\n                    data: null,\r\n                    tag: null,\r\n                };\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.writechanletsp.cmd,\r\n                    session: session,\r\n                    request: write_param,\r\n                    callback: options.callback,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            },\r\n\r\n            swKeepLive: function () {\r\n                if (null == this._parent && this._parent._parent) {\r\n                    console.error('internal error, this._parent is null');\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n\r\n                var session = this._parent._parent;\r\n\r\n                var dialog_param = new jSWProtocol.BVCU_DialogParam(this._parent._id_pu, this._id_chanel, 0, jSWProtocol.ProtoType.OTHER, 0);\r\n                var keeplive_param = new jSWProtocol.JsonParamDialog(session._p_emms,\r\n                    proto.WEBBVCU.MSGType.WEB_BVCU_KEEPALIVE,\r\n                    dialog_param);\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: jSWProtocol.RequestHeader.keeplivechanle.cmd,\r\n                    session: session,\r\n                    request: keeplive_param\r\n                });\r\n\r\n                console.log('keeplive tsp chanel: ' + dialog_param.getId() + ' ' + dialog_param.getMajor());\r\n                return rc;\r\n            },\r\n\r\n            compare: function (objChanel) {\r\n                if (this._parent.compare(objChanel._parent)) {\r\n                    return (this._id_chanel == objChanel._id_chanel);\r\n                }\r\n\r\n                return false;\r\n            },\r\n        };\r\n\r\n\r\n        // ---- SWPlayer  播放器, 录像回放----\r\n        jSW.SWPlayer = function (parent, options) {\r\n            this._parent = parent;\r\n\r\n            this._nru_id = options.nruId;\r\n            this._file = options.file;\r\n            this._dialog_id = options.dialogId;\r\n            this._parent_div = options.parentDiv;\r\n            this._player_id = options.playerId;\r\n            this._time_begin = options.time_begin;\r\n            this._time_end = options.time_end;\r\n            this._bar = options.bar;\r\n\r\n            this._bar.restTime(this.swGetDuration() * 1000);\r\n            this._bar.setUserData(this);\r\n            this._closecallback = options.callback;\r\n            this._tag = options.tag;\r\n        };\r\n\r\n        jSW.SWPlayer.prototype = {\r\n            _parent: null, /** session */\r\n            _file: null, /** 文件 */\r\n            _nru_id: null, /** nru id*/\r\n            _dialog_id: -1, /** 会话ID, 唯一标识 */\r\n            _player_id: null, /** 播放器ID */\r\n            _parent_div: null, /** 父div */\r\n            _current_pts: -1,\r\n            _time_begin: -1,\r\n            _time_end: -1,\r\n            _bar: null,\r\n\r\n            _on_update_pts: function (pts) {\r\n                this._current_pts = pts;\r\n\r\n                // var date = new Date(pts)\r\n                // console.log('pts: ' + pts + ' date: ' + date)\r\n                this._bar.changeBar(this.swGetCurrentTime() * 1000);\r\n            },\r\n\r\n            /** 视频时长 */\r\n            swGetDuration: function () {\r\n                return this._time_end - this._time_begin;\r\n            },\r\n\r\n            /** 当前播放进度 */\r\n            swGetCurrentTime: function () {\r\n                if (this._current_pts == -1) {\r\n                    return 0;\r\n                }\r\n                return Math.round(this._current_pts / 1000) - this._time_begin - 8 * 60 * 60; //8时区, pts是北京时间, time_begin是utc时间\r\n            },\r\n\r\n            /** 单帧步进 */\r\n            swStep: function (options) {\r\n\r\n                options = jSWUtils.extend({}, {}, options || {});\r\n\r\n                options.cmdtype = 'STEP'\r\n                options.dialogId = this._dialog_id;\r\n\r\n                return this._parent.swRecordPlayCtrl(options);\r\n            },\r\n\r\n            /** 跳转 */\r\n            swJump: function (options) {\r\n\r\n                options = jSWUtils.extend({}, {}, options || {});\r\n                options.cmdtype = 'PLAY';\r\n                options.dialogId = this._dialog_id;\r\n\r\n                return this._parent.swRecordPlayCtrl(options);\r\n            },\r\n\r\n            /** 播放 */\r\n            swPlay: function (options) {\r\n\r\n                options = jSWUtils.extend({}, {}, options || {});\r\n                options.cmdtype = 'PLAY';\r\n                options.dialogId = this._dialog_id;\r\n\r\n                return this._parent.swRecordPlayCtrl(options);\r\n            },\r\n\r\n            /** 暂停 */\r\n            swPause: function (options) {\r\n\r\n                options = jSWUtils.extend({}, {}, options || {});\r\n                options.cmdtype = 'PAUSE';\r\n                options.dialogId = this._dialog_id;\r\n\r\n                return this._parent.swRecordPlayCtrl(options);\r\n            },\r\n\r\n            /** 关闭 */\r\n            swClose: function (options) {\r\n\r\n                options = jSWUtils.extend({}, {}, options || {});\r\n                options.cmdtype = 'TEARDOWN';\r\n                options.dialogId = this._dialog_id;\r\n\r\n                var rc = this._parent.swRecordPlayCtrl(options);\r\n                this._parent_div.innerHTML = '';\r\n                this._parent_div.bv_uuid = '';\r\n\r\n                this._parent._swDelRecordPlayer(options.dialogId)\r\n                if (this._closecallback) {\r\n                    this._closecallback(this._tag);\r\n                }\r\n                return rc;\r\n            },\r\n        };\r\n\r\n\r\n        // ---- jSWUtils ----\r\n        (function (jSWUtils) {\r\n            jSWUtils.string2Uint8Array = function (str) {\r\n                var bytes = new Array();\r\n                var len, c;\r\n                len = str.length;\r\n                for (var i = 0; i < len; i++) {\r\n                    c = str.charCodeAt(i);\r\n                    if (c >= 0x010000 && c <= 0x10FFFF) {\r\n                        bytes.push(((c >> 18) & 0x07) | 0xF0);\r\n                        bytes.push(((c >> 12) & 0x3F) | 0x80);\r\n                        bytes.push(((c >> 6) & 0x3F) | 0x80);\r\n                        bytes.push((c & 0x3F) | 0x80);\r\n                    } else if (c >= 0x000800 && c <= 0x00FFFF) {\r\n                        bytes.push(((c >> 12) & 0x0F) | 0xE0);\r\n                        bytes.push(((c >> 6) & 0x3F) | 0x80);\r\n                        bytes.push((c & 0x3F) | 0x80);\r\n                    } else if (c >= 0x000080 && c <= 0x0007FF) {\r\n                        bytes.push(((c >> 6) & 0x1F) | 0xC0);\r\n                        bytes.push((c & 0x3F) | 0x80);\r\n                    } else {\r\n                        bytes.push(c & 0xFF);\r\n                    }\r\n                }\r\n                return bytes;\r\n            };\r\n\r\n            jSWUtils.getJsonString = function (jsonObj) {\r\n                return JSON.stringify(jsonObj);\r\n            };\r\n\r\n            jSWUtils.getJsonObject = function (jsonStr) {\r\n                return jQuery.parseJSON(jsonStr);\r\n            };\r\n\r\n            jSWUtils.isIE = function () {\r\n                if (!!window.ActiveXObject || \"ActiveXObject\" in window)\r\n                    return true;\r\n                else\r\n                    return false;\r\n            };\r\n\r\n            jSWUtils.supportFlash = function () {\r\n                if (jSWUtils.isIE()) {\r\n                    try {\r\n                        var swf1 = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\r\n                        return true;\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                }\r\n                else {\r\n                    try {\r\n                        var swf2 = navigator.plugins['Shockwave Flash'];\r\n                        if (swf2 != undefined) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            jSWUtils.ManEmitCallback = function (options, rc, data) {\r\n                var opts = { tag: options.tag };\r\n                var resp = { emms: rc };\r\n                var callback = options.callback;\r\n                setTimeout(function () {\r\n                    callback(opts, resp, data);\r\n                }, 50);\r\n            }\r\n\r\n            jSWUtils.CheckAsyncOption = function (options, afterCheck) {\r\n                var rc = jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                if (options && options.callback) {\r\n                    rc = afterCheck();\r\n                }\r\n                return rc;\r\n            }\r\n\r\n            jSWUtils.consoleLog = function (str, rc) {\r\n                console.log(str + (rc == jSW.RcCode.RC_CODE_S_OK ? 'Ok' : 'Failed'));\r\n            }\r\n\r\n            jSWUtils.debugLog = function (str, rc) {\r\n                if (jSWUtils._IsDebug) {\r\n                    this.consoleLog(str, rc);\r\n                }\r\n            }\r\n\r\n            jSWUtils.debugLogInfo = function (str) {\r\n                if (jSWUtils._IsDebug) {\r\n                    console.log(str);\r\n                }\r\n            }\r\n\r\n            jSWUtils._IsDebug = false;\r\n\r\n            jSWUtils.ManualAsyncReply = function (callback, rcCode, data, tag) {\r\n                setTimeout(function () {\r\n                    callback({ tag: tag }, { emms: { code: rcCode } }, data);\r\n                }, 100);\r\n            }\r\n\r\n            /**\r\n            swAjax ( {\r\n                data: {age: 20, name: 'tony'},\r\n                type: 'post',\r\n                cache: false,\r\n                dataType: 'json',\r\n                success: function (data, status) { },\r\n                error: function (xhr, errMsg, errorThrown) { } // errMsg: null, \"timeout\", \"error\", \"notmodified\"、\"parsererror\"\r\n            } );*/\r\n            jSWUtils.ajax = function (url, options) {\r\n                jQuery.ajax(url, options);\r\n            };\r\n\r\n            jSWUtils.extend = function (dst, dft, src) {\r\n                return jQuery.extend(dst, dft, src);\r\n            };\r\n\r\n            jSWUtils._getSessionById = function (sessionId) {\r\n                var sessionList = jSWOptions.session_list;\r\n                var session = null;\r\n                var i = 0;\r\n                for (i = 0; i < sessionList.length; i++) {\r\n                    session = sessionList[i];\r\n                    if (session && session._p_emms.getSession()) {\r\n                        if (sessionId == session._p_emms.getSession()) {\r\n                            return session;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            jSWUtils.generateUUID = function () {\r\n                var d = new Date().getTime();\r\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                    var r = (d + Math.random() * 16) % 16 | 0;\r\n                    d = Math.floor(d / 16);\r\n                    return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                });\r\n                return uuid;\r\n            };\r\n\r\n            jSWUtils.FilterPath = function (path) {\r\n                var srcPath = path;\r\n                srcPath = srcPath.replace(\"\\:\", \"\");\r\n                srcPath = srcPath.replace(/\\\\\\\\/g, \"/\");\r\n                srcPath = srcPath.replace(/\\\\/g, \"/\");\r\n                var aa = srcPath.split(\"/\");\r\n                var desPath = \"\";\r\n                for (var iIndex = 0; iIndex < aa.length; iIndex++) {\r\n                    if (iIndex != 1) {\r\n                        desPath += aa[iIndex];\r\n                        if (iIndex != aa.length - 1) {\r\n                            desPath += \"/\";\r\n                        }\r\n                    }\r\n                }\r\n                return desPath;\r\n            }\r\n\r\n            jSWUtils.PathParse = function (path) {\r\n                var srcPath = path;\r\n                srcPath = srcPath.replace(\"\\:\", \"\");\r\n                srcPath = srcPath.replace(/\\\\\\\\/g, \"/\");\r\n                srcPath = srcPath.replace(/\\\\/g, \"/\");\r\n                var aa = srcPath.split(\"/\");\r\n                var fileName = aa[aa.length - 1];\r\n                var bb = fileName.split(\"_\");\r\n                return {\r\n                    szpuid: bb[0] + \"_\" + bb[1],\r\n                    ichannelindex: bb[2]\r\n                };\r\n            }\r\n        })(jSWUtils);\r\n\r\n\r\n        // ---- 通信协议jSWProtocol ----\r\n        (function (jSWProtocol) {\r\n\r\n            jSWProtocol.JudgeIdType = function (id) {\r\n                var judgeResult = {\r\n                    bPu: false,\r\n                    bCu: false,\r\n                    bUa: false,\r\n                    bUx: false\r\n                };\r\n\r\n                if (id.indexOf(\"PU_\") == 0) {\r\n                    judgeResult.bPu = true;\r\n                } else if (id.indexOf(\"CU_\") == 0) {\r\n                    judgeResult.bCu = true;\r\n                } else if (id.indexOf(\"UA_\") == 0) {\r\n                    judgeResult.bUa = true;\r\n                } else if (id.indexOf(\"UX_\") == 0) {\r\n                    judgeResult.bUx = true;\r\n                }\r\n                return judgeResult;\r\n            }\r\n\r\n            jSWProtocol.BuildEventOptions = function (cmd, request, session, tag) {\r\n                var eventOptions = {\r\n                    cmd: cmd,\r\n                    request: request,\r\n                    session: session,\r\n                    tag: tag\r\n                };\r\n                return eventOptions;\r\n            }\r\n\r\n            jSWProtocol.BuildResponse = function (iResult, request) {\r\n                var response = {\r\n                    emms: {\r\n                        code: iResult\r\n                    },\r\n                    request: request\r\n                };\r\n                return response;\r\n            }\r\n\r\n            /**通道类型*/\r\n            jSWProtocol.ChanelType = {\r\n                unknow: 'type_unknow',\r\n                chanel: 'type_chanel',\r\n                gps: 'type_gps',\r\n                tsp: 'type_tsp',\r\n                custom: 'type_custom',\r\n\r\n                getType: function (major) {\r\n                    //DialogTarget.iIndexMajor取值范围与通道类型\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MIN_CHANNEL = 0;  //音视频通道\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MAX_CHANNEL = 0x00FFFF;\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MIN_GPS = 0x010000; //GPS设备数据\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MAX_GPS = 0x0100FF;\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MIN_TSP = 0x010100;//透明串口设备数据\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MAX_TSP = 0x0101FF;\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MIN_CUSTOM = 0xF00000;//自定义设备数据\r\n                    var BVCU_SUBDEV_INDEXMAJOR_MAX_CUSTOM = 0xF000FF;\r\n\r\n                    if (major >= BVCU_SUBDEV_INDEXMAJOR_MIN_CHANNEL &&\r\n                        major <= BVCU_SUBDEV_INDEXMAJOR_MAX_CHANNEL) {\r\n                        return jSWProtocol.ChanelType.chanel;\r\n                    } else if (major >= BVCU_SUBDEV_INDEXMAJOR_MIN_GPS &&\r\n                        major <= BVCU_SUBDEV_INDEXMAJOR_MAX_GPS) {\r\n                        return jSWProtocol.ChanelType.gps;\r\n                    } else if (major >= BVCU_SUBDEV_INDEXMAJOR_MIN_TSP &&\r\n                        major <= BVCU_SUBDEV_INDEXMAJOR_MAX_TSP) {\r\n                        return jSWProtocol.ChanelType.tsp;\r\n                    }\r\n                    else if (major >= BVCU_SUBDEV_INDEXMAJOR_MIN_CUSTOM &&\r\n                       major <= BVCU_SUBDEV_INDEXMAJOR_MAX_CUSTOM) {\r\n                        return jSWProtocol.ChanelType.custom;\r\n                    } else {\r\n                        return jSWProtocol.ChanelType.unknow;\r\n                    }\r\n                },\r\n            };\r\n\r\n            /**请求命令*/\r\n            jSWProtocol.RequestHeader = {\r\n                notifys: {\r\n                    notify: { cmd: 'notify' },\r\n                    notify_pu_onoffline: { cmd: 'notify_pu_onoffline' },\r\n                    notify_event_source: { cmd: 'notify_event_source' },\r\n                    notify_tsp_data: { cmd: 'notify_tsp_data' },\r\n                    notify_down_from_pu: { cmd: 'notify_down_from_pu' },\r\n                    notify_pu_apply_for_opening_dialog: { cmd: 'notify_pu_apply_for_opening_dialog' },\r\n                    notifyimmsg: { cmd: 'notifyimmsg' },\r\n                    notify_down_from_nru: {cmd: 'notify_down_from_nru'}\r\n                },\r\n                confnotify: {\r\n                    notifyconfcreate: { cmd: 'notifyconfcreate' },\r\n                    notifyconfstart: { cmd: 'notifyconfstart' },\r\n                    notifyconfdelete: { cmd: 'notifyconfdelete' },\r\n                    notifyconfstop: { cmd: 'notifyconfstop' },\r\n                    notifyparticipartoradd: { cmd: 'notifyparticipartoradd' },\r\n                    notifyparticipartorjoin: { cmd: 'notifyparticipartorjoin' },\r\n                    notifyparticipartorremove: { cmd: 'notifyparticipartorremove' },\r\n                    notifyparticipartorexit: { cmd: 'notifyparticipartorexit' },\r\n                    notifyapplyforstartspeak: { cmd: 'notifyapplyforstartspeak' },\r\n                    notifyapplyforendspeak: { cmd: 'notifyapplyforendspeak' },\r\n                    notifyinvitespeak: { cmd: 'notifyinvitespeak' },\r\n                    notifyterminatespeak: { cmd: 'notifyterminatespeak' },\r\n                    notifyparticipartorleave: { cmd: 'notifyparticipartorleave' },\r\n                    notifyparticipartorreturn: { cmd: 'notifyparticipartorreturn' },\r\n                    notifyparticipatormodify: { cmd: 'notifyparticipatormodify' },\r\n                    notifyimmsg: { cmd: 'notifyimmsg' },\r\n                    notifyaacoperate: { cmd: 'notifyaacoperate' },\r\n                    notifybaseinfo: { cmd: 'notifybaseinfo' }\r\n                },\r\n                pubkey: { cmd: 'pubkey' },\r\n                login: { cmd: 'login' },\r\n                logout: { cmd: 'logout' },\r\n                keeplive: { cmd: 'keeplive' },\r\n                pulist: { cmd: 'pulist' },\r\n                openchanle: { cmd: 'openchanle' },\r\n                altervideodir: { cmd: 'altervideodir' },\r\n                keeplivechanle: { cmd: 'keeplivechanle' },\r\n                openchanletsp: { cmd: 'openchanletsp' },\r\n                writechanletsp: { cmd: 'writechanletsp' },\r\n                closechanle: { cmd: 'closechanle' },\r\n                pugpsdata: { cmd: 'pugpsdata' },\r\n                searchlist: { cmd: 'searchlist' },\r\n                recordfile_del: { cmd: 'recordfile_del' },\r\n                vod: { cmd: 'vod' },\r\n                snapshot: { cmd: 'snapshot' },\r\n                getptzattr: { cmd: 'getptzattr' },\r\n                setptzattr: { cmd: 'setptzattr' },\r\n                ptzctrl: { cmd: 'ptzctrl' },\r\n                getconflist: { cmd: 'getconflist' },\r\n                getconfinfo: { cmd: 'getconfinfo' },\r\n                confaudiorecord: { cmd: 'confaudiorecord' },\r\n                confimsend: { cmd: 'confimsend' },\r\n                getonuserlist: { cmd: 'getonuserlist' },\r\n                createconf: { cmd: 'createconf' },\r\n                deleteconf: { cmd: 'deleteconf' },\r\n                particularadd: { cmd: 'particularadd' },\r\n                particularremove: { cmd: 'particularremove' },\r\n                applyforspeak: { cmd: 'applyforspeak' },\r\n                applyforendspeak: { cmd: 'applyforendspeak' },\r\n                confstart: { cmd: 'confstart' },\r\n                confend: { cmd: 'confend' },\r\n                invitespeak: { cmd: 'invitespeak' },\r\n                terminalspeak: { cmd: 'terminalspeak' },\r\n                confleave: { cmd: 'confleave' },\r\n                confreturn: { cmd: 'confreturn' },\r\n                pucfg: {\r\n                    getpudeviceinfo: { cmd: \"getpudeviceinfo\" },\r\n                    getpuethernet: { cmd: \"getpuethernet\" },\r\n                    getpuradionetwork: { cmd: \"getpuradionetwork\" },\r\n                    getpuwifi: { cmd: \"getpuwifi\" },\r\n                    getPuPower: { cmd: \"getPuPower\" },\r\n                    getPuOnlineControl: { cmd: \"getPuOnlineControl\" },\r\n                    getPuUpdateStatus: { cmd: \"getPuUpdateStatus\" },\r\n                    getPuLinkactionList: { cmd: \"getPuLinkactionList\" },\r\n                    getPuCarInfo: { cmd: \"getPuCarInfo\" },\r\n                    getPuZfyInfo: { cmd: \"getPuZfyInfo\" },\r\n                    setPuZfyInfo: { cmd: \"setPuZfyInfo\" },\r\n                    getPuServers: { cmd: \"getPuServers\" }\r\n                },\r\n\r\n                usercfg: {\r\n                    modgroupinfo: { cmd: \"modgroupinfo\" },\r\n                    moduserinfo: { cmd: \"moduserinfo\" },\r\n                    moduserpwd: { cmd: \"moduserpwd\" },\r\n                    addgroup: { cmd: \"addgroup\" },\r\n                    adduser: { cmd: \"adduser\" },\r\n                    delgroup: { cmd: \"delgroup\" },\r\n                    deluser: { cmd: \"deluser\" },\r\n                    getgrouplist: { cmd: \"getgrouplist\" }\r\n                },\r\n\r\n                recordplay: {\r\n                    play: { cmd: 'recordplay_play' },\r\n                    pause: { cmd: 'recordplay_pause' },\r\n                    teardown: { cmd: 'recordplay_teardown' }\r\n                },\r\n\r\n                compare: function (src, des) {\r\n                    if (src.req == des.req && src.subreq == des.subreq)\r\n                        return true;\r\n                    else\r\n                        return false;\r\n                }\r\n            };\r\n\r\n            /**打开视频使用的协议*/\r\n            jSWProtocol.ProtoType = {\r\n                HLS: 1,\r\n                RTMP: 2,\r\n                OCX: 4,\r\n                HTTP_FLV: 6,\r\n                OTHER: 5, /*串口等*/\r\n            };\r\n\r\n            jSWProtocol.RotateType = {\r\n                RIGHT90: 90,\r\n                LEFT90: -90\r\n            };\r\n            /**\r\n             * dft_options = {\r\n             *     session: null,\r\n             *     msgtype: -1,\r\n             *     target: \"\",\r\n             *     targetIndex: -1,\r\n             *     payload: null,\r\n             *     cmd: \"\",\r\n             *     callback: null,\r\n             *     tag: null\r\n             * }\r\n             */\r\n            jSWProtocol.SendRequest = function (options) {\r\n\r\n                dft_options = {\r\n                    session: null,\r\n                    msgtype: -1,\r\n                    target: \"\",\r\n                    targetIndex: -1,\r\n                    payload: null,\r\n                    cmd: \"\",\r\n                    hdlg: -1,\r\n                    callback: null,\r\n                    callbackrelay: null,\r\n                    tag: null,\r\n                    _dhcb: null,\r\n                    _dhcbtag: null\r\n                }\r\n\r\n                options = jSWUtils.extend({}, dft_options, options || {});\r\n\r\n                var param = this.JsonParamCommand(options.session._p_emms,\r\n                    options.msgtype,\r\n                    jSWProtocol.BVCU_Command(options.target, options.targetIndex, options.payload, options.hdlg));\r\n\r\n                var attchdata = null;\r\n\r\n                if (options.callbackrelay != null) {\r\n                    attchdata = {\r\n                        callback: options.callbackrelay,\r\n                        options: {\r\n                            tag: options.tag\r\n                        },\r\n                        _dhcbtag: options._dhcbtag\r\n                    };\r\n                }\r\n\r\n                var rc = jSWProtocol._internalSend({\r\n                    cmd: options.cmd,\r\n                    session: options.session,\r\n                    request: param,\r\n                    callback: options.callback,\r\n                    attchdata: attchdata,\r\n                    tag: options.tag\r\n                });\r\n\r\n                return rc;\r\n            }\r\n\r\n            /**控制协议, 为用户登录、鉴权提供支持，其数据的输入输出都在EmmsHeader中。*/\r\n            jSWProtocol.EmmsHeader = function (appkey, version) {\r\n                this.key = appkey;/**GUID\t分配给应用用于访问API的Key，请求消息中必需。\tM/O*/\r\n                this.ver = version;/**[1-9][0-9]?\\.[0-9]\tAPI协议版本，请求消息中¬必需。当前版本1.0.\tM/O*/\r\n                this.session = '';/**GUID\t会话ID，请求用户特定信息必需。\tM/O*/\r\n                this.id = 0; /**命令唯一ID*/\r\n                this.code = 0;/**int\t错误编码，响应消息中必需。\tM/O*/\r\n            }\r\n\r\n            jSWProtocol.GetPuLanguageByIndex = function (iLanguageIndex) {\r\n                if (iLanguageIndex == 0)\r\n                    return \"INVALID\";\r\n                else if (iLanguageIndex == 1) {\r\n                    return 'ENGLISH';\r\n                }\r\n                else if (iLanguageIndex == 2) {\r\n                    return 'CHINESE_SIMPLIFIED';\r\n                }\r\n                else if (iLanguageIndex == 3) {\r\n                    return 'CHINESE_TRADITIONAL';\r\n                }\r\n            };\r\n\r\n            jSWProtocol.BVCU_ServerParam = function (serverIP, serverPort, userName, password) {\r\n                this.server = serverIP;\r\n                this.port = serverPort;\r\n                this.user = userName;\r\n                this.password = password;\r\n            }\r\n\r\n            /**jSWProtocol.ProtoType*/\r\n            jSWProtocol.BVCU_DialogParam = function (pId, pMajor, pMinor, pProto, pMedia, pHwnd, hDlg, bOverTcp) {\r\n                var param = new proto.WEBBVCU.BVCU_DialogParam();\r\n                param.setId(pId);\r\n                param.setMajor(pMajor);\r\n                param.setMinor(pMinor);\r\n                param.setProto(pProto);\r\n                param.setMedia(pMedia);\r\n                param.setHdlg(hDlg);\r\n                if (bOverTcp) {\r\n                    param.setBovertcp(1);\r\n                }\r\n                if (pHwnd != \"undefined\") {\r\n                    param.setHwnd(pHwnd);\r\n                }\r\n                return param;\r\n            }\r\n\r\n            jSWProtocol.BVCU_Command = function (pTargetId, pTargetIndex, pContent, hdlg) {\r\n                var request = new proto.WEBBVCU.Request();\r\n                request.setTargetid(pTargetId);\r\n                request.setTargetindex(pTargetIndex);\r\n                request.setHdlg(hdlg);\r\n                if (null != pContent) {\r\n                    try {\r\n                        request.setPayload(pContent.serializeBinary().buffer);\r\n                    }\r\n                    catch (e) {\r\n                        request.setPayload(jSWUtils.string2Uint8Array(pContent));\r\n                    }\r\n                }\r\n                return request;\r\n            };\r\n\r\n            jSWProtocol.ParamPuList = function (pStatus, pPagesize, pPage, iIndex, iCount) {\r\n                var getpulist = new proto.WEBBVCU.BVCU_GetPulist();\r\n\r\n                getpulist.setStatus(pStatus);\r\n                getpulist.setPagesize(pPagesize);\r\n                getpulist.setPage(pPage);\r\n                getpulist.setIndex(iIndex);\r\n                getpulist.setIcount(iCount);\r\n\r\n                return getpulist;\r\n            }\r\n\r\n            jSWProtocol.BVCU_SearchInfo = function (piType, piPostition, piCount) {\r\n                this.iType = piType;\r\n                this.iPostition = piPostition;\r\n                this.iCount = piCount;\r\n                this.iTotalCount = -1;\r\n            }\r\n\r\n            jSWProtocol.SearchType = {\r\n                UNKNOWN: 0,\r\n                FILE: 1,  // 文件\r\n                CU_LOGIN: 2,\r\n                PU_LOGIN: 3,\r\n                OPERATE: 4,\r\n                DIALOG: 5,\r\n                PULIST: 6,\r\n                EVENT: 7\r\n            };\r\n\r\n            jSWProtocol.BVCU_Search_FileFilter = function (pszPUID, piChannelIndex, piTimeBegin, piTimeEnd, piFileType,\r\n                piRecordType, piFileSizeMin, piFileSizeMax) {\r\n                this.szPUID = pszPUID;\r\n                this.iChannelIndex = piChannelIndex;\r\n                this.iTimeBegin = piTimeBegin;\r\n                this.iTimeEnd = piTimeEnd;\r\n                this.iFileType = piFileType;\r\n\r\n                this.iRecordType = piRecordType;\r\n                this.iFileSizeMin = piFileSizeMin;\r\n                this.iFileSizeMax = piFileSizeMax;\r\n            }\r\n\r\n            jSWProtocol.CheckOptions = function (msgtype, srcoptions) {\r\n                var def_options = null;\r\n                var argsErrorDes = null;\r\n                var createErrorfun = function (MSGType, errDes, desErr) {\r\n                    desErr += msgtype + errDes;\r\n                }\r\n\r\n                switch (msgtype) {\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_CONF_IM_MSG:\r\n                        if (undefined == srcoptions.szTextMsg || null == srcoptions.szTextMsg) {\r\n                            createErrorfun(msgtype, \"szTextMsg: set error!\", argsErrorDes);\r\n                        }\r\n                        if (undefined == srcoptions.callback || null == srcoptions.callback) {\r\n                            createErrorfun(msgtype, \"callback: set error!\", argsErrorDes);\r\n                        }\r\n                        break;\r\n                    case proto.WEBBVCU.MSGType.WEB_BVCU_SET_PU_REBOOT_OR_SHUTDOWN:\r\n                        if (undefined == srcoptions.ioption || null == srcoptions.ioption || srcoptions.ioption != 0 || srcoptions.ioption != 1) {\r\n                            createErrorfun(msgtype, \"ioption: set error!\", argsErrorDes);\r\n                        }\r\n                        if (undefined == srcoptions.callback || null == srcoptions.callback) {\r\n                            createErrorfun(msgtype, \"callback: set error!\", argsErrorDes);\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                if (argsErrorDes == null) {\r\n                    return jSW.RcCode.RC_CODE_S_OK;\r\n                } else {\r\n                    console.log(argsErrorDes);\r\n                    return jSW.RcCode.RC_CODE_E_INVALIDARG;\r\n                }\r\n            }\r\n\r\n            jSWProtocol.uint8ArrayToHexArray = function (uint8array) {\r\n                var szHexTemp = [];\r\n                var temphex = \"\";\r\n                for (var iindex = 0; iindex < uint8array.length; iindex += 2) {\r\n                    temphex = \"\";\r\n                    temphex += String.fromCharCode(uint8array[iindex]);\r\n                    temphex += String.fromCharCode(uint8array[iindex + 1]);\r\n                    szHexTemp.push(temphex);\r\n                }\r\n                return szHexTemp;\r\n            }\r\n\r\n            jSWProtocol.uint8ArrayToHex = function (uint8array) {\r\n                var sSzHex = \"\";\r\n                var iTemp = 0;\r\n                for (var iIndex = 0; iIndex < uint8array.length; iIndex++) {\r\n                    sSzHex += (uint8array[iIndex] >> 4).toString(16);\r\n                    sSzHex += (uint8array[iIndex] & 0x0f).toString(16);\r\n                }\r\n                return sSzHex;\r\n            }\r\n\r\n            jSWProtocol.HexToString = function (uint8array) {\r\n                return String.fromCharCode.apply(null, uint8array);\r\n            }\r\n\r\n            jSWProtocol.LargeHexToString = function (arr) {\r\n                var out = \"\";\r\n                for (var i = 0; i < arr.length / 2; i++) {\r\n                    var tmp = [arr[i * 2], arr[i * 2 + 1]];\r\n                    var charValue = String.fromCharCode.apply(null, tmp);\r\n                    out += charValue\r\n                }\r\n                return out;\r\n            }\r\n\r\n            jSWProtocol.EventSourcePb2_Json = function (eventSourcePb) {\r\n                eventSourcePb = proto.BVCU.Event_Source.deserializeBinary(eventSourcePb);\r\n                var eventSourceJson = {\r\n                    iEventType: eventSourcePb.getIeventtype(),\r\n                    stTime: this.Walltime2Json(eventSourcePb.getSttime()),\r\n                    szID: eventSourcePb.getSzid(),\r\n                    iSubDevIdx: eventSourcePb.getIsubdevidx(),\r\n                    iValue: eventSourcePb.getIvalue()\r\n                };\r\n                return eventSourceJson;\r\n            }\r\n\r\n            jSWProtocol.SWFileTransInfoPb2_Json = function (transInfoPb) {\r\n                transInfoPb = proto.WEBBVCU.FileTransInfo.deserializeBinary(transInfoPb);\r\n                var transInfo = {\r\n                    iCreateTime: transInfoPb.getIcreatetime(),\r\n                    iOnlineTime: transInfoPb.getIonlinetime(),\r\n                    iTransferBytes: transInfoPb.getItransferbytes(),\r\n                    iTotalBytes: transInfoPb.getItotalbytes(),\r\n                    iSpeedKBpsLongTerm: transInfoPb.getIspeedkbpslongterm(),\r\n                    iSpeedKBpsShortTerm: transInfoPb.getIspeedkbpsshortterm(),\r\n                };\r\n                return transInfo;\r\n            }\r\n            jSWProtocol.SWFileTransEventPb2_Json = function (transInfoPb) {\r\n                transInfoPb = proto.WEBBVCU.FileTransInfo.deserializeBinary(transInfoPb);\r\n                var downloadPath = transInfoPb.getDownfilefrompu();\r\n                var szbase64 = downloadPath && downloadPath[\"getImgbase64\"] ? downloadPath.getImgbase64() : \"\";\r\n                var event = {\r\n                    iEvent: transInfoPb.getIevent(),\r\n                    iResult: transInfoPb.getIresult(),\r\n                    szRemoteFilePath: downloadPath ? downloadPath.getSzremotefilepathname(): \"\",\r\n                    szLocalFilePath: downloadPath ? downloadPath.getSzlocalfilepathname(): \"\",\r\n                    imgbase64: szbase64.length > 0 ? this.LargeHexToString(downloadPath.getImgbase64()) : \"\",\r\n                    nruid: transInfoPb.getSznruid()\r\n                }\r\n                return event;\r\n            }\r\n\r\n            jSWProtocol.SWOpenDialogPb2_Json = function (openDialog) {\r\n                openDialog = proto.BVCU.PUConfig.OpenDialog.deserializeBinary(openDialog);\r\n                var desdata = {\r\n                    szID: openDialog.getSzid(),\r\n                    iChannelIndex: openDialog.getIchannelindex(),\r\n                    iStreamIndex: openDialog.getIstreamindex(),\r\n                    iAVStreamDir: openDialog.getIavstreamdir(),\r\n                    bRecord: openDialog.getBrecord(),\r\n                    iApplierID: openDialog.getIapplierid()\r\n                };\r\n                return desdata;\r\n            }\r\n\r\n            jSWProtocol.IMFilePb2json = function (imfilepb) {\r\n                var imfile = {\r\n                    szID: imfilepb.getSzid(),\r\n                    szFile: imfilepb.getSzfilepath(),\r\n                    iFileSize: imfilepb.getIfilesize(),\r\n                    iDuration: imfilepb.getIduration()\r\n                }\r\n                return imfile;\r\n            }\r\n\r\n            jSWProtocol.IMMsgPb2_Json = function (szmsgdata) {\r\n                var szmsgs = [];\r\n                szmsgdata = szmsgdata.getSzmsgsList();\r\n                var szmsgdataitem = null;\r\n                var tempmsgdata;\r\n                var imsgtype = 0;\r\n                for (var ii = 0; ii < szmsgdata.length; ii++) {\r\n                    szmsgdataitem = szmsgdata[ii];\r\n                    imsgtype = szmsgdataitem.getItype();\r\n                    tempmsgdata = {\r\n                        iType: imsgtype,\r\n                        szTextMsg: (imsgtype == this.IMMSGTypes.TEXT || imsgtype == this.IMMSGTypes.FACE) ? szmsgdataitem.getSztextmsg() : null,\r\n                        stGpsData: imsgtype == this.IMMSGTypes.GPS ? this.GPSDatapb2Json(szmsgdataitem.getStgpsdata()) : null,\r\n                        stFile: (imsgtype == this.IMMSGTypes.FILE || imsgtype == this.IMMSGTypes.PICTURE || imsgtype == this.IMMSGTypes.AUDIO || imsgtype == this.IMMSGTypes.CONF_AUDIO) ? this.IMFilePb2json(szmsgdataitem.getStfile()) : null\r\n                    };\r\n\r\n                    if (imsgtype == this.IMMSGTypes.FACE) {\r\n                        var ImEmtion = jSW.DependencyMgr.GetEmotionSync();\r\n                        tempmsgdata.szTextMsg = ImEmtion.GetGifEmotion(tempmsgdata.szTextMsg);\r\n                        console.log(tempmsgdata.szTextMsg);\r\n                    }\r\n                    szmsgs.push(tempmsgdata);\r\n                }\r\n                return szmsgs;\r\n            }\r\n\r\n            jSWProtocol.AUDIO_OP_CODES = {\r\n                CAPTURE_BEGIN: 0,\r\n                CAPTURE_END: 1,\r\n                RENDER_BEGIN: 2,\r\n                RENDER_END: 3,\r\n                RENDER_NOTIFY: 4\r\n            };\r\n\r\n            jSWProtocol.AUDIO_OP_PLAYSTATUS = {\r\n                PLAY_EVENT_PLAY: 1,\r\n                PLAY_EVENT_CLOSE: 2,\r\n                PLAY_EVENT_EOF: 3\r\n            };\r\n\r\n            jSWProtocol.AACOperatePb2_Json = function (audioOperatePb) {\r\n                var audioOperate = {\r\n                    iOpCode: audioOperatePb.getIoperatecode()\r\n                };\r\n\r\n                if (audioOperate.iOpCode == jSWProtocol.AUDIO_OP_CODES.CAPTURE_END) {\r\n                    audioOperate[\"audioFilePath\"] = jSWProtocol.HexToString(audioOperatePb.getSzlocalpath());\r\n                    audioOperate[\"iDuration\"] = audioOperatePb.getIduration();\r\n                }\r\n\r\n                if (audioOperate.iOpCode == jSWProtocol.AUDIO_OP_CODES.RENDER_NOTIFY) {\r\n                    audioOperate[\"iPlayStatu\"] = audioOperatePb.getIplaystatu();\r\n                }\r\n                return audioOperate;\r\n            }\r\n\r\n            jSWProtocol.IMMsgPksPb2_Json = function (imMsgPks) {\r\n                var immsg = {\r\n                    iSourceId: imMsgPks.getIsourceid(),\r\n                    szSourceId: imMsgPks.getSzsourceid(),\r\n                    iTargetId: imMsgPks.getItargetid(),\r\n                    szTargetId: imMsgPks.getSztargetid(),\r\n                    szmsg: [],\r\n                    isPic: imMsgPks.getBispic(),\r\n                    isDownload: imMsgPks.getBisdownload(),\r\n                    imsgtype: imMsgPks.getImsgtype()\r\n                }\r\n\r\n                var szmsgdatas = proto.BVCU.IM_Msgs.deserializeBinary(imMsgPks.getPayload());\r\n                immsg.szmsg = jSWProtocol.IMMsgPb2_Json(szmsgdatas);\r\n                return immsg;\r\n            }\r\n\r\n            jSWProtocol.IMMSGTypes = {\r\n                UNKNOWN: 0,\r\n                TEXT: 1,\r\n                FACE: 2,\r\n                GPS: 3,\r\n                FILE: 4,\r\n                PICTURE: 5,\r\n                AUDIO: 6,\r\n                VIDEO: 7,\r\n                CONF_AUDIO: 8,\r\n                CALL_AUDIO: 9,\r\n                CALL_VIDEO: 10,\r\n                CUSTOM: 31,\r\n                onlyOcx: function (imMsgType) {\r\n                    return (imMsgType == this.FILE || imMsgType == this.AUDIO);\r\n                }\r\n            }\r\n\r\n            jSWProtocol.EVENTACTIONS = {\r\n                NONE: 0,            //无效值\r\n                DISKERROR: 0x0001,  //磁盘错误。源：PU/NRU的Storage\r\n                OUTOFDISKSPACE: 0x0002, //磁盘空间不足。源：PU/NRU的Storage\r\n                VIDEOLOST: 0x1000,    //视频丢失。源：PU 的 VideoIn\r\n                VIDEOMD: 0x1001,               //运动检测。源：PU 的 VideoIn\r\n                VIDEOOCCLUSION: 0x1002,        //视频遮挡。源：PU 的 VideoIn\r\n                ALERTIN: 0x1003,               //报警输入。源：PU 的 AlertIn\r\n                PERIOD: 0x1004,                //周期报警。源：PU 的 周期报警    \r\n                PUONLINE: 0x1005,              //PU上线。源：PU\r\n                PUOFFLINE: 0x1006,             //PU下线。源：PU\r\n                LOWTEMPERATURE: 0x1007,        //低温报警。源：PU 的 TemperatureIn\r\n                HIGHTEMPERATURE: 0x1008,       //高温报警。源：PU 的 TemperatureIn\r\n                SLOWSPEED: 0x1009,             //低速报警。源：PU 的 GPS\r\n                OVERSPEED: 0x100a,             //超速报警。源：PU 的 GPS\r\n                INTOREGION: 0x100b,            //进入区域报警。源：PU 的 GPS\r\n                OUTREGION: 0x100c,             //出区域报警。源：PU 的 GPS\r\n                LOWVOLTAGE: 0x100d,            //低电压报警。源：PU 的 VoltageIn\r\n                HIGHVOLTAGE: 0x100e,           //高电压报警。源：PU 的 VoltageIn\r\n\r\n                //NRU相关\r\n                NRUONLINE: 0x2000,   //NRU上线\r\n                NRUOFFLINE: 0x2001,           //NRU下线\r\n\r\n                //VTDU相关\r\n                VTDUONLINE: 0x3000,\r\n                VTDUOFFLINE: 0x3001,\r\n\r\n                //CMS相关\r\n                CMSONLINE: 0x4000,\r\n                CMSOFFLINE: 0x4001,\r\n\r\n                //用户(User)相关\r\n                USERLOGIN: 0x5000,   //用户登录\r\n                USERLOGOUT: 0x5001,           //用户注销\r\n\r\n                //decorder(解码器）相关\r\n                DECONLINE: 0x6000,\r\n                DECOFFLINE: 0x6001,\r\n\r\n                //该值及往后的值为自定义类型\r\n                CUSTOM: 0x10000000,\r\n            };\r\n\r\n            jSWProtocol.BVCU_EventStoragePb2_Json = function (eventStoragePb) {\r\n                eventStoragePb = proto.WEBBVCU.EventStorage.deserializeBinary(eventStoragePb);\r\n                var eventStorage = {\r\n                    iresult: eventStoragePb.getIresult(),\r\n                    szfilename: this.HexToString(eventStoragePb.getSzfilename()),\r\n                    itimestamp: eventStoragePb.getItimestamp()\r\n                };\r\n                return eventStorage;\r\n            }\r\n\r\n            jSWProtocol.Int2Uint = function (int32) {\r\n                var rcuint32 = Number(int32);\r\n                var rc = new Uint32Array(1);\r\n                rc[0] = rcuint32;\r\n                return rc[0];\r\n            }\r\n\r\n            jSWProtocol._CmdParse = function (iMethod, iSubMethod) {\r\n                var sResult = jSW.DependencyMgr.cmdParseInJect(function (cmdParse) {\r\n                    return cmdParse.parseCmd(iMethod, iSubMethod);\r\n                });\r\n                return sResult;\r\n            };\r\n\r\n            jSWProtocol.OperateSearchLogs2_Json = function (payload) {\r\n                var searchResponse = proto.BVCU.Search.Search_Response.deserializeBinary(payload);\r\n                var searchinfopb = searchResponse.getStsearchinfo();\r\n                var operationLogs = searchResponse.getPoperatelogList();\r\n                var searchResultJson = {\r\n                    info: null,\r\n                    result: []\r\n                };\r\n                var searchinfo = {\r\n                    ipostition: searchinfopb.getIpostition(),\r\n                    icount: searchinfopb.getIcount(),\r\n                    itotalcount: searchinfopb.getItotalcount()\r\n                };\r\n\r\n                searchResultJson.info = searchinfo;\r\n\r\n                var oplog = null;\r\n                var oplogjon = null;\r\n                for (operationindex in operationLogs) {\r\n                    oplog = operationLogs[operationindex];\r\n                    //oplog = new proto.BVCU.Search.Search_OperateLog();\r\n                    oplogjon = {\r\n                        szsourceid: oplog.getSzsourceid(),\r\n                        szusername: oplog.getSzusername(),\r\n                        sztargetid: oplog.getSztargetid(),\r\n                        imethod: oplog.getImethod(),\r\n                        isubmethod: oplog.getIsubmethod(),\r\n                        iapplierid: oplog.getIapplierid(),\r\n                        itargetindex: oplog.getItargetindex(), //目\r\n                        ioperatetime: oplog.getIoperatetime(),\r\n                        bresult: oplog.getIresult(),\r\n                        szdescription: oplog.getSzdescription(),\r\n                        smethod: null\r\n                    };\r\n                    oplogjon.smethod = jSWProtocol._CmdParse(oplogjon.imethod, oplogjon.isubmethod);\r\n                    searchResultJson.result.push(oplogjon);\r\n                }\r\n\r\n                return searchResultJson;\r\n            }\r\n\r\n            jSWProtocol._GetAllRescources = function (session, rescources) {\r\n                var allRescources = [];\r\n                var pu = null;\r\n                var channel = null;\r\n                var channelrec = null;\r\n                var res = null;\r\n                var restemp = null;\r\n                try {\r\n                    for (puindex in session._arr_pu) {\r\n                        pu = session._arr_pu[puindex];\r\n                        res = null;\r\n                        for (recindex in rescources) {\r\n                            restemp = rescources[recindex];\r\n                            if (pu._id_pu == restemp.puid) {\r\n                                res = restemp;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (res == null) {\r\n                            res = {\r\n                                puid: pu._id_pu,\r\n                                puname: pu._info_pu.name.length > 0 ? pu._info_pu.name : pu._id_pu,\r\n                                config: false,\r\n                                channels: [\r\n                                ]\r\n                            };\r\n                            for (channelindex in pu._arr_channel) {\r\n                                channel = pu._arr_channel[channelindex];\r\n                                channelrec = {\r\n                                    channelindex: channel._id_chanel,\r\n                                    iscansee: false\r\n                                };\r\n                                res.channels.push(channelrec);\r\n                            }\r\n                        }\r\n                        allRescources.push(res);\r\n                    }\r\n                } catch (e) {\r\n                }\r\n                return allRescources;\r\n            }\r\n\r\n            jSWProtocol._LocalResource_2Pb = function (localresources, payload) {\r\n                var recsourcepb = null;\r\n                var recsource = null;\r\n                var puPerPb = null;\r\n                var channelUint8Array = null;\r\n                var channeltemp = null;\r\n                for (recindex in localresources) {\r\n                    recsource = localresources[recindex];\r\n                    recsourcepb = new proto.BVCU.UserConfig.Resource();\r\n                    puPerPb = new proto.BVCU.UserConfig.PUPermissions();\r\n                    recsourcepb.setSpuid(recsource.puid);\r\n                    recsourcepb.setSzpermissions(puPerPb);\r\n                    puPerPb.setConfig((recsource.config ? jSW.SwUserManager.PERMISSIONS.ON : jSW.SwUserManager.PERMISSIONS.OFF));\r\n                    channelUint8Array = new Uint8Array(recsource.channels.length);\r\n\r\n                    for (channelindex in recsource.channels) {\r\n                        channeltemp = recsource.channels[channelindex];\r\n                        channelUint8Array[channeltemp.channelindex] = (channeltemp.iscansee ? jSW.SwUserManager.PERMISSIONS.ON : jSW.SwUserManager.PERMISSIONS.OFF);\r\n                    }\r\n                    puPerPb.setChannel(channelUint8Array);\r\n                    payload.addPresource(recsourcepb, recindex);\r\n                }\r\n            }\r\n\r\n            jSWProtocol._BVCU_UCFG_Resource_Pb2Json = function (resource_pb, sessionhelper) {\r\n                var puPermission = resource_pb.getSzpermissions();\r\n                var channelPermission = [];\r\n                var channelPermissionlistpb = puPermission.getChannel();\r\n                var channelPermissionTemp = null;\r\n                var channelPermissionpb = null;\r\n                var pujson = null;\r\n                for (channelIndex in channelPermissionlistpb) {\r\n                    channelPermissionpb = channelPermissionlistpb[channelIndex];\r\n                    channelPermissionTemp = {\r\n                        channelindex: Number(channelIndex),\r\n                        iscansee: channelPermissionlistpb[channelIndex] == jSW.SwUserManager.PERMISSIONS.ON\r\n                    };\r\n                    channelPermission.push(channelPermissionTemp);\r\n                }\r\n\r\n                pujson = sessionhelper._swGetPu(resource_pb.getSpuid());\r\n                var json = {\r\n                    puid: resource_pb.getSpuid(),\r\n                    puname: (pujson != null && pujson._info_pu.name.length > 0) ? pujson._info_pu.name : resource_pb.getSpuid(),\r\n                    config: puPermission.getConfig() == 1,\r\n                    channels: channelPermission\r\n                };\r\n                return json;\r\n            }\r\n\r\n            jSWProtocol.Walltime2Json = function (walltimepb) {\r\n                var sttime =\r\n                    {\r\n                        year: walltimepb.getIyear(),\r\n                        month: walltimepb.getImonth(),\r\n                        day: walltimepb.getIday(),\r\n                        hour: walltimepb.getIhour(),\r\n                        minute: walltimepb.getIminute(),\r\n                        second: walltimepb.getIsecond()\r\n                    }\r\n                return sttime;\r\n            }\r\n\r\n            jSWProtocol.SetGpsData = function (gpsData, options) {\r\n                var paramName = null;\r\n                var desData = 0;\r\n                for (var iIndex in options) {\r\n                    if (iIndex) {\r\n                        paramName = \"setI\";\r\n                        if (iIndex == \"lat\") {\r\n                            paramName += \"latitude\";\r\n                        } else if (iIndex == \"long\") {\r\n                            paramName += \"longitude\";\r\n                        } else {\r\n                            paramName += iIndex;\r\n                        }\r\n                        if (gpsData[paramName]) {\r\n                            desData = jSWProtocol.TransNumberInt2Uint(options[iIndex]);\r\n                            gpsData[paramName](desData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            var TransNumberInt2UintHelper = Math.pow(2 , 32);\r\n            jSWProtocol.TransNumberInt2Uint = function (uint32Data) {\r\n                var result = uint32Data;\r\n                if (uint32Data < 0) {\r\n                    result += TransNumberInt2UintHelper;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            var ParseNumberUint2IntHelper = TransNumberInt2UintHelper / 2;\r\n            jSWProtocol.ParseNumberUint2Int = function (int32Data) {\r\n                var result = int32Data;\r\n                if (int32Data > ParseNumberUint2IntHelper) {\r\n                    result -= TransNumberInt2UintHelper;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            jSWProtocol.GetWalltime = function () {\r\n                var wallTime = new proto.BVCU.PUConfig.WallTime();\r\n                var myData = new Date();\r\n                var info = {\r\n                    year: myData.getUTCFullYear(),\r\n                    month: myData.getUTCMonth(),\r\n                    day: myData.getUTCDay(),\r\n                    hour: myData.getUTCHours(),\r\n                    minute: myData.getUTCMinutes(),\r\n                    second: myData.getUTCSeconds()\r\n                };\r\n                var infoSetF = null;\r\n                for (var iIndex in info) {\r\n                    infoSetF = wallTime[\"setI\" + iIndex];\r\n                    infoSetF(info[iIndex]);\r\n                }\r\n                return wallTime;\r\n            }\r\n\r\n\r\n            jSWProtocol.GPSDatapb2Json = function (gpsdatapb) {\r\n                var gpsdatajson = {};\r\n                jSWProtocol.BasePbToJson(gpsdatapb, gpsdatajson);\r\n                gpsdatajson.long = gpsdatajson.longitude;\r\n                gpsdatajson.lat = gpsdatajson.latitude;\r\n                return gpsdatajson;\r\n            }\r\n\r\n            function GetPbGetName(mysrcpb, handle, bToInt) {\r\n                var myvalue = null;\r\n                var myPbProName = \"\";\r\n                for (var pbproName in mysrcpb.__proto__) {\r\n                    if (pbproName.indexOf(\"get\") == 0) {\r\n                        if (pbproName.indexOf(\"JsPbMessageId\") >= 0 || pbproName.indexOf(\"Extension\") >= 0) {\r\n                            continue;\r\n                        }\r\n                        myvalue = mysrcpb[pbproName]();\r\n                        if (typeof myvalue == \"number\") {\r\n                            if (bToInt) {\r\n                                myvalue = jSWProtocol.ParseNumberUint2Int(myvalue);\r\n                            } else {\r\n                                myvalue = jSWProtocol.TransNumberInt2Uint(myvalue);\r\n                            }\r\n                        }\r\n                        myPbProName = pbproName.slice(3);\r\n                        myPbProName = myPbProName.indexOf(\"St\") == 0 ? myPbProName.slice(2) : myPbProName.slice(1);\r\n                        handle(myPbProName, myvalue);\r\n                    }\r\n                }\r\n            }\r\n\r\n            jSWProtocol.BasePbToJson = function (srcpb, desData) {\r\n                GetPbGetName(srcpb, function (pbProName, proValue) {\r\n                    desData[pbProName] = proValue;\r\n                    if (typeof proValue == \"object\") {\r\n                        desData[pbProName] = {};\r\n                        jSWProtocol.BasePbToJson(proValue, desData[pbProName]);\r\n                    }\r\n                }, true);\r\n            }\r\n\r\n\r\n            jSWProtocol.FTPFileInfoGPSInfo2Json = function (fTPFileInfoGPSInfopb) {\r\n                var ftpFileInfopb = fTPFileInfoGPSInfopb.getFileinfo();\r\n                var fileInfoJson = this.FTPFileInfo2Json(ftpFileInfopb);\r\n                var szpuid = this.HexToString(fTPFileInfoGPSInfopb.getSzpuid());\r\n                var szpuname = this.HexToString(fTPFileInfoGPSInfopb.getSzpuname());\r\n                var szgpsdata = fTPFileInfoGPSInfopb.getSzgpsdataList();\r\n                var data = {\r\n                    fileinfo: fileInfoJson,\r\n                    gpsdata:\r\n                        {\r\n                            szpuid: szpuid,\r\n                            szpuname: szpuname,\r\n                            szgpspoint: []\r\n                        }\r\n                };\r\n\r\n                var gpsdata = null;\r\n                var gpsdatapb = null;\r\n                for (gpsindex in szgpsdata) {\r\n                    gpsdatapb = szgpsdata[gpsindex];\r\n                    gpsdata = jSWProtocol.GPSDatapb2Json(gpsdatapb);\r\n                    data.gpsdata.szgpspoint.push(gpsdata);\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            jSWProtocol.FTPFileInfo2Json = function (fTPFileInfopb) {\r\n                var fileinfo = {\r\n                    szFilePath: jSWProtocol.HexToString(fTPFileInfopb.getSzfilepath()),\r\n                    szFileName: jSWProtocol.HexToString(fTPFileInfopb.getSzfilename()),\r\n                    iTimeBegin: fTPFileInfopb.getItimebegin(),\r\n                    iTimeEnd: fTPFileInfopb.getItimeend(),\r\n                    iFileSize: fTPFileInfopb.getIfilesize()\r\n                };\r\n                return fileinfo;\r\n            }\r\n\r\n            jSWProtocol.CmsChannelInfo2Json = function (cmsChannelInfopb) {\r\n                var json = {\r\n                    szID: null,\r\n                    iApplierID: 0,\r\n                    iMediaDir: 0,\r\n                    bOverTCP: 0\r\n                };\r\n                json.szID = cmsChannelInfopb.getSzid();\r\n                json.iApplierID = cmsChannelInfopb.getIapplierid();\r\n                json.iMediaDir = cmsChannelInfopb.getImediadir();\r\n                json.bOverTCP = cmsChannelInfopb.getBovertcp();\r\n                return json;\r\n            }\r\n\r\n            jSWProtocol.CmsDialogInfos2Json = function (CmsDialogInfospb) {\r\n                var sz = [];\r\n                var list = CmsDialogInfospb.getCmsdialoginfosList();\r\n                list.forEach(function (item) {\r\n                    var cmsDialogInfo = {\r\n                        stRequestor: null,\r\n                        stTarget: null,\r\n                        szVTDUID: null,\r\n                        iChannelIndex: -1,\r\n                        iPathWay: 0\r\n                    };\r\n                    cmsDialogInfo.stRequestor = jSWProtocol.CmsChannelInfo2Json(item.getStrequestor());\r\n                    cmsDialogInfo.stTarget = jSWProtocol.CmsChannelInfo2Json(item.getSttarget());\r\n                    cmsDialogInfo.szVTDUID = item.getSzvtduid();\r\n                    cmsDialogInfo.iChannelIndex = item.getIchannelindex();\r\n                    cmsDialogInfo.iPathWay = item.getIpathway();\r\n                    sz.push(cmsDialogInfo);\r\n                });\r\n                return sz;\r\n            }\r\n\r\n\r\n            /*\r\n            json = {\r\n                puid: puid,\r\n                permission: {\r\n                    config: puPermission.getConfig() == 1,\r\n                    channels: [\r\n                        {\r\n                            channelindex:\r\n                            iscansee:\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n            */\r\n\r\n            jSWProtocol.GroupPb_2Json = function (group_pb) {\r\n                var userGroupJson = {\r\n                    id: group_pb.getSid(),\r\n                    name: group_pb.getSname(),\r\n                    parentid: group_pb.getSparentid()\r\n                };\r\n\r\n                return userGroupJson;\r\n            }\r\n\r\n            jSWProtocol.GroupInfoPb_2Json = function (groupinfo_pb, sessionHelper) {\r\n                var resourcelist = groupinfo_pb.getPresourceList();\r\n                var resources = this.BVCU_UCFG_Resource_Pb2Json(resourcelist, sessionHelper);\r\n\r\n                var data = {\r\n                    id: groupinfo_pb.getSid(),\r\n                    name: groupinfo_pb.getSname(),\r\n                    parentid: groupinfo_pb.getSparentid(),\r\n                    description: groupinfo_pb.getSdescription(),\r\n                    resources: resources,\r\n                    allresources: jSWProtocol._GetAllRescources(sessionHelper, [])\r\n                };\r\n                return data;\r\n            }\r\n\r\n            jSWProtocol.USER_USERPb_2Json = function (user_pb) {\r\n                var user = {\r\n                    id: user_pb.getSid(),\r\n                    groupid: user_pb.getSgroupid(),\r\n                    name: user_pb.getSname()\r\n                };\r\n                return user;\r\n            }\r\n\r\n            jSWProtocol.USER_USERINFO_Pb2Json = function (userinfo_pb, sessionHelper) {\r\n                var resources = userinfo_pb.getPresourceList();\r\n                resources = this.BVCU_UCFG_Resource_Pb2Json(resources, sessionHelper);\r\n                var iSysadmin = userinfo_pb.getIsysadmin();\r\n                var data = null;\r\n                data = {\r\n                    sId: userinfo_pb.getSid(),\r\n                    sPasswd: userinfo_pb.getSpasswd(),\r\n                    bSetPasswd: userinfo_pb.getSpasswd().length > 0,\r\n                    sysadmin: {\r\n                        isGroup: ((iSysadmin & jSW.SwUserManager.SYSADMIN.GROUP) == jSW.SwUserManager.SYSADMIN.GROUP),\r\n                        isUser: ((iSysadmin & jSW.SwUserManager.SYSADMIN.USER) == jSW.SwUserManager.SYSADMIN.USER),\r\n                        isDev: ((iSysadmin & jSW.SwUserManager.SYSADMIN.DEV) == jSW.SwUserManager.SYSADMIN.DEV),\r\n                        isDevAss: ((iSysadmin & jSW.SwUserManager.SYSADMIN.DEVASS) == jSW.SwUserManager.SYSADMIN.DEVASS),\r\n                    },\r\n                    iPtz: userinfo_pb.getIptz(),\r\n                    sServerId: userinfo_pb.getSserverid(),\r\n                    sGroupId: userinfo_pb.getSgroupid(),\r\n                    iMaxSession: userinfo_pb.getImaxsession(),\r\n                    sAllocateId: userinfo_pb.getSallocateid(),\r\n                    sName: userinfo_pb.getSname(),\r\n                    sPhone: userinfo_pb.getSphone(),\r\n                    sEmail: userinfo_pb.getSemail(),\r\n                    sDescription: userinfo_pb.getSdescription(),\r\n                    Resource: resources\r\n                };\r\n                return data;\r\n            }\r\n\r\n            jSWProtocol.JsIMMSG2Pb = function (msgitems, pcallback) {\r\n                var pbPaylod = new proto.BVCU.IM_Msgs();\r\n                pbPaylod.rcallback = null;\r\n                var msgitem = null;\r\n                var msgitempb = null;\r\n                var ImEmtion = jSW.DependencyMgr.GetEmotionSync();\r\n                for (var iindex = 0; iindex < msgitems.length; iindex++) {\r\n                    msgitem = msgitems[iindex];\r\n                    msgitempb = pbPaylod.addSzmsgs();\r\n                    msgitempb.setItype(msgitem.iType);\r\n                    pbPaylod.iitemmsgtype = msgitem.iType;\r\n                    switch (msgitem.iType) {\r\n                        case jSWProtocol.IMMSGTypes.TEXT:\r\n                            msgitempb.setSztextmsg(msgitem.data);\r\n                            break;\r\n                        case jSWProtocol.IMMSGTypes.FACE:\r\n                            var eCId = ImEmtion.GetEmotionCode(msgitem.data);\r\n                            msgitempb.setSztextmsg(eCId);\r\n                            break;\r\n                        case jSWProtocol.IMMSGTypes.PICTURE:\r\n                        case jSWProtocol.IMMSGTypes.FILE:\r\n                            var imfile = new proto.BVCU.IM_File();\r\n                            imfile.setSzid(msgitem.nruid);\r\n                            imfile.setSzfilepath(msgitem.data);\r\n                            msgitempb.setStfile(imfile);\r\n                            pbPaylod.rcallback = pcallback;\r\n                            break;\r\n                        case jSWProtocol.IMMSGTypes.AUDIO:\r\n                            var imfile = new proto.BVCU.IM_File();\r\n                            imfile.setSzid(msgitem.nruid);\r\n                            imfile.setSzfilepath(msgitem.data);\r\n                            imfile.setIduration(msgitem.iduration);\r\n                            msgitempb.setStfile(imfile);\r\n                            pbPaylod.rcallback = pcallback;\r\n                            break;\r\n                        case jSWProtocol.IMMSGTypes.GPS:\r\n                            var gpsData = new proto.BVCU.PUConfig.GPSData();\r\n                            var curWTime = jSWProtocol.GetWalltime();\r\n                            gpsData.setSttime(curWTime);\r\n                            jSWProtocol.SetGpsData(gpsData, msgitem.data);\r\n                            msgitempb.setStgpsdata(gpsData);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                return pbPaylod;\r\n            }\r\n\r\n            jSWProtocol.BVCU_UCFG_Resource_Pb2Json = function (resource_pbs, sessionhelper) {\r\n                var resource_pb = null;\r\n                var resources = [];\r\n                var resource = null;\r\n\r\n                for (resourceindex in resource_pbs) {\r\n                    resource_pb = resource_pbs[resourceindex];\r\n                    resource = this._BVCU_UCFG_Resource_Pb2Json(resource_pb, sessionhelper);\r\n                    resources.push(resource);\r\n                }\r\n                return resources;\r\n            }\r\n\r\n            jSWProtocol._BVCU_DayTimeSlice_Pb2Json = function (bvcu_daytimeslice_pb) {\r\n                var json = {\r\n                    iHourBegin: bvcu_daytimeslice_pb.getChourbegin(),\r\n                    iMinuteBegin: bvcu_daytimeslice_pb.getCminutebegin(),\r\n                    iSecondBegin: bvcu_daytimeslice_pb.getCsecondbegin(),\r\n                    iHourEnd: bvcu_daytimeslice_pb.getChourend(),\r\n                    iMinuteEnd: bvcu_daytimeslice_pb.getCminuteend(),\r\n                    iSecondEnd: bvcu_daytimeslice_pb.getCsecondend()\r\n                }\r\n                return json;\r\n            }\r\n\r\n            jSWProtocol.BVCU_DayTimeSlice_Pb2Json = function (bvcu_daytimeslice_pb) {\r\n                var stday = bvcu_daytimeslice_pb.getStdayList();\r\n                var json = {\r\n                    period0: {\r\n                        time: this._BVCU_DayTimeSlice_Pb2Json(stday[0].getSttime()),\r\n                        rco: this._OnlineControlOne_Pb2Json(stday[0].getStrco())\r\n                    },\r\n                    period1: {\r\n                        time: this._BVCU_DayTimeSlice_Pb2Json(stday[1].getSttime()),\r\n                        rco: this._OnlineControlOne_Pb2Json(stday[1].getStrco())\r\n                    },\r\n                    period2: {\r\n                        time: this._BVCU_DayTimeSlice_Pb2Json(stday[2].getSttime()),\r\n                        rco: this._OnlineControlOne_Pb2Json(stday[2].getStrco())\r\n                    },\r\n                    period3: {\r\n                        time: this._BVCU_DayTimeSlice_Pb2Json(stday[3].getSttime()),\r\n                        rco: this._OnlineControlOne_Pb2Json(stday[3].getStrco())\r\n                    },\r\n                    period4: {\r\n                        time: this._BVCU_DayTimeSlice_Pb2Json(stday[4].getSttime()),\r\n                        rco: this._OnlineControlOne_Pb2Json(stday[4].getStrco())\r\n                    },\r\n                    period5: {\r\n                        time: this._BVCU_DayTimeSlice_Pb2Json(stday[5].getSttime()),\r\n                        rco: this._OnlineControlOne_Pb2Json(stday[5].getStrco())\r\n                    },\r\n                }\r\n                return json;\r\n            }\r\n\r\n            jSWProtocol.BVCU_DayTimeSlice_Pb2JsonOnly = function (bvcu_daytimeslice_pb) {\r\n                var stday = bvcu_daytimeslice_pb.getStdayList();\r\n                var json = {\r\n                    period0: this._BVCU_DayTimeSlice_Pb2Json(stday[0]),\r\n                    period1: this._BVCU_DayTimeSlice_Pb2Json(stday[1]),\r\n                    period2: this._BVCU_DayTimeSlice_Pb2Json(stday[2]),\r\n                    period3: this._BVCU_DayTimeSlice_Pb2Json(stday[3]),\r\n                    period4: this._BVCU_DayTimeSlice_Pb2Json(stday[4]),\r\n                    period5: this._BVCU_DayTimeSlice_Pb2Json(stday[5])\r\n                }\r\n                return json;\r\n            }\r\n\r\n            jSWProtocol._OnlineControlOne_Pb2Json = function (onlinecontrolone_pb) {\r\n                var json = {\r\n                    iTrigger: onlinecontrolone_pb.getItrigger(),\r\n                    iEvent: onlinecontrolone_pb.getIevent(),\r\n                    iOnlineTime: onlinecontrolone_pb.getIonlinetime(),\r\n                    iThrough: onlinecontrolone_pb.getIthrough()\r\n                };\r\n                return json;\r\n            }\r\n\r\n            jSWProtocol.Drivers2Json = function (drivers) {\r\n                var driverPb = null;\r\n                var PersonInfopb = null;\r\n                var driverJson = null;\r\n                var driverJsonArray = [];\r\n                for (driverindex in drivers) {\r\n                    driverPb = drivers[driverindex];\r\n                    PersonInfopb = driverPb.getStpersoninfo();\r\n                    driverJson = {\r\n                        stPersonInfo: {\r\n                            szName: PersonInfopb.getSzname(),\r\n                            cGender: PersonInfopb.getCgender(),\r\n                            sAge: PersonInfopb.getSage()\r\n                        },\r\n                        szCardID: driverPb.getSzcardid(),\r\n                        szCertificateID: driverPb.getSzcertificateid(),\r\n                        szIssuingAgency: driverPb.getSzissuingagency()\r\n                    };\r\n                    driverJsonArray.push(driverJson);\r\n                }\r\n                return driverJsonArray;\r\n            }\r\n\r\n            jSWProtocol.ParamSearchList = function (pstSearchInfo, pstFilter) {\r\n                var search = new proto.BVCU.Search.Search_Request();\r\n                var searchInfo = new proto.BVCU.Search.SearchInfo();\r\n                var filefilter = new proto.BVCU.Search.Search_FileFilter();\r\n                var ichannelindex = pstFilter.iChannelIndex;\r\n\r\n                searchInfo.setIcount(pstSearchInfo.iCount);\r\n                searchInfo.setIpostition(pstSearchInfo.iPostition);\r\n                searchInfo.setItype(pstSearchInfo.iType);\r\n\r\n                filefilter.setSzpuid(pstFilter.szPUID);\r\n                if (pstFilter.iChannelIndex == -1) {\r\n                    ichannelindex = 0xffffffff;\r\n                }\r\n                filefilter.setIchannelindex(ichannelindex);\r\n                filefilter.setIfiletype(pstFilter.iFileType);\r\n                filefilter.setItimebegin(pstFilter.iTimeBegin);\r\n                filefilter.setItimeend(pstFilter.iTimeEnd);\r\n                filefilter.setIfilesizemin(pstFilter.iFileSizeMin);\r\n                filefilter.setIfilesizemax(pstFilter.iFileSizeMax);\r\n                filefilter.setIrecordtype(pstFilter.iRecordType);\r\n                filefilter.setSzdesc1(pstFilter.szDesc1);\r\n                filefilter.setSzdesc2(pstFilter.szDesc2);\r\n                filefilter.setItimecondition(pstFilter.iTimeCondition);\r\n\r\n                search.setStsearchinfo(searchInfo);\r\n                search.setStfilefilter(filefilter);\r\n\r\n                return search;\r\n            }\r\n\r\n            jSWProtocol.JsonParamLogin = function (EmmsHeader, RequestHeader, BVCU_ServerParam) {\r\n                this.emms = EmmsHeader;/**EmmsHeader API协议头。\tM*/\r\n                this.request = RequestHeader;\r\n                this.param = BVCU_ServerParam;\r\n            }\r\n\r\n            jSWProtocol.JsonParamNoAttach = function (EmmsHeader, MSGType) {\r\n                var request = new proto.WEBBVCU.Request();\r\n                request.setEmms(EmmsHeader);\r\n                request.setMsgtype(MSGType);\r\n                return request;\r\n            }\r\n\r\n            jSWProtocol.JsonParamDialog = function (EmmsHeader, MsgType, dialogParam) {\r\n                var request = new proto.WEBBVCU.Request();\r\n                request.setEmms(EmmsHeader);\r\n                request.setMsgtype(MsgType);\r\n                request.setPayload(dialogParam.serializeBinary().buffer);\r\n                request.setTargetid(dialogParam.getId());\r\n                request.setTargetindex(dialogParam.getMajor());\r\n                request.setHdlg(dialogParam.getHdlg());\r\n                return request;\r\n            }\r\n\r\n            jSWProtocol.JsonParamTSPDialog = function (EmmsHeader, MsgType, Param) {\r\n                var request = new proto.WEBBVCU.Request();\r\n                request.setEmms(EmmsHeader);/**EmmsHeader API协议头。\tM*/\r\n                request.setMsgtype(MsgType);\r\n                request.setPayload(Param.serializeBinary().buffer);\r\n                return request;\r\n            }\r\n\r\n            jSWProtocol.JsonParamCommand = function (EmmsHeader, MsgType, request) {\r\n                request.setEmms(EmmsHeader);\r\n                request.setMsgtype(MsgType);\r\n                return request;\r\n            }\r\n\r\n            jSWProtocol.txRequest = new Array(); // 记录已经发送的命令, 响应时调用响应的回调函数通知\r\n            jSWProtocol.txRequestHelp = new Array();\r\n            jSWProtocol.txGetRequestId = function () {\r\n                var cmdId = -1, i = 0;\r\n                for (; i < jSWProtocol.txRequest.length; i++) {\r\n                    if (jSWProtocol.txRequest[i] == null) {\r\n                        cmdId = i;\r\n                    }\r\n                }\r\n                if (-1 == cmdId) {\r\n                    cmdId = i;\r\n                    jSWProtocol.txRequest[i] = 1;\r\n                }\r\n\r\n                return cmdId;\r\n            }\r\n\r\n            jSWProtocol.txGetRequestRelayId = function () {\r\n                var cmdId = -1, i = 0;\r\n                for (; i < jSWProtocol.txRequestHelp.length; i++) {\r\n                    if (jSWProtocol.txRequestHelp[i] == null) {\r\n                        cmdId = i;\r\n                    }\r\n                }\r\n                if (-1 == cmdId) {\r\n                    cmdId = i;\r\n                    jSWProtocol.txRequestHelp[i] = 1;\r\n                }\r\n\r\n                return cmdId;\r\n            }\r\n\r\n            jSWProtocol.txSetRequestOption = function (requestId, option) {\r\n                jSWProtocol.txRequest[requestId] = option;\r\n            }\r\n\r\n            jSWProtocol.txSetRequestHelperOption = function (requestId, option) {\r\n                jSWProtocol.txRequestHelp[requestId] = option;\r\n            }\r\n\r\n            jSWProtocol.txGetRequestOption = function (requestId) {\r\n                if (requestId >= 0 && requestId < jSWProtocol.txRequest.length) {\r\n                    return jSWProtocol.txRequest[requestId];\r\n                }\r\n                return null;\r\n            }\r\n\r\n            jSWProtocol.txGetRequestHelperOption = function (requestId) {\r\n                if (requestId >= 0 && requestId < jSWProtocol.txRequestHelp.length) {\r\n                    return jSWProtocol.txRequestHelp[requestId];\r\n                }\r\n                return null;\r\n            }\r\n\r\n            jSWProtocol.txOnResponseUint8Array = function (requestId, szUint8) {\r\n                var cmdId = requestId;\r\n                var response = null;\r\n\r\n                try {\r\n                    response = proto.WEBBVCU.Response.deserializeBinary(szUint8);\r\n                }\r\n                catch (e) {\r\n                    var err = jSWProtocol.HexToString(szUint8);\r\n                    jSWUtils.debugLog(\"deserialize protobuf error:\" + err);\r\n                    jSWUtils.debugLog(e);\r\n                }\r\n\r\n                if (response) {\r\n                    cmdId = response.getId();\r\n\r\n                    // 根据Id找到对应的option\r\n                    options = jSWProtocol.txGetRequestOption(cmdId);\r\n\r\n                    if (-2017 == cmdId) {\r\n                        // -2017 是服务器通知Notify\r\n                        var emmsHeader = response.getEmms();\r\n                        var session = jSWUtils._getSessionById(emmsHeader.getSession());\r\n\r\n                        if (session) {\r\n                            if (options == null) {\r\n                                options = {\r\n                                    cmd: null,\r\n                                    callback: null\r\n                                }\r\n                            }\r\n                            session._internalNotify(options, response);\r\n                        } else {\r\n                            var msgType = response.getMsgtype();\r\n                            console.warn(msgType + 'session not found ' + emmsHeader.getSession());\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (options) {\r\n                            jSWProtocol.txSetRequestOption(cmdId, null);\r\n\r\n                            // 回调\r\n                            if (options.success && typeof (options.success) == 'function') {\r\n                                options.success(response, 0);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            jSWProtocol.txOnResponse = function (requestId, data) {\r\n                var cmdId = requestId;\r\n                var options = null;\r\n\r\n                try {\r\n                    if (jSW._mMgr.bUseOcx()) {\r\n                        jSWProtocol.txOnResponseUint8Array(cmdId, data);\r\n                    } else {\r\n                        var reader = new FileReader();\r\n                        reader.addEventListener(\"loadend\", function () {\r\n                            var result = reader.result;\r\n                            var arr = new Uint8Array(result);\r\n                            jSWProtocol.txOnResponseUint8Array(cmdId, arr);\r\n                        });\r\n                        reader.readAsArrayBuffer(data);\r\n                    }\r\n                } catch (e) {\r\n                    console.error('error: ' + e);\r\n                    options = jSWProtocol.txGetRequestOption(cmdId);\r\n                    if (options) {\r\n                        jSWProtocol.txSetRequestOption(cmdId, null);\r\n\r\n                        // 回调\r\n                        if (options.error && typeof (options.error) == 'function') {\r\n                            options.error(options.option, data, 'get json object fail');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            jSWProtocol.testSend = \"\";\r\n            /**发送请求, ajax post, options {\r\n                    session: this,\r\n                    cmd: 'login',\r\n                    request: request,\r\n                    tag: null,\r\n                    enforce: boolean,\r\n                    attchdata: ,\r\n                    callback: function(options, response) { }\r\n                }*/\r\n            jSWProtocol._internalSend = function (options) {\r\n                var session = options.session;\r\n                var request = options.request;\r\n\r\n                var requestId = jSWProtocol.txGetRequestId();\r\n                request.setId(Number(requestId));\r\n                request.setRelayid(-1);\r\n                if (options.attchdata != null) {\r\n                    var requestRelayId = jSWProtocol.txGetRequestRelayId();\r\n                    request.setRelayid(requestRelayId);\r\n                }\r\n\r\n                var src_data = null;\r\n                var crypto_data = null;\r\n\r\n\r\n                if (request.getMsgtype() == proto.WEBBVCU.MSGType.WEB_BVCU_GET_PUBKEY) {\r\n                    /**获取密钥, 暂时不加密*/\r\n                    console.log('获取公钥');\r\n                    crypto_data = request.serializeBinary();\r\n                }\r\n                else if (request.getMsgtype() == proto.WEBBVCU.MSGType.WEB_BVCU_LOGIN) {\r\n                    /**登录使用rsa密钥加密*/\r\n                    src_data = request.getPayload();\r\n                    crypto_data = jnRSA.RSA_Encrypt_32UIntTo8Array(session.pubkey_d, session.pubkey_n, src_data);\r\n                    request.setPayload(crypto_data);\r\n                    crypto_data = request.serializeBinary();\r\n\r\n                    console.log('登录:公钥 d:' + session.pubkey_d + ', n:' + session.pubkey_n);\r\n                } else {\r\n                    if (session._serverConfig || (options.enforce != null && options.enforce)) {\r\n                        crypto_data = request.serializeBinary();\r\n                    } else {\r\n                        session._internalOnResponseFail(options, '', 'not login');\r\n                        return jSW.RcCode.RC_CODE_E_DISCONNECTED;\r\n                    }\r\n                }\r\n\r\n                if (crypto_data) {\r\n                    if (!jSW._mMgr.bUseOcx()) {\r\n                        crypto_data = crypto_data.buffer;\r\n                    }\r\n\r\n                    var ajax_options = {\r\n                        data: crypto_data,\r\n                        option: options,\r\n                        requestID: requestId,\r\n                        success: function (jsonObject, status) {\r\n                            session._internalOnResponseSuccess(options, jsonObject, status);\r\n                        },\r\n                        error: function (opt, responseText, errMsg) {\r\n                            session._internalOnResponseFail(options, responseText, errMsg);\r\n                        }\r\n                    };\r\n\r\n                    jSWProtocol.txSetRequestOption(requestId, ajax_options);\r\n                    if (options.attchdata != null) {\r\n                        jSWProtocol.txSetRequestHelperOption(requestRelayId, options.attchdata);\r\n                    }\r\n\r\n                    jSWProtocol.testSend = ajax_options.data;\r\n                    return session._send(ajax_options.data);\r\n                }\r\n\r\n                return jSW.RcCode.RC_CODE_E_FAIL;\r\n            }\r\n\r\n\r\n\r\n        })(jSWProtocol);\r\n\r\n\r\n\r\n        // ---- SWCallbackManager ----\r\n        jSW.SWCallbackManager = function (owner, events) {\r\n            this.owner = owner;\r\n            this.callbacks = {};\r\n            for (var i = 0; i < events.length; i++) {\r\n                this.callbacks[events[i]] = [];\r\n            }\r\n        };\r\n\r\n        jSW.SWCallbackManager.prototype = {\r\n            // The element on which callbacks will be triggered.\r\n            owner: null,\r\n\r\n            // An object of callbacks in the form\r\n            //\r\n            //     { event: function }\r\n            callbacks: null,\r\n\r\n            // Add a callback to this object - where the `event` is a string of\r\n            // the event name and `callback` is a function.\r\n            addCallback: function (event, callback) {\r\n                if (typeof (callback) == 'function' && this.callbacks[event]) {\r\n                    this.callbacks[event].push(callback);\r\n                }\r\n            },\r\n\r\n            // Remove a callback. The given function needs to be equal (`===`) to\r\n            // the callback added in `addCallback`, so named functions should be\r\n            // used as callbacks.\r\n            removeCallback: function (event, callback) {\r\n                if (typeof (callback) == 'function' && this.callbacks[event]) {\r\n                    var cbs = this.callbacks[event],\r\n                        len = cbs.length;\r\n                    for (var i = 0; i < len; i++) {\r\n                        if (cbs[i] === callback) {\r\n                            cbs.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            // Trigger a callback, passing it an object or string from the second\r\n            // argument.\r\n            dispatchCallback: function (event, message) {\r\n                if (this.callbacks[event]) {\r\n                    for (var i = 0; i < this.callbacks[event].length; i += 1) {\r\n                        try {\r\n                            this.callbacks[event][i](this.owner, event, message);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                            // meh\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        (function (mMgr) {\r\n            var bOcxWs = false;\r\n            mMgr.bUseOcx = function () {\r\n                return (bOcxWs) && jSWOptions.CheckOcx();\r\n            }\r\n            mMgr.bWsTest = function () {\r\n                return false;\r\n            }\r\n\r\n            var bSeted = false;\r\n            mMgr.setBUseOcxWs = function (bUse) {\r\n                if (!bSeted) {\r\n                    bSeted = true;\r\n                    bOcxWs = bUse;\r\n                } else {\r\n                    if (bOcxWs != bUse) {\r\n                        console.log(\"You Cann't Change The Ws Mode Right Now\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            var bLoaded = false, bLoading = false;\r\n            var swfobjectDir = \"modules/oxWebSocket.js\";\r\n            mMgr.loadWebSocket = function (onLoadWsHasResult, session, tag) {\r\n                if (mMgr.bUseOcx()) {\r\n                    if (!bLoaded && !bLoading) {\r\n                        bLoading = true;\r\n                        var brc = jSW.DependencyMgr.loadDependsProxy([swfobjectDir], null, function () {\r\n                            console.log(\"using ocx websocket\");\r\n                            onLoadWsHasResult(session, tag, ocxWebSocketClass);\r\n                            bLoaded = true;\r\n                        }, null);\r\n                        if (!brc) {\r\n                            console.error(\"bad ocxWebsocketLoad\");\r\n                        }\r\n                    } else if (bLoaded) {\r\n                        onLoadWsHasResult(session, tag, ocxWebSocketClass);\r\n                    }\r\n                } else {\r\n                    console.log(\"using broswer websocket\");\r\n                    onLoadWsHasResult(session, tag, WebSocket);\r\n                }\r\n            }\r\n\r\n            mMgr.oWsOpen = function (ws) {\r\n                if (this.bUseOcx()) {\r\n                    ws.open();\r\n                }\r\n            }\r\n\r\n            var _ocxWsModuleTag = null, ocxWebSocketClass = null;\r\n            mMgr.regOcxWebSocket = function (cWS, tag) {\r\n                ocxWebSocketClass = cWS;\r\n                ocxWebSocketClass.SetOcxHandle(_ocxHandle);\r\n                _ocxWsModuleTag = tag;\r\n            }\r\n\r\n            mMgr.GetOcxWsTag = function () {\r\n                return _ocxWsModuleTag;\r\n            }\r\n\r\n            var _ocxHandle = null;\r\n            mMgr.RegOcxHandle = function (ocxHanlde) {\r\n                _ocxHandle = ocxHanlde;\r\n            }\r\n        })(jSW._mMgr = jSW._mMgr || {});\r\n    }\r\n\r\n    jSW.DependencyMgr = new (function () {\r\n        var _that = this,\r\n            DependencyModuleName = \"DependCollection\",\r\n            AfterAsyncLoadHasResult = function (tag) {\r\n                var path = tag.getPath()\r\n                if (path == null) {\r\n                    tag.emit();\r\n                }\r\n                else {\r\n                    AsyncLoadJsCss(path, AfterAsyncLoadHasResult, tag);\r\n                }\r\n            },\r\n\r\n            AsyncLoadJsCss = function (desUrl, callback, tag) {\r\n                var oEle = null, parentEle = null;\r\n                if (desUrl.indexOf(\".js\") > 0) {\r\n                    oEle = document.createElement(\"script\");\r\n                    oEle.src = desUrl;\r\n                    parentEle = jSW.DependencyMgr.GetJsEleContainer();\r\n                } else if (desUrl.indexOf(\".css\") > 0) {\r\n                    oEle = document.createElement(\"link\");\r\n                    oEle.type = \"text/css\";\r\n                    oEle.rel = \"stylesheet\";\r\n                    oEle.href = desUrl;\r\n                    parentEle = document.head;\r\n                }\r\n                if (oEle) {\r\n                    oEle.onload = function () {\r\n                        callback(tag);\r\n                        oEle.parentElement.removeChild(oEle);\r\n                    }\r\n                    parentEle.appendChild(oEle);\r\n                }\r\n            },\r\n            LoadJsOrScript = function (depUrls, onLoadHasResult, userTag) {\r\n                var desDUrls = depUrls;\r\n                if (window.XMLHttpRequest) {\r\n                    var tag = {\r\n                        szPaths: desDUrls,\r\n                        index: 0,\r\n                        lastIndex: 0,\r\n                        getPath: function () {\r\n                            if (this.index < this.szPaths.length) {\r\n                                this.lastIndex = this.index;\r\n                                this.index++;\r\n                                return this.szPaths[this.lastIndex];\r\n                            }\r\n                            return null;\r\n                        },\r\n                        onResult: onLoadHasResult,\r\n                        emit: function () {\r\n                            if (this.onResult) {\r\n                                this.onResult(this.tag);\r\n                            }\r\n                        },\r\n                        tag: userTag\r\n                    };\r\n                    AfterAsyncLoadHasResult(tag);\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            ModuleInfo = function (names, checkPromise) {\r\n                this.names = names;\r\n                this.promise = checkPromise;\r\n                this.szNames = null;\r\n            },\r\n            loadGetPaths = function (szDpds, szPromise) {\r\n                var proInfo = new ModuleInfo(szDpds, szPromise);\r\n                return proInfo.GetAbsPath();\r\n            },\r\n            loadDependsProxy = function (szDpds, szPromise, onLoadHasResult, tag) {\r\n                var szDesPath = loadGetPaths(szDpds, szPromise);\r\n                var bResult = LoadJsOrScript(szDesPath, onLoadHasResult, tag);\r\n                return bResult;\r\n            },\r\n            RegModule = function (moduleName, moduleEntity, bNotLog) {\r\n                if (typeof _that[DependencyModuleName] == \"undefined\") {\r\n                    _that[DependencyModuleName] = {};\r\n                };\r\n                if (_that[DependencyModuleName][moduleName] == null) {\r\n                    if (!bNotLog) {\r\n                        console.log(\"[D] RegModule \" + moduleName);\r\n                    }\r\n                    _that[DependencyModuleName][moduleName] = moduleEntity;\r\n                }\r\n                else { console.error(\"load dependency error\"); }\r\n            },\r\n            InjectModule = function (module, afterInjectHandler) {\r\n                return afterInjectHandler(module);\r\n            },\r\n            SyncGetModule = function (MN) {\r\n                var desModules = _that[DependencyModuleName][MN];\r\n                return desModules;\r\n            },\r\n            GetModuleEntiey = function (DMN, MN) {\r\n                if (typeof _that[DependencyModuleName] == \"undefined\") {\r\n                    _that[DependencyModuleName] = {};\r\n                };\r\n                var desModules = _that[DependencyModuleName][MN];\r\n                return desModules;\r\n            },\r\n            GetRegedModule = function (modeluName, modulePath, afterInjectHandler) {\r\n                var desModules = GetModuleEntiey(DependencyModuleName, modeluName);\r\n                if (desModules) {\r\n                    return InjectModule(desModules, afterInjectHandler);\r\n                } else {\r\n                    loadDependsProxy([modulePath], null, function () {\r\n                        var desModules = GetModuleEntiey(DependencyModuleName, modeluName);\r\n                        InjectModule(desModules, afterInjectHandler);\r\n                    }, null);\r\n                }\r\n            };\r\n\r\n        //videojs 中依赖这个 \r\n        jSW.jswGetDependUrl = function (filename) {\r\n            filename = \"thlib/\" + filename;\r\n            var szPath = loadGetPaths([filename]);\r\n            return szPath[0];\r\n        }\r\n\r\n        jSW._InnerGetJswDependVersion = function (afterCb) {\r\n            var versionInfo = jSW[\"version\"];\r\n            if (versionInfo) {\r\n                setTimeout(function (ver) { \r\n                    afterCb(ver);\r\n                }, 50, versionInfo);\r\n                return 0;\r\n            } else {\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        function onLoadResultProxy(onLoadHasResult, dMgr) {\r\n            var szLoadFuncs = [\r\n                dMgr.HandleResponseInJect,\r\n                dMgr.ImEmotionInJect,\r\n                dMgr.ConferenceInJect,\r\n                dMgr.JswConstInJect,\r\n                dMgr.JswImModuleInJect,\r\n                dMgr.JswHttpFlvInJect,\r\n                dMgr.AudioInJect,\r\n                dMgr.AudioCaptureInJect,\r\n                dMgr.HandleConfSpeakInJect\r\n            ];\r\n            var currentIndex = 0;\r\n            var LoadFuncs = szLoadFuncs[currentIndex];\r\n\r\n            var loadFunciont;\r\n\r\n            return function (tag) {\r\n                loadFunciont = function () {\r\n                    currentIndex++;\r\n                    if (currentIndex < szLoadFuncs.length) {\r\n                        LoadFuncs = szLoadFuncs[currentIndex];\r\n                        LoadFuncs.bind(dMgr)(loadFunciont);\r\n                    } else {\r\n                        onLoadHasResult(tag);\r\n                    }\r\n                }\r\n                LoadFuncs.bind(dMgr)(loadFunciont);\r\n            }\r\n        }\r\n\r\n        this.GetJsEleContainer = function () {\r\n            return document.body;\r\n        }\r\n\r\n        this.LoadProDepends = function (onLoadHasResult, tag) {\r\n            var ProDepends = [\"thlib/jquery-1.8.2.min.js\", \"bv.js\", \"utils/Base64.js\", \"utils/BigInt.js\", \"utils/jn_rsa.js\"];\r\n            var ProDependsPromise = [\"jQuery\", \"proto\", \"Base64\", \"biFromNumber\", \"jnRSA\"];\r\n            return loadDependsProxy(ProDepends, ProDependsPromise, onLoadResultProxy(onLoadHasResult, this), tag);\r\n        }\r\n\r\n        this.LoadHttpDepends = function (onLoadHasResult, tag) {\r\n            var HttpDepends = [\r\n                \"thlib/video.min.js\",\r\n                \"thlib/videojs-contrib-hls.min.js\",\r\n                \"thlib/videojs.zoomrotate.js\",\r\n                \"thlib/video-js.min.css\",\r\n                \"thlib/HttpFlv/flv.min.js\",\r\n                \"thlib/pcm/pcm-player.min.js\",\r\n            ];\r\n            return loadDependsProxy(HttpDepends, \"videojs\", onLoadHasResult, tag);\r\n        }\r\n\r\n        this.LoadOcxDepends = function (onLoadHasResult, tag) {\r\n            var OcxDepends = [\"thlib/jquery-playbar.js\", \"thlib/barstyle.css\"];\r\n            return loadDependsProxy(OcxDepends, null, onLoadHasResult, tag);\r\n        }\r\n\r\n        this.loadDependsProxy = loadDependsProxy;\r\n\r\n        this.cmdParseInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"CmdParse\");\r\n        }\r\n\r\n        this.ImEmotionInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"ImEmotion\");\r\n        }\r\n\r\n        this.HandleResponseInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"HandleResponse\");\r\n        }\r\n\r\n        this.ConferenceInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"Conference\", \"Conference/\");\r\n        }\r\n\r\n        this.JswConstInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"jswConst\");\r\n        }\r\n\r\n        this.JswImModuleInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"ImModule\");\r\n        }\r\n\r\n        this.JswHttpFlvInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"HttpFlv\");\r\n        }\r\n\r\n        this.AudioInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"Audio\", \"Audio/\");\r\n        }\r\n\r\n        this.AudioCaptureInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"AudioCapture\", \"Audio/\");\r\n        }\r\n\r\n        this.HandleConfSpeakInJect = function (afterInjectHandler, scope) {\r\n            return this.moduleInjectUtil(afterInjectHandler, scope, \"HandleConfSpeak\", \"Conference/\");\r\n        }\r\n\r\n\r\n\r\n        this.GetEmotionSync = function () {\r\n            return SyncGetModule(\"ImEmotion\");\r\n        }\r\n\r\n        this.moduleInjectUtil = function (afterInjectHandler, scope, moduleName, prePath, bLoaded) {\r\n            if (bLoaded) {\r\n                (scope ? afterInjectHandler.bind(scope) : afterInjectHandler)();\r\n                return result;\r\n            }\r\n            var modulePath = \"modules/\" + (prePath ? prePath : \"\") + moduleName + \".js\";\r\n            var result = GetRegedModule(moduleName, modulePath, scope ? afterInjectHandler.bind(scope) : afterInjectHandler);\r\n            return result;\r\n        }\r\n\r\n\r\n        var _jSWHostSaved = null;\r\n        this.jSWGetHost = function jswGetHost() {\r\n            if (_jSWHostSaved) {\r\n                return _jSWHostSaved;\r\n            }\r\n            var list = document.getElementsByTagName('script');\r\n            var jsScript = null;\r\n            for (var iIndex = 0; iIndex < list.length; iIndex++) {\r\n                if (list[iIndex].src.indexOf(\"jsw.js\") >= 0) {\r\n                    jsScript = list[iIndex];\r\n                    break;\r\n                }\r\n            }\r\n            if (!jsScript) {\r\n                console.error(\"you can not modify the name of jsw.js, please check\");\r\n                return null;\r\n            }\r\n            _jSWHostSaved = jsScript.src.split(\"jsw.js\")[0];\r\n            return _jSWHostSaved;\r\n        };\r\n\r\n        ModuleInfo.prototype = {\r\n            dependencyRelativePath: \"jswlib/\",\r\n            proJswPath: null,\r\n            GetAbsPath: function () {\r\n                if (this.szNames == null) {\r\n                    this.szNames = [];\r\n                    if (this.proJswPath == null) {\r\n                        this.proJswPath = this._getJswProPath();\r\n                    }\r\n                    var tempPath = \"\";\r\n                    for (var iIndex = 0; iIndex < this.names.length; iIndex++) {\r\n                        if (!this.checkAllPromise(iIndex)) {\r\n                            tempPath = this.proJswPath + this.dependencyRelativePath + this.names[iIndex];\r\n                            this.szNames.push(tempPath);\r\n                        }\r\n                    }\r\n                }\r\n                return this.szNames;\r\n            },\r\n            _getJswProPath: this.jSWGetHost,\r\n            checkAllPromise: function (iIndex) {\r\n                var proExp = \"((typeof (pl) != 'undefined'))\";\r\n                if (!this.promise) {\r\n                    return false;\r\n                }\r\n                if (this.promise instanceof Array) {\r\n                    proExp = proExp.replace(\"pl\", this.promise[iIndex]);\r\n                } else {\r\n                    proExp = proExp.replace(\"pl\", this.promise);\r\n                }\r\n                return eval(proExp);\r\n            }\r\n        }\r\n\r\n        //外部依赖\r\n        this.RegModule = RegModule;\r\n        this.CreateModule = function (name) {\r\n            var module = {};\r\n            this.RegModule(name, module, true);\r\n            return module;\r\n        }\r\n\r\n        this.GetModule = function (name) {\r\n            return GetModuleEntiey(\"\", name)\r\n        }\r\n    })();\r\n\r\n    jSWInit();\r\n    module.exports = jSW;\r\n})();\r\n\r\n\r\nString.prototype.startsWith = function (str) {\r\n    return this.indexOf(str) == 0;\r\n};\n\n//# sourceURL=webpack:///../tmp/jsw.0001ca1c5a87171dc522fa8d28d6a9e5.js?");

/***/ })

/******/ });